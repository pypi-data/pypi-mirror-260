#! /bin/bash

# print image build info
echo "build info: $BUILD_INFO"

echo "start promptflow runtime..."

# support directly run the container with runsvdir command.
# MIR will use this command as default command for non-byoc container, and it already handles
# gracefully shutdown from infra level, no need to handle SIGTERM in serving mode.
[[ -z "${PROMPTFLOW_AUTO_DETECT}" ]] && source /service/scripts/auto_detect_env.sh

RUN_MODE=${PROMPTFLOW_RUN_MODE:-"compute"}
if [ "$RUN_MODE" = "serving" ]; then
    PROMPTFLOW_WORKER_NUM=${PROMPTFLOW_WORKER_NUM:-"8"}
    # TODO: remove MAX_CONCURRENT_REQUESTS parameters after pfs changed to use PROMPTFLOW_WORKER_NUM
    [[ -z "${MAX_CONCURRENT_REQUESTS}" ]] && WORKER_NUM=${PROMPTFLOW_WORKER_NUM} || WORKER_NUM=${MAX_CONCURRENT_REQUESTS}
    # https://docs.gunicorn.org/en/latest/settings.html#threads
    # If you try to use the sync worker type and set the threads setting to more than 1, the gthread worker type will be used instead.
    WORKER_THREADS=${PROMPTFLOW_WORKER_THREADS:-"1"}
    gunicorn_app="promptflow._sdk._serving.app:create_app(extension_type='azureml')"
    echo "start promptflow serving with worker_num: ${WORKER_NUM}, worker_threads: ${WORKER_THREADS}, app: ${gunicorn_app}}"
    gunicorn -w ${WORKER_NUM} --threads ${WORKER_THREADS} -b "0.0.0.0:8080" --timeout 300 ${gunicorn_app}
else
    # export environment variables for embedding store sdk
    source /service/scripts/init_for_embedding_store.sh
    # embedding store service will start under non-serving mode
    export IS_EMBEDDING_STORE_REST_SERVICE_ENABLED="true"

    # Prepare for executor containers.
    echo "Preparing executor containers..."
    # Running this python script in background to avoid blocking the ingress.
    python -m handle_executor_containers --stage init 2>&1 &

    echo "start ingress..."
    # we only need an init worker num, worker num can grow as long as memory is not in pressure
    INIT_WORKER_NUM=${PROMPTFLOW_INIT_WORKERS:-"4"}
    SERVER_PORT=${PORT:-"8080"}
    /service/ingress/promptflow-ingress --app-dir /service/app/ --init-process ${INIT_WORKER_NUM} --port ${SERVER_PORT}
fi
