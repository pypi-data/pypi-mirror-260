"""
pytest for variability.py
"""

import pytest

import easyclimate as ecl
import numpy as np
import xarray as xr
import pandas as pd

sst_timeseries = xr.DataArray(
    np.array(
        [
            29.347528,
            29.097271,
            29.414158,
            29.682327,
            29.765087,
            29.57674,
            29.308327,
            28.854443,
            28.85187,
            28.844013,
            28.935112,
            28.792313,
            28.6857,
            28.806227,
            28.847729,
            29.080112,
            29.265385,
            29.086498,
            28.835426,
            28.771742,
            28.81437,
            29.067184,
            29.301987,
            28.995514,
            28.773684,
            28.641384,
            28.770582,
            29.13947,
            29.389273,
            29.19037,
            29.083426,
            29.017258,
            29.187487,
            29.556942,
            29.831827,
            29.698898,
            29.366127,
            29.203444,
            29.0869,
            29.385927,
            29.388098,
            29.417614,
            29.29614,
            29.305815,
            29.38174,
            29.594328,
            29.757042,
            29.799171,
            29.330843,
            29.243286,
            29.418528,
            29.68187,
            30.018873,
            29.844812,
            29.370714,
            29.427555,
            29.571928,
            29.725399,
            29.908756,
            29.902645,
            29.699043,
            29.540981,
            29.444414,
            29.913399,
            29.845999,
            29.67817,
            29.325956,
            28.979944,
            29.214754,
            29.23727,
            29.879799,
            29.828169,
            29.456327,
            29.282442,
            29.508482,
            29.6117,
            29.852713,
            29.888113,
            29.680742,
            29.479841,
            29.620369,
            29.676613,
            29.685156,
            29.587656,
            29.343454,
            29.086227,
            29.113672,
            29.399113,
            29.718683,
            29.696186,
            29.512985,
            29.451885,
            29.49677,
            29.541456,
            29.792229,
            29.554129,
            29.260298,
            29.066557,
            29.263298,
            29.4407,
            29.649672,
            29.6781,
            29.418974,
            29.404299,
            29.438728,
            29.844227,
            30.02553,
            29.862041,
            29.43343,
            29.241543,
            29.350756,
            29.498257,
            29.80587,
            29.7013,
            29.594614,
            29.44226,
            29.465628,
            29.968756,
            29.956043,
            30.124586,
        ]
    ),
    dims="time",
    coords={"time": pd.date_range("2010-01-01", "2019-12-31", freq="M")},
)

u_data_sample = xr.DataArray(
    np.array(
        [
            -5.2400055,
            -1.949997,
            -3.3600006,
            -5.220001,
            -5.6100006,
            -6.0099945,
            -4.25,
            -2.75,
            -3.9199982,
            -3.4199982,
            -6.0099945,
            -4.199997,
            -7.8600006,
            -2.800003,
            -6.3600006,
            -6.779999,
            -5.3899994,
            -5.0099945,
            -4.419998,
            -4.199997,
            -2.2700043,
            -3.600006,
            -6.630005,
            -7.5899963,
            -6.3600006,
            -8.25,
            -3.4100037,
            -7.220001,
            -5.5700073,
            -4.300003,
            -3.0200043,
            -4.0400085,
            -2.8899994,
            -4.930008,
            -4.149994,
            -7.2100067,
            -2.7599945,
            -5.9400024,
            -5.1600037,
            -2.369995,
            -6.5400085,
            -4.6900024,
            -4.1600037,
            -2.5200043,
            -3.369995,
            -4.9799957,
            -7.5899963,
            -6.169998,
            -3.100006,
            -2.4700012,
            -6.180008,
            -6.6600037,
            -5.5,
            -3.680008,
            -6.300003,
            -4.0700073,
            -2.3163245,
            -4.443382,
            -6.664166,
            -7.143548,
            -8.664516,
            -5.034821,
            -5.090321,
            -6.2341657,
            -4.68629,
            -7.069165,
            -3.5564506,
            -3.5879028,
            -3.556666,
            -4.7411284,
            -6.964999,
            -6.316935,
            -4.7403226,
            -9.636208,
            -6.0008063,
            -5.1908326,
            -5.1298375,
            -5.497499,
            -3.5637095,
            -4.6508055,
            -2.9158323,
            -2.7991927,
            -5.6016665,
            -5.955645,
            -6.0774198,
            -4.3589277,
            -5.5903215,
            -6.139166,
            -5.458063,
            -5.650831,
            -5.0185485,
            -5.5419345,
            -3.5658329,
            -6.1096764,
            -5.8241663,
            -5.004838,
            -6.2935476,
            -4.885714,
            -5.116128,
            -7.0016665,
            -7.820967,
            -6.6649985,
            -4.5129037,
            -2.7483861,
            -3.4741662,
            -5.074192,
            -5.454166,
            -1.6782249,
            -5.7241926,
            -1.1714278,
            -5.7370963,
            -6.636666,
            -6.5782256,
            -4.6766653,
            -5.293547,
            -4.511289,
            -3.5266657,
            -3.0112894,
            -5.5858326,
            -4.0266113,
        ]
    ),
    dims="time",
    coords={"time": pd.date_range("2010-01-01", "2019-12-31", freq="M")},
)

v_data_sample = xr.DataArray(
    np.array(
        [
            0.1499939,
            -1.6399994,
            -0.47999573,
            -0.47000122,
            -0.66999817,
            -0.9900055,
            -0.04000854,
            -0.33999634,
            -0.91000366,
            -0.2400055,
            0.08000183,
            -0.33000183,
            1.3199921,
            1.2299957,
            -0.1000061,
            0.30000305,
            -0.15000916,
            -0.32000732,
            -0.2400055,
            -0.93000793,
            -0.80999756,
            -0.9900055,
            0.11000061,
            0.5399933,
            0.84999084,
            0.5399933,
            0.3899994,
            0.02000427,
            -0.58000183,
            -0.9900055,
            -0.30000305,
            -0.58000183,
            -0.66999817,
            -0.3600006,
            -0.7200012,
            1.1100006,
            0.7599945,
            0.00999451,
            -0.7700043,
            -0.58999634,
            -0.40000916,
            0.09999084,
            -0.94000244,
            -0.44999695,
            -0.29000854,
            -0.3500061,
            0.22000122,
            -0.07000732,
            0.6300049,
            0.6300049,
            -0.68000793,
            -1.4700012,
            -0.2400055,
            -0.44999695,
            -1.1900024,
            -1.0599976,
            -1.2403259,
            -0.79515547,
            -0.81999993,
            -0.5935484,
            1.7290322,
            0.16428573,
            0.03225811,
            -1.0258332,
            -0.7814516,
            -1.1516665,
            -0.60483867,
            -0.83387095,
            -0.87333333,
            -0.6064515,
            0.22666669,
            1.8475807,
            0.6564516,
            2.9586208,
            0.707258,
            -1.0899999,
            -0.87822574,
            -0.6491667,
            -1.1580644,
            -1.3169358,
            -0.18749999,
            -0.22419356,
            -0.85833323,
            0.04838711,
            0.6233871,
            0.03392854,
            -0.6959676,
            -0.41,
            -0.8241936,
            -0.37499997,
            -0.7637095,
            -0.6129031,
            -0.8325001,
            -0.50000006,
            -0.6058334,
            1.8274194,
            0.72016126,
            1.2785712,
            -0.17177422,
            -1.4308336,
            -0.62661296,
            -1.2241668,
            -1.2975805,
            -0.4685484,
            -0.4208334,
            -0.2669355,
            0.4108334,
            1.8129032,
            1.1870967,
            0.9285714,
            0.9766128,
            -0.8391666,
            -0.08145163,
            -1.1983331,
            -1.3419353,
            -1.8306453,
            -0.4808334,
            -0.04838709,
            0.48499998,
            0.7798387,
        ]
    ),
    dims="time",
    coords={"time": pd.date_range("2010-01-01", "2019-12-31", freq="M")},
)

uv_data_sample = xr.Dataset(data_vars={"u": u_data_sample, "v": v_data_sample})


def test_calc_all_climatological_mean():
    result_data = ecl.calc_all_climatological_mean(sst_timeseries).data
    refer_data = np.array(29.41912939)
    assert np.isclose(result_data, refer_data).all()


def test_calc_seasonal_climatological_mean():
    result_data = ecl.calc_seasonal_climatological_mean(sst_timeseries).data
    refer_data = np.array([29.3350306, 29.37734163, 29.45836823, 29.5057771])
    assert np.isclose(result_data, refer_data).all()


def test_calc_seasonal_cycle_mean():
    result_data = ecl.calc_seasonal_cycle_mean(sst_timeseries).data
    refer_data = np.array(
        [
            29.2696434,
            29.1209362,
            29.2218519,
            29.4832875,
            29.6699653,
            29.5757903,
            29.3427304,
            29.2135042,
            29.3043644,
            29.5056188,
            29.7073481,
            29.6145122,
        ]
    )
    assert np.isclose(result_data, refer_data).all()


def test_calc_seasonal_cycle_std():
    result_data = ecl.calc_seasonal_cycle_std(sst_timeseries).data
    refer_data = np.array(
        [
            0.29286213,
            0.23928619,
            0.24478873,
            0.24081124,
            0.2320231,
            0.25181168,
            0.23270414,
            0.26229246,
            0.26926783,
            0.33472974,
            0.31933075,
            0.39431879,
        ]
    )
    assert np.isclose(result_data, refer_data).all()


def test_calc_seasonal_cycle_var():
    result_data = ecl.calc_seasonal_cycle_var(sst_timeseries).data
    refer_data = np.array(
        [
            0.08576823,
            0.05725788,
            0.05992152,
            0.05799006,
            0.05383472,
            0.06340912,
            0.05415122,
            0.06879733,
            0.07250517,
            0.112044,
            0.10197213,
            0.1554873,
        ]
    )
    assert np.isclose(result_data, refer_data).all()


def test_remove_seasonal_cycle_mean():
    result_data = ecl.remove_seasonal_cycle_mean(sst_timeseries).data
    refer_data = np.array(
        [
            0.0778846,
            -0.0236652,
            0.1923061,
            0.1990395,
            0.0951217,
            0.0009497,
            -0.0344034,
            -0.3590612,
            -0.4524944,
            -0.6616058,
            -0.7722361,
            -0.8221992,
            -0.5839434,
            -0.3147092,
            -0.3741229,
            -0.4031755,
            -0.4045803,
            -0.4892923,
            -0.5073044,
            -0.4417622,
            -0.4899944,
            -0.4384348,
            -0.4053611,
            -0.6189982,
            -0.4959594,
            -0.4795522,
            -0.4512699,
            -0.3438175,
            -0.2806923,
            -0.3854203,
            -0.2593044,
            -0.1962462,
            -0.1168774,
            0.0513232,
            0.1244789,
            0.0843858,
            0.0964836,
            0.0825078,
            -0.1349519,
            -0.0973605,
            -0.2818673,
            -0.1581763,
            -0.0465904,
            0.0923108,
            0.0773756,
            0.0887092,
            0.0496939,
            0.1846588,
            0.0611996,
            0.1223498,
            0.1966761,
            0.1985825,
            0.3489077,
            0.2690217,
            0.0279836,
            0.2140508,
            0.2675636,
            0.2197802,
            0.2014079,
            0.2881328,
            0.4293996,
            0.4200448,
            0.2225621,
            0.4301115,
            0.1760337,
            0.1023797,
            -0.0167744,
            -0.2335602,
            -0.0896104,
            -0.2683488,
            0.1724509,
            0.2136568,
            0.1866836,
            0.1615058,
            0.2866301,
            0.1284125,
            0.1827477,
            0.3123227,
            0.3380116,
            0.2663368,
            0.3160046,
            0.1709942,
            -0.0221921,
            -0.0268562,
            0.0738106,
            -0.0347092,
            -0.1081799,
            -0.0841745,
            0.0487177,
            0.1203957,
            0.1702546,
            0.2383808,
            0.1924056,
            0.0358372,
            0.0848809,
            -0.0603832,
            -0.0093454,
            -0.0543792,
            0.0414461,
            -0.0425875,
            -0.0202933,
            0.1023097,
            0.0762436,
            0.1907948,
            0.1343636,
            0.3386082,
            0.3181819,
            0.2475288,
            0.1637866,
            0.1206068,
            0.1289041,
            0.0149695,
            0.1359047,
            0.1255097,
            0.2518836,
            0.2287558,
            0.1612636,
            0.4631372,
            0.2486949,
            0.5100738,
        ]
    )
    assert np.isclose(result_data, refer_data).all()


def test_calc_monthly_climatological_std_without_seasonal_cycle_mean():
    result_data = ecl.calc_monthly_climatological_std_without_seasonal_cycle_mean(
        sst_timeseries
    ).data
    refer_data = np.array(0.2803478)
    assert np.isclose(result_data, refer_data).all()


def test_calc_monthly_climatological_var_without_seasonal_cycle_mean():
    result_data = ecl.calc_monthly_climatological_var_without_seasonal_cycle_mean(
        sst_timeseries
    ).data
    refer_data = np.array(0.07859489)
    assert np.isclose(result_data, refer_data).all()


def test_calc_horizontal_wind_components_std():
    result_data = ecl.calc_horizontal_wind_components_std(uv_data_sample)
    result_data1 = result_data["u"].data
    result_data2 = result_data["v"].data
    result_data3 = result_data["sigma_s"].data
    result_data4 = result_data["sigma_d"].data

    refer_data1 = np.array(
        [
            -5.2400055,
            -1.949997,
            -3.3600006,
            -5.220001,
            -5.6100006,
            -6.0099945,
            -4.25,
            -2.75,
            -3.9199982,
            -3.4199982,
            -6.0099945,
            -4.199997,
            -7.8600006,
            -2.800003,
            -6.3600006,
            -6.779999,
            -5.3899994,
            -5.0099945,
            -4.419998,
            -4.199997,
            -2.2700043,
            -3.600006,
            -6.630005,
            -7.5899963,
            -6.3600006,
            -8.25,
            -3.4100037,
            -7.220001,
            -5.5700073,
            -4.300003,
            -3.0200043,
            -4.0400085,
            -2.8899994,
            -4.930008,
            -4.149994,
            -7.2100067,
            -2.7599945,
            -5.9400024,
            -5.1600037,
            -2.369995,
            -6.5400085,
            -4.6900024,
            -4.1600037,
            -2.5200043,
            -3.369995,
            -4.9799957,
            -7.5899963,
            -6.169998,
            -3.100006,
            -2.4700012,
            -6.180008,
            -6.6600037,
            -5.5,
            -3.680008,
            -6.300003,
            -4.0700073,
            -2.3163245,
            -4.443382,
            -6.664166,
            -7.143548,
            -8.664516,
            -5.034821,
            -5.090321,
            -6.2341657,
            -4.68629,
            -7.069165,
            -3.5564506,
            -3.5879028,
            -3.556666,
            -4.7411284,
            -6.964999,
            -6.316935,
            -4.7403226,
            -9.636208,
            -6.0008063,
            -5.1908326,
            -5.1298375,
            -5.497499,
            -3.5637095,
            -4.6508055,
            -2.9158323,
            -2.7991927,
            -5.6016665,
            -5.955645,
            -6.0774198,
            -4.3589277,
            -5.5903215,
            -6.139166,
            -5.458063,
            -5.650831,
            -5.0185485,
            -5.5419345,
            -3.5658329,
            -6.1096764,
            -5.8241663,
            -5.004838,
            -6.2935476,
            -4.885714,
            -5.116128,
            -7.0016665,
            -7.820967,
            -6.6649985,
            -4.5129037,
            -2.7483861,
            -3.4741662,
            -5.074192,
            -5.454166,
            -1.6782249,
            -5.7241926,
            -1.1714278,
            -5.7370963,
            -6.636666,
            -6.5782256,
            -4.6766653,
            -5.293547,
            -4.511289,
            -3.5266657,
            -3.0112894,
            -5.5858326,
            -4.0266113,
        ]
    )
    refer_data2 = np.array(
        [
            0.1499939,
            -1.6399994,
            -0.47999573,
            -0.47000122,
            -0.66999817,
            -0.9900055,
            -0.04000854,
            -0.33999634,
            -0.91000366,
            -0.2400055,
            0.08000183,
            -0.33000183,
            1.3199921,
            1.2299957,
            -0.1000061,
            0.30000305,
            -0.15000916,
            -0.32000732,
            -0.2400055,
            -0.93000793,
            -0.80999756,
            -0.9900055,
            0.11000061,
            0.5399933,
            0.84999084,
            0.5399933,
            0.3899994,
            0.02000427,
            -0.58000183,
            -0.9900055,
            -0.30000305,
            -0.58000183,
            -0.66999817,
            -0.3600006,
            -0.7200012,
            1.1100006,
            0.7599945,
            0.00999451,
            -0.7700043,
            -0.58999634,
            -0.40000916,
            0.09999084,
            -0.94000244,
            -0.44999695,
            -0.29000854,
            -0.3500061,
            0.22000122,
            -0.07000732,
            0.6300049,
            0.6300049,
            -0.68000793,
            -1.4700012,
            -0.2400055,
            -0.44999695,
            -1.1900024,
            -1.0599976,
            -1.2403259,
            -0.79515547,
            -0.81999993,
            -0.5935484,
            1.7290322,
            0.16428573,
            0.03225811,
            -1.0258332,
            -0.7814516,
            -1.1516665,
            -0.60483867,
            -0.83387095,
            -0.87333333,
            -0.6064515,
            0.22666669,
            1.8475807,
            0.6564516,
            2.9586208,
            0.707258,
            -1.0899999,
            -0.87822574,
            -0.6491667,
            -1.1580644,
            -1.3169358,
            -0.18749999,
            -0.22419356,
            -0.85833323,
            0.04838711,
            0.6233871,
            0.03392854,
            -0.6959676,
            -0.41,
            -0.8241936,
            -0.37499997,
            -0.7637095,
            -0.6129031,
            -0.8325001,
            -0.50000006,
            -0.6058334,
            1.8274194,
            0.72016126,
            1.2785712,
            -0.17177422,
            -1.4308336,
            -0.62661296,
            -1.2241668,
            -1.2975805,
            -0.4685484,
            -0.4208334,
            -0.2669355,
            0.4108334,
            1.8129032,
            1.1870967,
            0.9285714,
            0.9766128,
            -0.8391666,
            -0.08145163,
            -1.1983331,
            -1.3419353,
            -1.8306453,
            -0.4808334,
            -0.04838709,
            0.48499998,
            0.7798387,
        ]
    )
    refer_data3 = np.array(1.58087643)
    refer_data4 = np.array(0.16853612)
    assert np.isclose(result_data1, refer_data1).all()
    assert np.isclose(result_data2, refer_data2).all()
    assert np.isclose(result_data3, refer_data3).all()
    assert np.isclose(result_data4, refer_data4).all()
