# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_core/12_ptyp.ipynb.

# %% auto 0
__all__ = ['PrototypeMeta', 'Prototype']

# %% ../../nbs/01_core/12_ptyp.ipynb 6
from abc import abstractmethod
from functools import wraps

# %% ../../nbs/01_core/12_ptyp.ipynb 8
from types import (NoneType,)
from typing import (
    Self, Type, Union, TypeGuard, ClassVar, Callable, 
    Iterable, Optional, Protocol, _ProtocolMeta, runtime_checkable, overload, 
)


# %% ../../nbs/01_core/12_ptyp.ipynb 10
#| export


# %% ../../nbs/01_core/12_ptyp.ipynb 12
#| export


# %% ../../nbs/01_core/12_ptyp.ipynb 14
from typs.util.cons import (
    U1, U2, NIL, TILDE,
    ALT,  TYPES, PREFIX, SUFFIX, CLSNAME, DROPNONE, 
    DECORATED, ALL_ATTRS, PROTOCOL_METHOD_ORDER, 
    _DECORATED,
    __BASES__, __PROPS__, __MODULE__, __QUALNAME__, __ANNOTATIONS__,  
)
from ..util.enum import ProtocolMethod, ProtocolMethodOrder
from ..util.type import T, Types, IterT, IterFunc, IterStr, Guard, AttrGuards
from ..util.grds import isalias
from ..util.prop import Property, slotprops
from ..util.misc import opttypes, filtkwds, qualname, getname
from ..util.imps import ModuleAttribute

from .rchk import RuntimeCheckableMeta, Opt, Not, Alias

# %% ../../nbs/01_core/12_ptyp.ipynb 16
class PrototypeMeta(RuntimeCheckableMeta):
    '''Metaclass for creating optional type classes with custom type checking.'''  
    q: Opt # optional version of self (i.e. with `None` added to `types`)
    n: Not # negated version of self (i.e. `not self.guad()`)
    
    @classmethod
    def getbtype(cls): return Prototype
    
    def __new__(mcls: Type[Self], name: str, bases: tuple = tuple(), dct: dict = dict(), **kwargs):
        types = kwargs.pop(TYPES, ())
        new = super().__new__(mcls, name, bases, dct, types=types, **kwargs)
        @Not(new, **kwargs)
        class notcls: ...
        
        @Opt(new, **kwargs)
        class optcls: ...
        
        notcls.__qualname__ = qualname(new, *new.types, **Not.default_kwds(**kwargs))
        optcls.__qualname__ = qualname(new, *new.types, **Opt.default_kwds(**kwargs))
        notcls.__name__ = f'{TILDE}{new.__name__}'
        optcls.__name__ = f'?{new.__name__}'
        
        setattr(new, 'n', notcls)
        setattr(new, 'q', optcls)
        return new
        
    def __hash__(self) -> int:
        return super().__hash__()

# %% ../../nbs/01_core/12_ptyp.ipynb 17
@runtime_checkable
class Prototype(Protocol, metaclass=PrototypeMeta):
    '''Class representing an alias with custom type checking.
    
    Examples
    --------
    >>> @Alias(str, bytes)
    >>> class StrBytes: ...
    ...
    >>> @Alias(int, str)
    >>> class IntStr: ...
    ...
    >>> @Not(str, bytes)
    >>> class NotStrBytes: ...
    ...
    >>> @Not(int)
    >>> class NotInt: ...
    ...
    >>> @Opt(str)
    >>> class StrQ: ...
    ...
    >>> @Opt(int)
    >>> class IntQ: ...
    ...
    >>> @Alias(IntQ, str)
    >>> class IntQStr: ...
    ...
    >>> vals = (10, None, 'hello', 42.30, tuple())
    >>> tuple(map(lambda c: c(*vals, __ins=True), (IntStr, NotInt, IntQ, IntQStr, )))
    ( # (10,    None, 'hello', 42.30,  tuple())
        (True, False,    True, False,  False), # IntStr
        (False, True,    True,  True,   True), # NotInt
        (True,  True,   False, False,  False), # OptInt
        (True,  True,    True, False,  False)  # IntQStr
    )
    
    ...
    ...
    >>> @Typed(int)
    >>> class tint: ...
    ...
    >>> tuple(((k.__name__, k.__qualname__) for k in (tint, tint.n, tint.q)))
    (('tint', 'tint({int})'), ('~tint', 'tint(~{int})'), ('?tint', 'tint(?{int})'))
    ...
    >>> tint(None, 1, 's', __ins=True), tint.q(None, 1, 's', __ins=True), tint.n(None, 1, 's', __ins=True)
    ((False, True, False), (True, True, False), (True, False, True))
    ...
    >>> vals = (10, None, 'hello', 42.30, tuple())
    >>> tuple(map(lambda x: (tint(x, __ins=True), tint.q(x, __ins=True), tint.n(x, __ins=True)), vals))
    # tint, tint.q, tint.n)
    ((True,  True,  False),
    (False, True,   True),
    (False, False,  True),
    (False, False,  True),
    (False, False,  True))
    ...
    ...
    # prioritize the order of the __call__ methods to `('ins', 'gen', 'dec')` 
    # i.e. (`check`, `con`, `new`). Note that the default order is `('gen', 'ins', 'dec')`
    # NOTE: default order of the __call__ methods (`check`, `con`, `new`)
    >>> @Typed(int, priority=('ins', 'gen', 'dec'))
    >>> class tint: ...
    ...
    >>> tint(None, 1, 's'), tint.q(None, 1, 's'), tint.n(None, 1, 's')
    ((False, True, False), (True, True, False), (True, False, True))
    '''
    q: Opt # optional version of self (i.e. with `None` added to `types`)
    n: Not # negated version of self (i.e. `not self.guad()`)    
