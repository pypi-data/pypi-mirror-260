# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/03_inst/01_prot.ipynb.

# %% auto 0
__all__ = ['itertype', 'npbool', 'boolic', 'bool01', 'iterbool', 'bools', 'intq', 'ints', 'floatq', 'floats', 'real', 'realq',
           'reals', 'num', 'numq', 'nums', 'iternum', 'numstr', 'none', 'pynan', 'pdna', 'npnan', 'nan', 'nanq', 'nans',
           'pattern', 'rematch', 'strtmpl', 'strq', 'nilstr', 'strbytes', 'notnilstr', 'notstrbytes', 'strs', 'iterstr',
           'moduleloader', 'modulespec', 'ospathlike', 'plibpath', 'posixpath', 'pathlike', 'sig', 'param', 'logger',
           'ichain', 'iprod', 'ziplong', 'dictkeys', 'dictvalues', 'dictitems', 'moduletype', 'wrappertype',
           'builtinfunctype', 'trackbacktype', 'functiontype', 'mapping', 'richtree', 'richtext', 'richcons',
           'richprog', 'richtask', 'tqdmauto', 'typerapp', 'artist', 'colormap', 'lscolormap', 'mplpatch', 'mplaxes',
           'npmatrix', 'nparray', 'recarray', 'npempty', 'sparray', 'spmatrix', 'cscarray', 'cscmatrix', 'cooarray',
           'coomatrix', 'csrarray', 'csrmatrix', 'diaarray', 'diamatrix', 'dokarray', 'dokmatrix', 'lilarray',
           'lilmatrix', 'bsrarray', 'bsrmatrix', 'sparsearray', 'sparsematrix', 'sparse', 'array', 'matrix',
           'cv2vidcap', 'pilimage', 'vidcap', 'image', 'groupkey', 'pddelegate', 'pdcataccessor', 'pdindex',
           'pdcatindex', 'boolindex', 'catindex', 'indextype', 'indexlike', 'pdseries', 'seriestype', 'serieslike',
           'serialized', 'pddataframe', 'dataframe', 'pttype', 'memfmt', 'presfmt', 'ptsize', 'ptdevice', 'pttensor',
           'inttensor', 'booltensor', 'floattensor', 'nantensor', 'tensor', 'ptmodule', 'plmodule', 'nnmodule',
           'ptdataset', 'pldatamodule', 'ptdataloader', 'neuralode', 'neuralsde', 'neuraldynamics', 'odefunc',
           'sdefunc', 'sdeito', 'brownianintervial', 'augmenter', 'dtype', 'device', 'size', 'npdatasource',
           'datasource', 'adata', 'adatas', 'graphtype', 'datatype', 'shaped', 'dimmed', 'dim1', 'dim2', 'dim3', 'dim4']

# %% ../../nbs/03_inst/01_prot.ipynb 6
#| export


# %% ../../nbs/03_inst/01_prot.ipynb 8
from typing import Literal, Iterable

# %% ../../nbs/03_inst/01_prot.ipynb 10
#| export


# %% ../../nbs/03_inst/01_prot.ipynb 12
from ..core.ptyp import Prototype, Opt, Not
from typs.prep.matr import (
    npbool as npb,
    number, nparray,
    nan as mathnan, pdna as pdNA, npnan as np_nan, npNaN, npNAN, ptnan, nparray, nonetype,
    repattern, rematch as rematched, strtemplate,
    
    moduleloader as impload,
    modulespec as impspec,
    pathlike as osospathlike,
    path as pathlibpath,
    posixpath as plibpxpath,
    sig as inspect_sig, 
    param as inspect_param,
    logger as loglog,
    
    
    ichain as iterchain, 
    iprod as iterprod, 
    ziplong as iterziplong,
    
    dict_keys, 
    dict_values, 
    dict_items,
    
    moduletype as modtype,
    wrappertype as wraptype,
    builtinfunctype as bftype,
    trackbacktype as tracetype,
    functiontype as functype,
    mapping as maptype,
    
    richtree as richrichtree,
    richtext as richrichtext,
    richcons as richrichcons,
    richprog as richrichprog,
    richtask as richrichtask,
    tqdmauto as tqdmtqdmauto,
    typer as typetyper,
    
    artist as mplart,
    colormap as cmap,
    lscolormap as lscmap,
    mplpatch as patch,
    mplaxes as axes,

    npmatrix as npnpmatrix, 
    nparray as npnparray, 
    recarray as nprecarray, 
    npempty as npnpempty, 
    
    sparray as spsparray, 
    spmatrix as spspmatrix,     
    cscarray as spcscarray,
    cscmatrix as spcscmatrix,
    cooarray as spcooarray,
    coomatrix as spcoomatrix,
    csrarray as spcsrarray,
    csrmatrix as spcsrmatrix,
    diaarray as spdiaarray,
    diamatrix as spdiamatrix,
    dokarray as spdokarray,
    dokmatrix as spdokmatrix,
    lilarray as splilarray,
    lilmatrix as splilmatrix,
    bsrarray as spbsrarray,
    bsrmatrix as spbsrmatrix,
    
    
    pttensor as ptpttensor, 
    ptinttensor as ptinttensor, 
    ptbooltensor as ptbooltensor, 
    ptfloattensor as ptfloattensor, 
    
    vidcap as cv2cv2vidcap, image as pilpilimage,
    
    pdindex as pdpdindex,
    pdseries as pdpdseries,
    pdcatindex as pdpdcatindex,
    pddelegate as pdpddelegate,
    pdcataccessor as pdpdcataccessor,
    pddataframe as pdpddataframe,

    pttensor as ptpttensor, 
    ptinttensor as ptinttensor, 
    ptbooltensor as ptbooltensor, 
    ptfloattensor as ptfloattensor, 
    
    ptsize as ptptsize, 
    pttype as ptpttype,
    ptdevice as ptptdevice,
    ptmemfmt, ptpresfmt,
    ptmodule as ptptmodule,
    ptdataset as ptptdataset, 
    ptdataloader as ptptdataloader, 
    
    plmodule as plplmodule, 
    pldatamodule as plpldatamodule,  
    
    odefn, sdefn, neurode, neursde, 
    augmenter as tdaugmenter, 
    ito, brownian, 

    nptype,
    
    anndata, 
    npdatasource as npnpdatasource, 
    bgraph, dgraph, lgraph, 
    kgraph, tgraph, mgraph, 
    klgraph, mlgraph, tlgraph
)

# %% ../../nbs/03_inst/01_prot.ipynb 14
#| export


# %% ../../nbs/03_inst/01_prot.ipynb 16
@Prototype(Iterable)
class itertype: '''iterable type'''

# %% ../../nbs/03_inst/01_prot.ipynb 20
@Prototype(npb)
class npbool: '''np.bool'''

@Prototype(bool, npb)
class boolic: '''bool, np.bool_'''

@Prototype(bool, npb, 0, 1)
class bool01: '''bool, np.bool_, 0, 1'''

@Prototype(itertype, attrs=dict(dtype=bool01))
class iterbool: '''iterable of `bool`'''

@Prototype(list, tuple, iterbool, attrs=dict(dtype=bool01))
class bools: '''list of bool01'''

# %% ../../nbs/03_inst/01_prot.ipynb 23
@Opt(int)
class intq: '''int or None'''

@Prototype(int, list, tuple, itertype, nparray, attrs=dict(dtype=int))
class ints: '''iterable of ints'''

# %% ../../nbs/03_inst/01_prot.ipynb 25
@Opt(float)
class floatq: '''float or None'''

@Prototype(float, list, tuple, itertype, nparray, attrs=dict(dtype=float))
class floats: '''iterable of floats'''

# %% ../../nbs/03_inst/01_prot.ipynb 27
@Prototype(int, float)
class real: '''R (i.e. int or float)'''

@Opt(real)
class realq: '''real or None'''

@Prototype(real, list, tuple, itertype, nparray, attrs=dict(dtype=real))
class reals: '''iterable of `real`'''

# %% ../../nbs/03_inst/01_prot.ipynb 29
@Prototype(int, float, complex, number)
class num: '''int, float, complex, or Number'''

@Opt(num)
class numq: '''num or None'''

@Prototype(num, list, tuple, itertype, nparray, attrs=dict(dtype=num))
class nums: '''list of `num`'''

# %% ../../nbs/03_inst/01_prot.ipynb 30
@Prototype(itertype, attrs=dict(dtype=num))
class iternum: '''iterable of `num``'''

# %% ../../nbs/03_inst/01_prot.ipynb 34
@Prototype(num, str)
class numstr: '''`num` or str'''

# %% ../../nbs/03_inst/01_prot.ipynb 37
@Prototype(None, nonetype)
class none: '''`None` or `NoneType`'''

# %% ../../nbs/03_inst/01_prot.ipynb 40
@Prototype(mathnan)
class pynan: '''`math.nan`''';

@Prototype(pdNA)
class pdna: '''`pd.NA`''';

@Prototype(np_nan, npNaN, npNAN)
class npnan: '''`np.nan`, `np.NaN`, or `np.NAN`'''

# %% ../../nbs/03_inst/01_prot.ipynb 41
@Prototype(mathnan, pdNA, np_nan, npNaN, npNAN, ptnan)
class nan: '''`math.nan`, `pd.NA`, `np.nan`, `np.NaN`, or `np.NAN`'''

@Opt(nan)
class nanq: '''`math.nan`, `pd.NA`, `np.nan`, `np.NaN`, `np.NAN`, or `None`'''

@Prototype(nan, list, tuple, itertype, nparray, attrs=dict(dtype=nan))
class nans: '''list of `nan`'''

# %% ../../nbs/03_inst/01_prot.ipynb 44
@Prototype(repattern)
class pattern: '''`re.Pattern`'''

@Prototype(rematched)
class rematch: '''`re.Pattern`'''

@Prototype(str, strtemplate)
class strtmpl: '''`str or string.Template`'''

# %% ../../nbs/03_inst/01_prot.ipynb 45
@Opt(str)
class strq: '''str or `None`'''

@Prototype(Literal[''])
class nilstr: '''`''` (the nil string)'''

# %% ../../nbs/03_inst/01_prot.ipynb 46
@Prototype(str, bytes)
class strbytes: '''str or bytes'''

@Not(nilstr)
class notnilstr: '''not `nilstr` (not `''`, the nil string)'''

@Not(str, bytes)
class notstrbytes: '''not (str or bytes)'''

@Prototype(list, tuple, itertype, notstrbytes, attrs=dict(dtype=str))
class strs: '''iterable of `str`'''

@Prototype(itertype, notstrbytes, attrs=dict(dtype=str))
class iterstr: '''iterable of `str`'''

# %% ../../nbs/03_inst/01_prot.ipynb 50
@Prototype(impload)
class moduleloader: '''`importlib.Loader`''';

@Prototype(impspec)
class modulespec: '''`importlib.machinery.ModuleSpec`''';

# %% ../../nbs/03_inst/01_prot.ipynb 51
@Prototype(osospathlike)
class ospathlike: '''`os.PathLike`''';

@Prototype(pathlibpath)
class plibpath: '''`pathlib.Path`''';

@Prototype(plibpxpath)
class posixpath: '''`pathlib.PosixPath`''';

@Prototype(pathlibpath, plibpxpath, osospathlike)
class pathlike: '''`pathlib.Path`, `pathlib.PosixPath`, or `os.PathLike`''';

@Prototype(inspect_sig)
class sig: '''`inspect.Signature`''';

@Prototype(inspect_param)
class param: '''`inspect.Parameter`''';

@Prototype(loglog)
class logger: '''`logging.Logger`''';

@Prototype(iterchain)
class ichain: '''`itertools.chain`''';

@Prototype(iterprod)
class iprod: '''`itertools.product`''';

@Prototype(iterziplong)
class ziplong: '''`itertools.zip_longest`''';

@Prototype(dict_keys)
class dictkeys: '''`_collections_abc.dict_keys`''';

@Prototype(dict_values)
class dictvalues: '''`_collections_abc.dict_values`''';

@Prototype(dict_items)
class dictitems: '''`_collections_abc.dict_items`''';

# %% ../../nbs/03_inst/01_prot.ipynb 52
@Prototype(modtype)
class moduletype: '''`types.ModuleType`''';

@Prototype(wraptype)
class wrappertype: '''`types.MethodWrapperType`''';

@Prototype(bftype)
class builtinfunctype: '''`types.BuiltinFunctionType`''';

@Prototype(tracetype)
class trackbacktype: '''`types.TracebackType`''';

@Prototype(functype)
class functiontype: '''`types.FunctionType`''';

@Prototype(maptype)
class mapping: '''`collections.Mapping`''';

# %% ../../nbs/03_inst/01_prot.ipynb 54
@Prototype(richrichtree)
class richtree: '''`rich.tree.Tree`''';

@Prototype(richrichtext)
class richtext: '''`rich.text.Text`''';

@Prototype(richrichcons)
class richcons: '''`rich.console.Console`''';

@Prototype(richrichprog)
class richprog: '''`rich.progress.Progress`''';

@Prototype(richrichtask)
class richtask: '''`rich.tree.Task`''';

@Prototype(tqdmtqdmauto)
class tqdmauto: '''`tqdm.auto.tqdm`''';

@Prototype(typetyper)
class typerapp: '''`typer.Typer`''';

# %% ../../nbs/03_inst/01_prot.ipynb 56
@Prototype(mplart)
class artist: '''`matplotlib.artist.Artist`''';

@Prototype(cmap)
class colormap: '''`matplotlib.colors.Colormap`''';

@Prototype(lscmap)
class lscolormap: '''`matplotlib.colors.LinearSegmentedColormap`''';

@Prototype(patch)
class mplpatch: '''`matplotlib.patches.Patch`''';

@Prototype(axes)
class mplaxes: '''`matplotlib.axes._axes.Axes`''';

# %% ../../nbs/03_inst/01_prot.ipynb 59
@Prototype(npnpmatrix)
class npmatrix:
    '''`numpy.matrix`''';
    
@Prototype(npnparray)
class nparray:
    '''`numpy.ndarray`''';
    
@Prototype(nprecarray)
class recarray:
    '''`numpy.recarray`''';
    
@Prototype(npnpempty)
class npempty:
    '''`numpy.empty`''';

# %% ../../nbs/03_inst/01_prot.ipynb 61
@Prototype(spsparray)
class sparray: 
    '''`scipy.sparse.aparray`''';

@Prototype(spspmatrix)
class spmatrix: 
    '''`scipy.sparse.spmatrix`''';

@Prototype(spcscarray)
class cscarray:
    '''`scipy.sparse.csc_array`''';
    
@Prototype(spcscmatrix)
class cscmatrix:
    '''`scipy.sparse.csc_matrix`''';

@Prototype(spcooarray)
class cooarray:
    '''`scipy.sparse.coo_array`''';

@Prototype(spcoomatrix)
class coomatrix:
    '''`scipy.sparse.coo_matrix`''';

@Prototype(spcsrarray)
class csrarray:
    '''`scipy.sparse.csr_array`''';

@Prototype(spcsrmatrix)
class csrmatrix:
    '''`scipy.sparse.csr_matrix`''';

@Prototype(spdiaarray)
class diaarray:
    '''`scipy.sparse.dia_array`''';

@Prototype(spdiamatrix)
class diamatrix:
    '''`scipy.sparse.dia_matrix`''';

@Prototype(spdokarray)
class dokarray:
    '''`scipy.sparse.dok_array`''';

@Prototype(spdokmatrix)
class dokmatrix:
    '''`scipy.sparse.dok_matrix`''';

@Prototype(splilarray)
class lilarray:
    '''`scipy.sparse.lil_array`''';

@Prototype(splilmatrix)
class lilmatrix:
    '''`scipy.sparse.lil_matrix`''';

@Prototype(spbsrarray)
class bsrarray:
    '''`scipy.sparse.bsr_array`''';

@Prototype(spbsrmatrix)
class bsrmatrix:
    '''`scipy.sparse.bsr_matrix`''';


# %% ../../nbs/03_inst/01_prot.ipynb 62
@Prototype(sparray, cscarray, cooarray, csrarray, diaarray, dokarray, lilarray, bsrarray)
class sparsearray: '''sparse array
    (e.g. `scipy.sparse.sparray`, `scipy.sparse.cscarray`, `scipy.sparse.cooarray`, 
    `scipy.sparse.csrarray`, `scipy.sparse.diaarray`, `scipy.sparse.dokarray`, 
    `scipy.sparse.lilarray`, or `scipy.sparse.bsrarray`)'''
    
@Prototype(spmatrix, cscmatrix, coomatrix, csrmatrix, diamatrix, dokmatrix, lilmatrix, bsrmatrix)
class sparsematrix: '''sparse type
    (e.g.  `scipy.sparse.spmatrix`, `scipy.sparse.cscmatrix`, `scipy.sparse.coomatrix`, 
    `scipy.sparse.csrmatrix`, `scipy.sparse.diamatrix`, `scipy.sparse.dokmatrix`, 
    `scipy.sparse.lilmatrix`, or `scipy.sparse.bsrmatrix`,
    )'''
    
@Prototype(sparsearray, sparsematrix)
class sparse: '''sparse type
    (e.g. `sparsearray` or `sparsematrix`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 64
@Prototype(nparray, recarray, sparray, itertype, list)
class array: '''array type
    (e.g. `np.array`, `np.recarray`, `sp.sparray`, `itertype`, or `list`)'''
    
@Prototype(nparray, spmatrix, itertype, list)
class matrix: '''matrix type
    (e.g. `np.matrix`, `sp.matrix`, `itertype`, or `list`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 67
@Prototype(cv2cv2vidcap)
class cv2vidcap: '''`cv2.VideoCapture`''';

@Prototype(pilpilimage)
class pilimage: '''`PIL.Image.Image`''';


# %% ../../nbs/03_inst/01_prot.ipynb 69
@Prototype(cv2vidcap)
class vidcap: '''`cv2.VideoCapture`''';

@Prototype(pilimage)
class image: '''`PIL.Image.Image`''';

# %% ../../nbs/03_inst/01_prot.ipynb 72
@Prototype(str, tuple, num, attrs=dict(dtype=numstr))
class groupkey: 
    '''groupby key (e.g. `str`, `tuple`, or `numstr`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 73
@Prototype(pdpddelegate)
class pddelegate:
    '''`pandas.core.accessor.PandasDelegate`''';
    
@Prototype(pdpdcataccessor)
class pdcataccessor:
    '''`pandas.core.arrays.categorical.CategoricalAccessor`''';

# %% ../../nbs/03_inst/01_prot.ipynb 75
@Prototype(pdpdindex)
class pdindex:
    '''`pandas.Index`''';
    

@Prototype(pdpdcatindex)
class pdcatindex:
    '''`pandas.CategoricalIndex`''';

# %% ../../nbs/03_inst/01_prot.ipynb 77
@Prototype(bools, nparray, pdindex, list, attrs=dict(dtype=bool01))
class boolindex: '''boolean index'''

@Prototype(pdcatindex)
class catindex: '''categorical index'''

# %% ../../nbs/03_inst/01_prot.ipynb 78
@Prototype(pdindex, pdcatindex, boolindex)
class indextype: '''index types
    (e.g. `pd.Index`, `pd.CategoricalIndex`, or `boolindex`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 80
@Prototype(list, tuple, bools, nums, itertype, pdindex, pdcatindex, boolindex, nparray)
class indexlike: '''index-like objects 
    (e.g. `list`, `tuple`,`bools`, `nums`, `itertype`, 
    `pd.Index`, `pd.CategoricalIndex`, `boolindex`, or `np.array`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 82
@Prototype(pdpdseries)
class pdseries:
    '''`pandas.Series`''';

# %% ../../nbs/03_inst/01_prot.ipynb 84
@Prototype(pdseries, nparray, recarray, list, indexlike)
class seriestype: '''series type 
    (e.g. `pd.Series`, `np.array`, `np.recarray`, `list`, or `indexlike`)'''

@Prototype(seriestype)
class serieslike: '''series-like type'''

@Prototype(seriestype)
class serialized: '''serialized'''

# %% ../../nbs/03_inst/01_prot.ipynb 86
@Prototype(pdpddataframe)
class pddataframe: '''`pandas.DataFrame`''';

# %% ../../nbs/03_inst/01_prot.ipynb 87
@Prototype(pddataframe)
class dataframe: '''`pandas.DataFrame`''';

# %% ../../nbs/03_inst/01_prot.ipynb 90
@Prototype(ptpttype)
class pttype: '''size type (e.g. `tuple`, `torch.Size`, `itertype`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 92
@Prototype(ptmemfmt)
class memfmt: '''`torch.memory_format`''';

@Prototype(ptpresfmt)
class presfmt:  '''`torch.preserve_format`''';

# %% ../../nbs/03_inst/01_prot.ipynb 94
@Prototype(ptptsize, attrs=dict(dtype=int))
class ptsize: '''`torch.Size`'''

# %% ../../nbs/03_inst/01_prot.ipynb 96
@Prototype(ptptdevice)
class ptdevice: '''`torch.device`'''

# %% ../../nbs/03_inst/01_prot.ipynb 98
@Prototype(ptpttensor)
class pttensor: '''`torch.Tensor`''';
    
@Prototype(ptinttensor)
class inttensor: '''`torch.IntTensor`''';

@Prototype(ptbooltensor)
class booltensor: '''`torch.BoolTensor`''';

@Prototype(ptfloattensor)
class floattensor: '''`torch.FloatTensor`''';
    
@Prototype(pttensor, nans, attrs=dict(dtype=nan))
class nantensor: '''tensor of `nan`s'''

@Prototype(pttensor, inttensor, booltensor, floattensor)
class tensor: '''tensor type
    (e.g. `torch.tensor`, `torch.IntTensor`, `torch.BoolTensor`, or `torch.FloatTensor`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 100
@Prototype(ptptmodule)
class ptmodule: '''`torch.nn.Module`'''

@Prototype(plplmodule)
class plmodule: '''`pytorch_lightning.LightningModule`'''

# %% ../../nbs/03_inst/01_prot.ipynb 101
@Prototype(ptmodule, plmodule)
class nnmodule: '''module type (e.g. `torch.nn.Module` or `pytorch_lightning.LightningModule`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 102
@Prototype(ptptdataset)
class ptdataset: '''`torch.utils.data.Dataset`'''

@Prototype(plpldatamodule)
class pldatamodule: '''`pytorch_lightning.LightningDataModule`'''

@Prototype(ptptdataloader)
class ptdataloader: '''`torch.utils.data.DataLoader`'''

# %% ../../nbs/03_inst/01_prot.ipynb 104
@Prototype(neurode)
class neuralode: '''torchdyn neural ODE'''

@Prototype(neursde)
class neuralsde: '''torchdyn neural SDE'''

@Prototype(neuralode, neuralsde)
class neuraldynamics: '''neuralode or neuralsde'''

# %% ../../nbs/03_inst/01_prot.ipynb 105
@Prototype(odefn)
class odefunc: '''`torchdyn.ODEFunc`'''

@Prototype(sdefn)
class sdefunc: '''`torchdyn.SDEFunc`'''

@Prototype(ito)
class sdeito: '''`torchsde.ito`'''

@Prototype(brownian)
class brownianintervial: '''`torchsde.BrownianInterval`'''

# %% ../../nbs/03_inst/01_prot.ipynb 106
@Prototype(tdaugmenter)
class augmenter: '''`torchdyn.nn.augmenter`''';

# %% ../../nbs/03_inst/01_prot.ipynb 110
@Prototype(nptype, pttype)
class dtype: '''Type of data (e.g. `np.dtype` or `torch.dtype`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 112
@Prototype(ptdevice)
class device: '''`torch.device`'''

# %% ../../nbs/03_inst/01_prot.ipynb 114
@Prototype(tuple, ptsize, itertype, attrs=dict(dtype=int))
class size: '''size type (e.g. `tuple`, `torch.Size`, `itertype`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 116
@Prototype(npnpdatasource)
class npdatasource: '''`numpy.DataSource`''';

# %% ../../nbs/03_inst/01_prot.ipynb 117
@Prototype(npdatasource)
class datasource: '''`numpy.DataSource`''';

# %% ../../nbs/03_inst/01_prot.ipynb 119
@Prototype(anndata)
class adata: '''`anndata.AnnData`''';

@Prototype(itertype, attrs=dict(dtype=adata))
class adatas: '''`anndata.AnnData`''';

# %% ../../nbs/03_inst/01_prot.ipynb 121
@Prototype(bgraph, dgraph, kgraph, tgraph, lgraph, mgraph, tlgraph, klgraph, mlgraph)
class graphtype: 
    '''graph type (e.g. `BaseGraph`, `DataGraph`, `LandmarkGraph`, `kNNGraph`, `TraditionalGraph`, 
    `MNNGraph`, `kNNLandmarkGraph`, `TraditionalLandmarkGraph`, or `MNNLandmarkGraph`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 123
@Prototype(array, matrix, adata)
class datatype: '''data type 
    (e.g.  `np.array`, `np.matrix`, `sp.array`, `sp.matrix`,  `np.recarray`, or `anndata`)'''

# %% ../../nbs/03_inst/01_prot.ipynb 125
@Prototype(datatype, indextype, seriestype, dataframe, tensor, hasattrs=('shape', ))
class shaped: '''shaped `datatype`'''

# %% ../../nbs/03_inst/01_prot.ipynb 127
@Prototype(list, nparray, shaped, itertype, hasattrs=('ndim', ))
class dimmed: 'np.ndarray with shape (i, )'

@Prototype(dimmed, attrs=dict(ndim=1))
class dim1: 'np.ndarray with shape (i, )'

@Prototype(dimmed, attrs=dict(ndim=2))
class dim2: 'np.ndarray with shape (i, j, )'

@Prototype(dimmed, attrs=dict(ndim=3))
class dim3: 'np.ndarray with shape (i, j, k, )'

@Prototype(dimmed, attrs=dict(ndim=4))
class dim4: 'np.ndarray with shape (i, j, k, l, )'
