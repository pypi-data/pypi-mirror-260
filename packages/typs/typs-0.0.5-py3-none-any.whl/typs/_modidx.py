# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/typs',
                'doc_host': 'https://dsm-72.github.io',
                'git_url': 'https://github.com/dsm-72/typs',
                'lib_path': 'typs'},
  'syms': { 'typs.core.base': { 'typs.core.base.Duck': ('01_core/base.html#duck', 'typs/core/base.py'),
                                'typs.core.base.DuckModule': ('01_core/base.html#duckmodule', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec': ('01_core/base.html#duckspec', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec.__init__': ('01_core/base.html#duckspec.__init__', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec.__load__': ('01_core/base.html#duckspec.__load__', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec.__new__': ('01_core/base.html#duckspec.__new__', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec.__prep__': ('01_core/base.html#duckspec.__prep__', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec.__repr__': ('01_core/base.html#duckspec.__repr__', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec.duck': ('01_core/base.html#duckspec.duck', 'typs/core/base.py'),
                                'typs.core.base.DuckSpec.load': ('01_core/base.html#duckspec.load', 'typs/core/base.py')},
            'typs.core.meta': { 'typs.core.meta.ABCDuck': ('01_core/meta.html#abcduck', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__alias__': ('01_core/meta.html#abcduck.__alias__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__call__': ('01_core/meta.html#abcduck.__call__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__contains__': ('01_core/meta.html#abcduck.__contains__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__eq__': ('01_core/meta.html#abcduck.__eq__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__guard__': ('01_core/meta.html#abcduck.__guard__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__guardq__': ('01_core/meta.html#abcduck.__guardq__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__instancecheck__': ( '01_core/meta.html#abcduck.__instancecheck__',
                                                                              'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__invert__': ('01_core/meta.html#abcduck.__invert__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__membercheck__': ( '01_core/meta.html#abcduck.__membercheck__',
                                                                            'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__memberguard__': ( '01_core/meta.html#abcduck.__memberguard__',
                                                                            'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__notinstance__': ( '01_core/meta.html#abcduck.__notinstance__',
                                                                            'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__optinstance__': ( '01_core/meta.html#abcduck.__optinstance__',
                                                                            'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__repr__': ('01_core/meta.html#abcduck.__repr__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__subclasscheck__': ( '01_core/meta.html#abcduck.__subclasscheck__',
                                                                              'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__types__': ('01_core/meta.html#abcduck.__types__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__typesq__': ('01_core/meta.html#abcduck.__typesq__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCDuck.__usetypes__': ('01_core/meta.html#abcduck.__usetypes__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCSpecies': ('01_core/meta.html#abcspecies', 'typs/core/meta.py'),
                                'typs.core.meta.ABCSpecies.__migrate__': ('01_core/meta.html#abcspecies.__migrate__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCSpecies.__not__': ('01_core/meta.html#abcspecies.__not__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCSpecies.__opt__': ('01_core/meta.html#abcspecies.__opt__', 'typs/core/meta.py'),
                                'typs.core.meta.ABCSpecies.__reg__': ('01_core/meta.html#abcspecies.__reg__', 'typs/core/meta.py'),
                                'typs.core.meta.DuckModuleMeta': ('01_core/meta.html#duckmodulemeta', 'typs/core/meta.py'),
                                'typs.core.meta.DuckModuleMeta.__getattr__': ( '01_core/meta.html#duckmodulemeta.__getattr__',
                                                                               'typs/core/meta.py'),
                                'typs.core.meta.DuckModuleMeta.__instancecheck__': ( '01_core/meta.html#duckmodulemeta.__instancecheck__',
                                                                                     'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta': ('01_core/meta.html#duckprotocolmeta', 'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__contains__': ( '01_core/meta.html#duckprotocolmeta.__contains__',
                                                                                  'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__duck__': ( '01_core/meta.html#duckprotocolmeta.__duck__',
                                                                              'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__eq__': ( '01_core/meta.html#duckprotocolmeta.__eq__',
                                                                            'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__guard__': ( '01_core/meta.html#duckprotocolmeta.__guard__',
                                                                               'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__guardq__': ( '01_core/meta.html#duckprotocolmeta.__guardq__',
                                                                                'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__instancecheck__': ( '01_core/meta.html#duckprotocolmeta.__instancecheck__',
                                                                                       'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__invert__': ( '01_core/meta.html#duckprotocolmeta.__invert__',
                                                                                'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__membercheck__': ( '01_core/meta.html#duckprotocolmeta.__membercheck__',
                                                                                     'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__notinstance__': ( '01_core/meta.html#duckprotocolmeta.__notinstance__',
                                                                                     'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__optinstance__': ( '01_core/meta.html#duckprotocolmeta.__optinstance__',
                                                                                     'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__subclasscheck__': ( '01_core/meta.html#duckprotocolmeta.__subclasscheck__',
                                                                                       'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__types__': ( '01_core/meta.html#duckprotocolmeta.__types__',
                                                                               'typs/core/meta.py'),
                                'typs.core.meta.DuckProtocolMeta.__typesq__': ( '01_core/meta.html#duckprotocolmeta.__typesq__',
                                                                                'typs/core/meta.py')},
            'typs.core.ptyp': { 'typs.core.ptyp.Prototype': ('01_core/ptyp.html#prototype', 'typs/core/ptyp.py'),
                                'typs.core.ptyp.PrototypeMeta': ('01_core/ptyp.html#prototypemeta', 'typs/core/ptyp.py'),
                                'typs.core.ptyp.PrototypeMeta.__hash__': ('01_core/ptyp.html#prototypemeta.__hash__', 'typs/core/ptyp.py'),
                                'typs.core.ptyp.PrototypeMeta.__new__': ('01_core/ptyp.html#prototypemeta.__new__', 'typs/core/ptyp.py'),
                                'typs.core.ptyp.PrototypeMeta.getbtype': ('01_core/ptyp.html#prototypemeta.getbtype', 'typs/core/ptyp.py')},
            'typs.core.rchk': { 'typs.core.rchk.Alias': ('01_core/rchk.html#alias', 'typs/core/rchk.py'),
                                'typs.core.rchk.AliasMeta': ('01_core/rchk.html#aliasmeta', 'typs/core/rchk.py'),
                                'typs.core.rchk.AliasMeta.getbtype': ('01_core/rchk.html#aliasmeta.getbtype', 'typs/core/rchk.py'),
                                'typs.core.rchk.Not': ('01_core/rchk.html#not', 'typs/core/rchk.py'),
                                'typs.core.rchk.NotMeta': ('01_core/rchk.html#notmeta', 'typs/core/rchk.py'),
                                'typs.core.rchk.NotMeta.default_kwds': ('01_core/rchk.html#notmeta.default_kwds', 'typs/core/rchk.py'),
                                'typs.core.rchk.NotMeta.getbtype': ('01_core/rchk.html#notmeta.getbtype', 'typs/core/rchk.py'),
                                'typs.core.rchk.NotMeta.guard': ('01_core/rchk.html#notmeta.guard', 'typs/core/rchk.py'),
                                'typs.core.rchk.Opt': ('01_core/rchk.html#opt', 'typs/core/rchk.py'),
                                'typs.core.rchk.OptionalMeta': ('01_core/rchk.html#optionalmeta', 'typs/core/rchk.py'),
                                'typs.core.rchk.OptionalMeta.__new__': ('01_core/rchk.html#optionalmeta.__new__', 'typs/core/rchk.py'),
                                'typs.core.rchk.OptionalMeta.default_kwds': ( '01_core/rchk.html#optionalmeta.default_kwds',
                                                                              'typs/core/rchk.py'),
                                'typs.core.rchk.OptionalMeta.getbtype': ('01_core/rchk.html#optionalmeta.getbtype', 'typs/core/rchk.py'),
                                'typs.core.rchk.RuntimeCheckableMeta': ('01_core/rchk.html#runtimecheckablemeta', 'typs/core/rchk.py'),
                                'typs.core.rchk.RuntimeCheckableMeta.getbtype': ( '01_core/rchk.html#runtimecheckablemeta.getbtype',
                                                                                  'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta': ('01_core/rchk.html#_runtimecheckablemeta', 'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__call__': ( '01_core/rchk.html#_runtimecheckablemeta.__call__',
                                                                                   'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__eq__': ( '01_core/rchk.html#_runtimecheckablemeta.__eq__',
                                                                                 'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__hash__': ( '01_core/rchk.html#_runtimecheckablemeta.__hash__',
                                                                                   'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__init__': ( '01_core/rchk.html#_runtimecheckablemeta.__init__',
                                                                                   'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__init_subclass__': ( '01_core/rchk.html#_runtimecheckablemeta.__init_subclass__',
                                                                                            'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__instancecheck__': ( '01_core/rchk.html#_runtimecheckablemeta.__instancecheck__',
                                                                                            'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__instanceguard__': ( '01_core/rchk.html#_runtimecheckablemeta.__instanceguard__',
                                                                                            'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__invert__': ( '01_core/rchk.html#_runtimecheckablemeta.__invert__',
                                                                                     'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__invopt__': ( '01_core/rchk.html#_runtimecheckablemeta.__invopt__',
                                                                                     'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__new__': ( '01_core/rchk.html#_runtimecheckablemeta.__new__',
                                                                                  'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__not__': ( '01_core/rchk.html#_runtimecheckablemeta.__not__',
                                                                                  'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.__redirect__': ( '01_core/rchk.html#_runtimecheckablemeta.__redirect__',
                                                                                       'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.check': ( '01_core/rchk.html#_runtimecheckablemeta.check',
                                                                                'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.construct': ( '01_core/rchk.html#_runtimecheckablemeta.construct',
                                                                                    'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.default_kwds': ( '01_core/rchk.html#_runtimecheckablemeta.default_kwds',
                                                                                       'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.getbtype': ( '01_core/rchk.html#_runtimecheckablemeta.getbtype',
                                                                                   'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.guard': ( '01_core/rchk.html#_runtimecheckablemeta.guard',
                                                                                'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.makebases': ( '01_core/rchk.html#_runtimecheckablemeta.makebases',
                                                                                    'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.new': ( '01_core/rchk.html#_runtimecheckablemeta.new',
                                                                              'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.setqualname': ( '01_core/rchk.html#_runtimecheckablemeta.setqualname',
                                                                                      'typs/core/rchk.py'),
                                'typs.core.rchk._RuntimeCheckableMeta.typeguard': ( '01_core/rchk.html#_runtimecheckablemeta.typeguard',
                                                                                    'typs/core/rchk.py')},
            'typs.core.solo': { 'typs.core.solo.Empty': ('01_core/solo.html#empty', 'typs/core/solo.py'),
                                'typs.core.solo.Module': ('01_core/solo.html#module', 'typs/core/solo.py'),
                                'typs.core.solo.Singleton': ('01_core/solo.html#singleton', 'typs/core/solo.py'),
                                'typs.core.solo.Singleton.__call__': ('01_core/solo.html#singleton.__call__', 'typs/core/solo.py'),
                                'typs.core.solo.Singleton.__eq__': ('01_core/solo.html#singleton.__eq__', 'typs/core/solo.py'),
                                'typs.core.solo.Singleton.__hash__': ('01_core/solo.html#singleton.__hash__', 'typs/core/solo.py'),
                                'typs.core.solo.Singleton.__instancecheck__': ( '01_core/solo.html#singleton.__instancecheck__',
                                                                                'typs/core/solo.py'),
                                'typs.core.solo.Singleton.__new__': ('01_core/solo.html#singleton.__new__', 'typs/core/solo.py'),
                                'typs.core.solo.Singleton.__repr__': ('01_core/solo.html#singleton.__repr__', 'typs/core/solo.py'),
                                'typs.core.solo.Singleton.__subclasscheck__': ( '01_core/solo.html#singleton.__subclasscheck__',
                                                                                'typs/core/solo.py')},
            'typs.duck.lits': { 'typs.duck.lits.adata': ('03_duck/lits.html#adata', 'typs/duck/lits.py'),
                                'typs.duck.lits.adatas': ('03_duck/lits.html#adatas', 'typs/duck/lits.py'),
                                'typs.duck.lits.array': ('03_duck/lits.html#array', 'typs/duck/lits.py'),
                                'typs.duck.lits.artist': ('03_duck/lits.html#artist', 'typs/duck/lits.py'),
                                'typs.duck.lits.augmenter': ('03_duck/lits.html#augmenter', 'typs/duck/lits.py'),
                                'typs.duck.lits.bool01': ('03_duck/lits.html#bool01', 'typs/duck/lits.py'),
                                'typs.duck.lits.boolic': ('03_duck/lits.html#boolic', 'typs/duck/lits.py'),
                                'typs.duck.lits.boolindex': ('03_duck/lits.html#boolindex', 'typs/duck/lits.py'),
                                'typs.duck.lits.bools': ('03_duck/lits.html#bools', 'typs/duck/lits.py'),
                                'typs.duck.lits.booltensor': ('03_duck/lits.html#booltensor', 'typs/duck/lits.py'),
                                'typs.duck.lits.brownianintervial': ('03_duck/lits.html#brownianintervial', 'typs/duck/lits.py'),
                                'typs.duck.lits.bsrarray': ('03_duck/lits.html#bsrarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.bsrmatrix': ('03_duck/lits.html#bsrmatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.builtinfunctype': ('03_duck/lits.html#builtinfunctype', 'typs/duck/lits.py'),
                                'typs.duck.lits.catindex': ('03_duck/lits.html#catindex', 'typs/duck/lits.py'),
                                'typs.duck.lits.colormap': ('03_duck/lits.html#colormap', 'typs/duck/lits.py'),
                                'typs.duck.lits.cooarray': ('03_duck/lits.html#cooarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.coomatrix': ('03_duck/lits.html#coomatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.cscarray': ('03_duck/lits.html#cscarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.cscmatrix': ('03_duck/lits.html#cscmatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.csrarray': ('03_duck/lits.html#csrarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.csrmatrix': ('03_duck/lits.html#csrmatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.cv2vidcap': ('03_duck/lits.html#cv2vidcap', 'typs/duck/lits.py'),
                                'typs.duck.lits.dataframe': ('03_duck/lits.html#dataframe', 'typs/duck/lits.py'),
                                'typs.duck.lits.datasource': ('03_duck/lits.html#datasource', 'typs/duck/lits.py'),
                                'typs.duck.lits.datatype': ('03_duck/lits.html#datatype', 'typs/duck/lits.py'),
                                'typs.duck.lits.device': ('03_duck/lits.html#device', 'typs/duck/lits.py'),
                                'typs.duck.lits.diaarray': ('03_duck/lits.html#diaarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.diamatrix': ('03_duck/lits.html#diamatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.dictitems': ('03_duck/lits.html#dictitems', 'typs/duck/lits.py'),
                                'typs.duck.lits.dictkeys': ('03_duck/lits.html#dictkeys', 'typs/duck/lits.py'),
                                'typs.duck.lits.dictvalues': ('03_duck/lits.html#dictvalues', 'typs/duck/lits.py'),
                                'typs.duck.lits.dim1': ('03_duck/lits.html#dim1', 'typs/duck/lits.py'),
                                'typs.duck.lits.dim2': ('03_duck/lits.html#dim2', 'typs/duck/lits.py'),
                                'typs.duck.lits.dim3': ('03_duck/lits.html#dim3', 'typs/duck/lits.py'),
                                'typs.duck.lits.dim4': ('03_duck/lits.html#dim4', 'typs/duck/lits.py'),
                                'typs.duck.lits.dimmed': ('03_duck/lits.html#dimmed', 'typs/duck/lits.py'),
                                'typs.duck.lits.dokarray': ('03_duck/lits.html#dokarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.dokmatrix': ('03_duck/lits.html#dokmatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.dtype': ('03_duck/lits.html#dtype', 'typs/duck/lits.py'),
                                'typs.duck.lits.floatq': ('03_duck/lits.html#floatq', 'typs/duck/lits.py'),
                                'typs.duck.lits.floats': ('03_duck/lits.html#floats', 'typs/duck/lits.py'),
                                'typs.duck.lits.floattensor': ('03_duck/lits.html#floattensor', 'typs/duck/lits.py'),
                                'typs.duck.lits.functiontype': ('03_duck/lits.html#functiontype', 'typs/duck/lits.py'),
                                'typs.duck.lits.graphtype': ('03_duck/lits.html#graphtype', 'typs/duck/lits.py'),
                                'typs.duck.lits.groupkey': ('03_duck/lits.html#groupkey', 'typs/duck/lits.py'),
                                'typs.duck.lits.ichain': ('03_duck/lits.html#ichain', 'typs/duck/lits.py'),
                                'typs.duck.lits.image': ('03_duck/lits.html#image', 'typs/duck/lits.py'),
                                'typs.duck.lits.indexlike': ('03_duck/lits.html#indexlike', 'typs/duck/lits.py'),
                                'typs.duck.lits.indextype': ('03_duck/lits.html#indextype', 'typs/duck/lits.py'),
                                'typs.duck.lits.intq': ('03_duck/lits.html#intq', 'typs/duck/lits.py'),
                                'typs.duck.lits.ints': ('03_duck/lits.html#ints', 'typs/duck/lits.py'),
                                'typs.duck.lits.inttensor': ('03_duck/lits.html#inttensor', 'typs/duck/lits.py'),
                                'typs.duck.lits.iprod': ('03_duck/lits.html#iprod', 'typs/duck/lits.py'),
                                'typs.duck.lits.iterbool': ('03_duck/lits.html#iterbool', 'typs/duck/lits.py'),
                                'typs.duck.lits.iternum': ('03_duck/lits.html#iternum', 'typs/duck/lits.py'),
                                'typs.duck.lits.iterstr': ('03_duck/lits.html#iterstr', 'typs/duck/lits.py'),
                                'typs.duck.lits.itertype': ('03_duck/lits.html#itertype', 'typs/duck/lits.py'),
                                'typs.duck.lits.lilarray': ('03_duck/lits.html#lilarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.lilmatrix': ('03_duck/lits.html#lilmatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.logger': ('03_duck/lits.html#logger', 'typs/duck/lits.py'),
                                'typs.duck.lits.lscolormap': ('03_duck/lits.html#lscolormap', 'typs/duck/lits.py'),
                                'typs.duck.lits.mapping': ('03_duck/lits.html#mapping', 'typs/duck/lits.py'),
                                'typs.duck.lits.matrix': ('03_duck/lits.html#matrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.memfmt': ('03_duck/lits.html#memfmt', 'typs/duck/lits.py'),
                                'typs.duck.lits.moduleloader': ('03_duck/lits.html#moduleloader', 'typs/duck/lits.py'),
                                'typs.duck.lits.modulespec': ('03_duck/lits.html#modulespec', 'typs/duck/lits.py'),
                                'typs.duck.lits.moduletype': ('03_duck/lits.html#moduletype', 'typs/duck/lits.py'),
                                'typs.duck.lits.mplaxes': ('03_duck/lits.html#mplaxes', 'typs/duck/lits.py'),
                                'typs.duck.lits.mplpatch': ('03_duck/lits.html#mplpatch', 'typs/duck/lits.py'),
                                'typs.duck.lits.nan': ('03_duck/lits.html#nan', 'typs/duck/lits.py'),
                                'typs.duck.lits.nanq': ('03_duck/lits.html#nanq', 'typs/duck/lits.py'),
                                'typs.duck.lits.nans': ('03_duck/lits.html#nans', 'typs/duck/lits.py'),
                                'typs.duck.lits.nantensor': ('03_duck/lits.html#nantensor', 'typs/duck/lits.py'),
                                'typs.duck.lits.neuraldynamics': ('03_duck/lits.html#neuraldynamics', 'typs/duck/lits.py'),
                                'typs.duck.lits.neuralode': ('03_duck/lits.html#neuralode', 'typs/duck/lits.py'),
                                'typs.duck.lits.neuralsde': ('03_duck/lits.html#neuralsde', 'typs/duck/lits.py'),
                                'typs.duck.lits.nilstr': ('03_duck/lits.html#nilstr', 'typs/duck/lits.py'),
                                'typs.duck.lits.nnmodule': ('03_duck/lits.html#nnmodule', 'typs/duck/lits.py'),
                                'typs.duck.lits.none': ('03_duck/lits.html#none', 'typs/duck/lits.py'),
                                'typs.duck.lits.notnilstr': ('03_duck/lits.html#notnilstr', 'typs/duck/lits.py'),
                                'typs.duck.lits.notstrbytes': ('03_duck/lits.html#notstrbytes', 'typs/duck/lits.py'),
                                'typs.duck.lits.nparray': ('03_duck/lits.html#nparray', 'typs/duck/lits.py'),
                                'typs.duck.lits.npbool': ('03_duck/lits.html#npbool', 'typs/duck/lits.py'),
                                'typs.duck.lits.npdatasource': ('03_duck/lits.html#npdatasource', 'typs/duck/lits.py'),
                                'typs.duck.lits.npempty': ('03_duck/lits.html#npempty', 'typs/duck/lits.py'),
                                'typs.duck.lits.npmatrix': ('03_duck/lits.html#npmatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.npnan': ('03_duck/lits.html#npnan', 'typs/duck/lits.py'),
                                'typs.duck.lits.num': ('03_duck/lits.html#num', 'typs/duck/lits.py'),
                                'typs.duck.lits.numq': ('03_duck/lits.html#numq', 'typs/duck/lits.py'),
                                'typs.duck.lits.nums': ('03_duck/lits.html#nums', 'typs/duck/lits.py'),
                                'typs.duck.lits.numstr': ('03_duck/lits.html#numstr', 'typs/duck/lits.py'),
                                'typs.duck.lits.odefunc': ('03_duck/lits.html#odefunc', 'typs/duck/lits.py'),
                                'typs.duck.lits.ospathlike': ('03_duck/lits.html#ospathlike', 'typs/duck/lits.py'),
                                'typs.duck.lits.param': ('03_duck/lits.html#param', 'typs/duck/lits.py'),
                                'typs.duck.lits.pathlike': ('03_duck/lits.html#pathlike', 'typs/duck/lits.py'),
                                'typs.duck.lits.pattern': ('03_duck/lits.html#pattern', 'typs/duck/lits.py'),
                                'typs.duck.lits.pdcataccessor': ('03_duck/lits.html#pdcataccessor', 'typs/duck/lits.py'),
                                'typs.duck.lits.pdcatindex': ('03_duck/lits.html#pdcatindex', 'typs/duck/lits.py'),
                                'typs.duck.lits.pddataframe': ('03_duck/lits.html#pddataframe', 'typs/duck/lits.py'),
                                'typs.duck.lits.pddelegate': ('03_duck/lits.html#pddelegate', 'typs/duck/lits.py'),
                                'typs.duck.lits.pdindex': ('03_duck/lits.html#pdindex', 'typs/duck/lits.py'),
                                'typs.duck.lits.pdna': ('03_duck/lits.html#pdna', 'typs/duck/lits.py'),
                                'typs.duck.lits.pdseries': ('03_duck/lits.html#pdseries', 'typs/duck/lits.py'),
                                'typs.duck.lits.pilimage': ('03_duck/lits.html#pilimage', 'typs/duck/lits.py'),
                                'typs.duck.lits.pldatamodule': ('03_duck/lits.html#pldatamodule', 'typs/duck/lits.py'),
                                'typs.duck.lits.plibpath': ('03_duck/lits.html#plibpath', 'typs/duck/lits.py'),
                                'typs.duck.lits.plmodule': ('03_duck/lits.html#plmodule', 'typs/duck/lits.py'),
                                'typs.duck.lits.posixpath': ('03_duck/lits.html#posixpath', 'typs/duck/lits.py'),
                                'typs.duck.lits.presfmt': ('03_duck/lits.html#presfmt', 'typs/duck/lits.py'),
                                'typs.duck.lits.ptdataloader': ('03_duck/lits.html#ptdataloader', 'typs/duck/lits.py'),
                                'typs.duck.lits.ptdataset': ('03_duck/lits.html#ptdataset', 'typs/duck/lits.py'),
                                'typs.duck.lits.ptdevice': ('03_duck/lits.html#ptdevice', 'typs/duck/lits.py'),
                                'typs.duck.lits.ptmodule': ('03_duck/lits.html#ptmodule', 'typs/duck/lits.py'),
                                'typs.duck.lits.ptsize': ('03_duck/lits.html#ptsize', 'typs/duck/lits.py'),
                                'typs.duck.lits.pttensor': ('03_duck/lits.html#pttensor', 'typs/duck/lits.py'),
                                'typs.duck.lits.pttype': ('03_duck/lits.html#pttype', 'typs/duck/lits.py'),
                                'typs.duck.lits.pynan': ('03_duck/lits.html#pynan', 'typs/duck/lits.py'),
                                'typs.duck.lits.real': ('03_duck/lits.html#real', 'typs/duck/lits.py'),
                                'typs.duck.lits.realq': ('03_duck/lits.html#realq', 'typs/duck/lits.py'),
                                'typs.duck.lits.reals': ('03_duck/lits.html#reals', 'typs/duck/lits.py'),
                                'typs.duck.lits.recarray': ('03_duck/lits.html#recarray', 'typs/duck/lits.py'),
                                'typs.duck.lits.rematch': ('03_duck/lits.html#rematch', 'typs/duck/lits.py'),
                                'typs.duck.lits.richcons': ('03_duck/lits.html#richcons', 'typs/duck/lits.py'),
                                'typs.duck.lits.richprog': ('03_duck/lits.html#richprog', 'typs/duck/lits.py'),
                                'typs.duck.lits.richtask': ('03_duck/lits.html#richtask', 'typs/duck/lits.py'),
                                'typs.duck.lits.richtext': ('03_duck/lits.html#richtext', 'typs/duck/lits.py'),
                                'typs.duck.lits.richtree': ('03_duck/lits.html#richtree', 'typs/duck/lits.py'),
                                'typs.duck.lits.sdefunc': ('03_duck/lits.html#sdefunc', 'typs/duck/lits.py'),
                                'typs.duck.lits.sdeito': ('03_duck/lits.html#sdeito', 'typs/duck/lits.py'),
                                'typs.duck.lits.serialized': ('03_duck/lits.html#serialized', 'typs/duck/lits.py'),
                                'typs.duck.lits.serieslike': ('03_duck/lits.html#serieslike', 'typs/duck/lits.py'),
                                'typs.duck.lits.seriestype': ('03_duck/lits.html#seriestype', 'typs/duck/lits.py'),
                                'typs.duck.lits.shaped': ('03_duck/lits.html#shaped', 'typs/duck/lits.py'),
                                'typs.duck.lits.sig': ('03_duck/lits.html#sig', 'typs/duck/lits.py'),
                                'typs.duck.lits.size': ('03_duck/lits.html#size', 'typs/duck/lits.py'),
                                'typs.duck.lits.sparray': ('03_duck/lits.html#sparray', 'typs/duck/lits.py'),
                                'typs.duck.lits.sparse': ('03_duck/lits.html#sparse', 'typs/duck/lits.py'),
                                'typs.duck.lits.sparsearray': ('03_duck/lits.html#sparsearray', 'typs/duck/lits.py'),
                                'typs.duck.lits.sparsematrix': ('03_duck/lits.html#sparsematrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.spmatrix': ('03_duck/lits.html#spmatrix', 'typs/duck/lits.py'),
                                'typs.duck.lits.strbytes': ('03_duck/lits.html#strbytes', 'typs/duck/lits.py'),
                                'typs.duck.lits.strq': ('03_duck/lits.html#strq', 'typs/duck/lits.py'),
                                'typs.duck.lits.strs': ('03_duck/lits.html#strs', 'typs/duck/lits.py'),
                                'typs.duck.lits.strtmpl': ('03_duck/lits.html#strtmpl', 'typs/duck/lits.py'),
                                'typs.duck.lits.tensor': ('03_duck/lits.html#tensor', 'typs/duck/lits.py'),
                                'typs.duck.lits.tqdmauto': ('03_duck/lits.html#tqdmauto', 'typs/duck/lits.py'),
                                'typs.duck.lits.trackbacktype': ('03_duck/lits.html#trackbacktype', 'typs/duck/lits.py'),
                                'typs.duck.lits.typerapp': ('03_duck/lits.html#typerapp', 'typs/duck/lits.py'),
                                'typs.duck.lits.vidcap': ('03_duck/lits.html#vidcap', 'typs/duck/lits.py'),
                                'typs.duck.lits.wrappertype': ('03_duck/lits.html#wrappertype', 'typs/duck/lits.py'),
                                'typs.duck.lits.ziplong': ('03_duck/lits.html#ziplong', 'typs/duck/lits.py')},
            'typs.prep.matr': {},
            'typs.prep.mods': { 'typs.prep.mods._PIL': ('02_prep/mods.html#_pil', 'typs/prep/mods.py'),
                                'typs.prep.mods._anndata': ('02_prep/mods.html#_anndata', 'typs/prep/mods.py'),
                                'typs.prep.mods._collectionsabc': ('02_prep/mods.html#_collectionsabc', 'typs/prep/mods.py'),
                                'typs.prep.mods._cv2': ('02_prep/mods.html#_cv2', 'typs/prep/mods.py'),
                                'typs.prep.mods._graphtools': ('02_prep/mods.html#_graphtools', 'typs/prep/mods.py'),
                                'typs.prep.mods._importlib': ('02_prep/mods.html#_importlib', 'typs/prep/mods.py'),
                                'typs.prep.mods._inspect': ('02_prep/mods.html#_inspect', 'typs/prep/mods.py'),
                                'typs.prep.mods._itertools': ('02_prep/mods.html#_itertools', 'typs/prep/mods.py'),
                                'typs.prep.mods._logging': ('02_prep/mods.html#_logging', 'typs/prep/mods.py'),
                                'typs.prep.mods._math': ('02_prep/mods.html#_math', 'typs/prep/mods.py'),
                                'typs.prep.mods._matplotlib': ('02_prep/mods.html#_matplotlib', 'typs/prep/mods.py'),
                                'typs.prep.mods._mpl_artist': ('02_prep/mods.html#_mpl_artist', 'typs/prep/mods.py'),
                                'typs.prep.mods._mpl_axes': ('02_prep/mods.html#_mpl_axes', 'typs/prep/mods.py'),
                                'typs.prep.mods._mpl_base': ('02_prep/mods.html#_mpl_base', 'typs/prep/mods.py'),
                                'typs.prep.mods._mpl_patches': ('02_prep/mods.html#_mpl_patches', 'typs/prep/mods.py'),
                                'typs.prep.mods._numbers': ('02_prep/mods.html#_numbers', 'typs/prep/mods.py'),
                                'typs.prep.mods._numpy': ('02_prep/mods.html#_numpy', 'typs/prep/mods.py'),
                                'typs.prep.mods._os': ('02_prep/mods.html#_os', 'typs/prep/mods.py'),
                                'typs.prep.mods._pandas': ('02_prep/mods.html#_pandas', 'typs/prep/mods.py'),
                                'typs.prep.mods._pathlib': ('02_prep/mods.html#_pathlib', 'typs/prep/mods.py'),
                                'typs.prep.mods._phate': ('02_prep/mods.html#_phate', 'typs/prep/mods.py'),
                                'typs.prep.mods._pytorch_lightning': ('02_prep/mods.html#_pytorch_lightning', 'typs/prep/mods.py'),
                                'typs.prep.mods._re': ('02_prep/mods.html#_re', 'typs/prep/mods.py'),
                                'typs.prep.mods._rich': ('02_prep/mods.html#_rich', 'typs/prep/mods.py'),
                                'typs.prep.mods._scipy': ('02_prep/mods.html#_scipy', 'typs/prep/mods.py'),
                                'typs.prep.mods._seaborn': ('02_prep/mods.html#_seaborn', 'typs/prep/mods.py'),
                                'typs.prep.mods._sklearn': ('02_prep/mods.html#_sklearn', 'typs/prep/mods.py'),
                                'typs.prep.mods._string': ('02_prep/mods.html#_string', 'typs/prep/mods.py'),
                                'typs.prep.mods._torch': ('02_prep/mods.html#_torch', 'typs/prep/mods.py'),
                                'typs.prep.mods._torch_c': ('02_prep/mods.html#_torch_c', 'typs/prep/mods.py'),
                                'typs.prep.mods._torchdyn': ('02_prep/mods.html#_torchdyn', 'typs/prep/mods.py'),
                                'typs.prep.mods._torchsde': ('02_prep/mods.html#_torchsde', 'typs/prep/mods.py'),
                                'typs.prep.mods._torchvision': ('02_prep/mods.html#_torchvision', 'typs/prep/mods.py'),
                                'typs.prep.mods._tqdm': ('02_prep/mods.html#_tqdm', 'typs/prep/mods.py'),
                                'typs.prep.mods._typer': ('02_prep/mods.html#_typer', 'typs/prep/mods.py'),
                                'typs.prep.mods._types': ('02_prep/mods.html#_types', 'typs/prep/mods.py')},
            'typs.prep.spec': {},
            'typs.prep.trys': {},
            'typs.util.attr': { 'typs.util.attr.attr': ('00_util/attr.html#attr', 'typs/util/attr.py'),
                                'typs.util.attr.attribute': ('00_util/attr.html#attribute', 'typs/util/attr.py'),
                                'typs.util.attr.attribute.__call__': ('00_util/attr.html#attribute.__call__', 'typs/util/attr.py'),
                                'typs.util.attr.attribute.__guard__': ('00_util/attr.html#attribute.__guard__', 'typs/util/attr.py'),
                                'typs.util.attr.attribute.__init_subclass__': ( '00_util/attr.html#attribute.__init_subclass__',
                                                                                'typs/util/attr.py'),
                                'typs.util.attr.attribute.__new__': ('00_util/attr.html#attribute.__new__', 'typs/util/attr.py'),
                                'typs.util.attr.attribute.deco': ('00_util/attr.html#attribute.deco', 'typs/util/attr.py'),
                                'typs.util.attr.attribute.many': ('00_util/attr.html#attribute.many', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta': ('00_util/attr.html#attrmeta', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__deco__': ('00_util/attr.html#attrmeta.__deco__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__eq__': ('00_util/attr.html#attrmeta.__eq__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__guard__': ('00_util/attr.html#attrmeta.__guard__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__hash__': ('00_util/attr.html#attrmeta.__hash__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__init__': ('00_util/attr.html#attrmeta.__init__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__init_subclass__': ( '00_util/attr.html#attrmeta.__init_subclass__',
                                                                               'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__instancecheck__': ( '00_util/attr.html#attrmeta.__instancecheck__',
                                                                               'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__make_astr__': ('00_util/attr.html#attrmeta.__make_astr__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__make_astrs__': ( '00_util/attr.html#attrmeta.__make_astrs__',
                                                                            'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__make_or_call__': ( '00_util/attr.html#attrmeta.__make_or_call__',
                                                                              'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__new__': ('00_util/attr.html#attrmeta.__new__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__repr__': ('00_util/attr.html#attrmeta.__repr__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.__str__': ('00_util/attr.html#attrmeta.__str__', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.chain': ('00_util/attr.html#attrmeta.chain', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.dot': ('00_util/attr.html#attrmeta.dot', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.get': ('00_util/attr.html#attrmeta.get', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.getvars': ('00_util/attr.html#attrmeta.getvars', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.has': ('00_util/attr.html#attrmeta.has', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.set': ('00_util/attr.html#attrmeta.set', 'typs/util/attr.py'),
                                'typs.util.attr.attrmeta.setvars': ('00_util/attr.html#attrmeta.setvars', 'typs/util/attr.py'),
                                'typs.util.attr.attrstr': ('00_util/attr.html#attrstr', 'typs/util/attr.py'),
                                'typs.util.attr.insattr': ('00_util/attr.html#insattr', 'typs/util/attr.py')},
            'typs.util.cons': {},
            'typs.util.enum': { 'typs.util.enum.LoaderState': ('00_util/enum.html#loaderstate', 'typs/util/enum.py'),
                                'typs.util.enum.LoaderState._missing_': ('00_util/enum.html#loaderstate._missing_', 'typs/util/enum.py'),
                                'typs.util.enum.LoaderState.exec': ('00_util/enum.html#loaderstate.exec', 'typs/util/enum.py'),
                                'typs.util.enum.LoaderState.get': ('00_util/enum.html#loaderstate.get', 'typs/util/enum.py'),
                                'typs.util.enum.LoaderState.set': ('00_util/enum.html#loaderstate.set', 'typs/util/enum.py'),
                                'typs.util.enum.LoaderState.spec': ('00_util/enum.html#loaderstate.spec', 'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethod': ('00_util/enum.html#protocolmethod', 'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethod._missing_': ( '00_util/enum.html#protocolmethod._missing_',
                                                                             'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethod.casefold': ( '00_util/enum.html#protocolmethod.casefold',
                                                                            'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethod.gidt': ('00_util/enum.html#protocolmethod.gidt', 'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethod.idgt': ('00_util/enum.html#protocolmethod.idgt', 'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethod.ieq': ('00_util/enum.html#protocolmethod.ieq', 'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethod.startswith': ( '00_util/enum.html#protocolmethod.startswith',
                                                                              'typs/util/enum.py'),
                                'typs.util.enum.ProtocolMethodOrder': ('00_util/enum.html#protocolmethodorder', 'typs/util/enum.py'),
                                'typs.util.enum.Species': ('00_util/enum.html#species', 'typs/util/enum.py'),
                                'typs.util.enum.Species.contains': ('00_util/enum.html#species.contains', 'typs/util/enum.py')},
            'typs.util.errs': { 'typs.util.errs.DuckAttributeError': ('00_util/errs.html#duckattributeerror', 'typs/util/errs.py'),
                                'typs.util.errs.DuckException': ('00_util/errs.html#duckexception', 'typs/util/errs.py'),
                                'typs.util.errs.DuckImportError': ('00_util/errs.html#duckimporterror', 'typs/util/errs.py'),
                                'typs.util.errs.DuckModuleNotFoundError': ( '00_util/errs.html#duckmodulenotfounderror',
                                                                            'typs/util/errs.py'),
                                'typs.util.errs.DuckNameError': ('00_util/errs.html#ducknameerror', 'typs/util/errs.py')},
            'typs.util.grds': { 'typs.util.grds.allnotspecial': ('00_util/grds.html#allnotspecial', 'typs/util/grds.py'),
                                'typs.util.grds.allstrs': ('00_util/grds.html#allstrs', 'typs/util/grds.py'),
                                'typs.util.grds.getnotspecials': ('00_util/grds.html#getnotspecials', 'typs/util/grds.py'),
                                'typs.util.grds.hasduck': ('00_util/grds.html#hasduck', 'typs/util/grds.py'),
                                'typs.util.grds.hashash': ('00_util/grds.html#hashash', 'typs/util/grds.py'),
                                'typs.util.grds.hasload': ('00_util/grds.html#hasload', 'typs/util/grds.py'),
                                'typs.util.grds.hasorigin': ('00_util/grds.html#hasorigin', 'typs/util/grds.py'),
                                'typs.util.grds.isalias': ('00_util/grds.html#isalias', 'typs/util/grds.py'),
                                'typs.util.grds.isallsame': ('00_util/grds.html#isallsame', 'typs/util/grds.py'),
                                'typs.util.grds.isargs': ('00_util/grds.html#isargs', 'typs/util/grds.py'),
                                'typs.util.grds.isbool': ('00_util/grds.html#isbool', 'typs/util/grds.py'),
                                'typs.util.grds.iscall': ('00_util/grds.html#iscall', 'typs/util/grds.py'),
                                'typs.util.grds.iscls': ('00_util/grds.html#iscls', 'typs/util/grds.py'),
                                'typs.util.grds.isclstype': ('00_util/grds.html#isclstype', 'typs/util/grds.py'),
                                'typs.util.grds.isdict': ('00_util/grds.html#isdict', 'typs/util/grds.py'),
                                'typs.util.grds.isduckmodule': ('00_util/grds.html#isduckmodule', 'typs/util/grds.py'),
                                'typs.util.grds.isduckspec': ('00_util/grds.html#isduckspec', 'typs/util/grds.py'),
                                'typs.util.grds.isdunder': ('00_util/grds.html#isdunder', 'typs/util/grds.py'),
                                'typs.util.grds.ishashable': ('00_util/grds.html#ishashable', 'typs/util/grds.py'),
                                'typs.util.grds.isiter': ('00_util/grds.html#isiter', 'typs/util/grds.py'),
                                'typs.util.grds.isnan': ('00_util/grds.html#isnan', 'typs/util/grds.py'),
                                'typs.util.grds.isnone': ('00_util/grds.html#isnone', 'typs/util/grds.py'),
                                'typs.util.grds.isnotiterstr': ('00_util/grds.html#isnotiterstr', 'typs/util/grds.py'),
                                'typs.util.grds.isnotspecial': ('00_util/grds.html#isnotspecial', 'typs/util/grds.py'),
                                'typs.util.grds.isorigin': ('00_util/grds.html#isorigin', 'typs/util/grds.py'),
                                'typs.util.grds.isprivate': ('00_util/grds.html#isprivate', 'typs/util/grds.py'),
                                'typs.util.grds.isspecial': ('00_util/grds.html#isspecial', 'typs/util/grds.py'),
                                'typs.util.grds.isstr': ('00_util/grds.html#isstr', 'typs/util/grds.py'),
                                'typs.util.grds.istuple': ('00_util/grds.html#istuple', 'typs/util/grds.py'),
                                'typs.util.grds.istype': ('00_util/grds.html#istype', 'typs/util/grds.py'),
                                'typs.util.grds.istyping': ('00_util/grds.html#istyping', 'typs/util/grds.py'),
                                'typs.util.grds.notcls': ('00_util/grds.html#notcls', 'typs/util/grds.py'),
                                'typs.util.grds.notnone': ('00_util/grds.html#notnone', 'typs/util/grds.py'),
                                'typs.util.grds.notspecialsorigins': ('00_util/grds.html#notspecialsorigins', 'typs/util/grds.py')},
            'typs.util.imps': { 'typs.util.imps.ImportedAttribute': ('00_util/imps.html#importedattribute', 'typs/util/imps.py'),
                                'typs.util.imps.ModuleAssetSpec': ('00_util/imps.html#moduleassetspec', 'typs/util/imps.py'),
                                'typs.util.imps.ModuleAssetSpec.asdict': ('00_util/imps.html#moduleassetspec.asdict', 'typs/util/imps.py'),
                                'typs.util.imps.ModuleAssetSpec.getvals': ( '00_util/imps.html#moduleassetspec.getvals',
                                                                            'typs/util/imps.py'),
                                'typs.util.imps.ModuleAssetSpec.setvals': ( '00_util/imps.html#moduleassetspec.setvals',
                                                                            'typs/util/imps.py'),
                                'typs.util.imps.ModuleAttribute': ('00_util/imps.html#moduleattribute', 'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule': ('00_util/imps.html#proxymodule', 'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule.__dir__': ('00_util/imps.html#proxymodule.__dir__', 'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule.__getattr__': ( '00_util/imps.html#proxymodule.__getattr__',
                                                                            'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule.__init__': ('00_util/imps.html#proxymodule.__init__', 'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule.__setattr__': ( '00_util/imps.html#proxymodule.__setattr__',
                                                                            'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule.attrs': ('00_util/imps.html#proxymodule.attrs', 'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule.names': ('00_util/imps.html#proxymodule.names', 'typs/util/imps.py'),
                                'typs.util.imps.ProxyModule.populate': ('00_util/imps.html#proxymodule.populate', 'typs/util/imps.py'),
                                'typs.util.imps.iattr': ('00_util/imps.html#iattr', 'typs/util/imps.py'),
                                'typs.util.imps.iattrs': ('00_util/imps.html#iattrs', 'typs/util/imps.py'),
                                'typs.util.imps.imod': ('00_util/imps.html#imod', 'typs/util/imps.py'),
                                'typs.util.imps.itry': ('00_util/imps.html#itry', 'typs/util/imps.py'),
                                'typs.util.imps.matr': ('00_util/imps.html#matr', 'typs/util/imps.py'),
                                'typs.util.imps.modattr': ('00_util/imps.html#modattr', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.__asset_repr__': ('00_util/imps.html#modattr.__asset_repr__', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.__call__': ('00_util/imps.html#modattr.__call__', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.__getattribute__': ( '00_util/imps.html#modattr.__getattribute__',
                                                                             'typs/util/imps.py'),
                                'typs.util.imps.modattr.__getitem__': ('00_util/imps.html#modattr.__getitem__', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.__import__': ('00_util/imps.html#modattr.__import__', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.__init__': ('00_util/imps.html#modattr.__init__', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.__repr__': ('00_util/imps.html#modattr.__repr__', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.ib': ('00_util/imps.html#modattr.ib', 'typs/util/imps.py'),
                                'typs.util.imps.modattr.io': ('00_util/imps.html#modattr.io', 'typs/util/imps.py'),
                                'typs.util.imps.modattrs': ('00_util/imps.html#modattrs', 'typs/util/imps.py')},
            'typs.util.misc': { 'typs.util.misc._fromcall': ('00_util/misc.html#_fromcall', 'typs/util/misc.py'),
                                'typs.util.misc._fromducks': ('00_util/misc.html#_fromducks', 'typs/util/misc.py'),
                                'typs.util.misc.argname': ('00_util/misc.html#argname', 'typs/util/misc.py'),
                                'typs.util.misc.argsname': ('00_util/misc.html#argsname', 'typs/util/misc.py'),
                                'typs.util.misc.asset_attrs': ('00_util/misc.html#asset_attrs', 'typs/util/misc.py'),
                                'typs.util.misc.asset_last': ('00_util/misc.html#asset_last', 'typs/util/misc.py'),
                                'typs.util.misc.asset_name': ('00_util/misc.html#asset_name', 'typs/util/misc.py'),
                                'typs.util.misc.asset_sub_pkg': ('00_util/misc.html#asset_sub_pkg', 'typs/util/misc.py'),
                                'typs.util.misc.classname': ('00_util/misc.html#classname', 'typs/util/misc.py'),
                                'typs.util.misc.filtkwds': ('00_util/misc.html#filtkwds', 'typs/util/misc.py'),
                                'typs.util.misc.find_asset_module': ('00_util/misc.html#find_asset_module', 'typs/util/misc.py'),
                                'typs.util.misc.find_last_spec': ('00_util/misc.html#find_last_spec', 'typs/util/misc.py'),
                                'typs.util.misc.find_spec_or_none': ('00_util/misc.html#find_spec_or_none', 'typs/util/misc.py'),
                                'typs.util.misc.getname': ('00_util/misc.html#getname', 'typs/util/misc.py'),
                                'typs.util.misc.getorigintypes': ('00_util/misc.html#getorigintypes', 'typs/util/misc.py'),
                                'typs.util.misc.getsig': ('00_util/misc.html#getsig', 'typs/util/misc.py'),
                                'typs.util.misc.guardtype': ('00_util/misc.html#guardtype', 'typs/util/misc.py'),
                                'typs.util.misc.insys': ('00_util/misc.html#insys', 'typs/util/misc.py'),
                                'typs.util.misc.load_asset': ('00_util/misc.html#load_asset', 'typs/util/misc.py'),
                                'typs.util.misc.makegetter': ('00_util/misc.html#makegetter', 'typs/util/misc.py'),
                                'typs.util.misc.newtype': ('00_util/misc.html#newtype', 'typs/util/misc.py'),
                                'typs.util.misc.opttypes': ('00_util/misc.html#opttypes', 'typs/util/misc.py'),
                                'typs.util.misc.parse_asset': ('00_util/misc.html#parse_asset', 'typs/util/misc.py'),
                                'typs.util.misc.prep_kwargs': ('00_util/misc.html#prep_kwargs', 'typs/util/misc.py'),
                                'typs.util.misc.prepare_types_for_instancecheck': ( '00_util/misc.html#prepare_types_for_instancecheck',
                                                                                    'typs/util/misc.py'),
                                'typs.util.misc.qualname': ('00_util/misc.html#qualname', 'typs/util/misc.py'),
                                'typs.util.misc.setsig': ('00_util/misc.html#setsig', 'typs/util/misc.py'),
                                'typs.util.misc.try_ducked_attr': ('00_util/misc.html#try_ducked_attr', 'typs/util/misc.py'),
                                'typs.util.misc.try_loaded_attr': ('00_util/misc.html#try_loaded_attr', 'typs/util/misc.py'),
                                'typs.util.misc.tryattr': ('00_util/misc.html#tryattr', 'typs/util/misc.py'),
                                'typs.util.misc.trysig': ('00_util/misc.html#trysig', 'typs/util/misc.py'),
                                'typs.util.misc.unduck': ('00_util/misc.html#unduck', 'typs/util/misc.py'),
                                'typs.util.misc.unionify': ('00_util/misc.html#unionify', 'typs/util/misc.py')},
            'typs.util.prop': { 'typs.util.prop.Property': ('00_util/prop.html#property', 'typs/util/prop.py'),
                                'typs.util.prop.Property.__repr__': ('00_util/prop.html#property.__repr__', 'typs/util/prop.py'),
                                'typs.util.prop.Property.__str__': ('00_util/prop.html#property.__str__', 'typs/util/prop.py'),
                                'typs.util.prop.Property.getdef': ('00_util/prop.html#property.getdef', 'typs/util/prop.py'),
                                'typs.util.prop.Property.getkws': ('00_util/prop.html#property.getkws', 'typs/util/prop.py'),
                                'typs.util.prop.Property.make': ('00_util/prop.html#property.make', 'typs/util/prop.py'),
                                'typs.util.prop.Property.prv': ('00_util/prop.html#property.prv', 'typs/util/prop.py'),
                                'typs.util.prop.props': ('00_util/prop.html#props', 'typs/util/prop.py'),
                                'typs.util.prop.slotprops': ('00_util/prop.html#slotprops', 'typs/util/prop.py')},
            'typs.util.prot': { 'typs.util.prot.DuckModuleProtocol': ('00_util/prot.html#duckmoduleprotocol', 'typs/util/prot.py'),
                                'typs.util.prot.DuckSpecProtocol': ('00_util/prot.html#duckspecprotocol', 'typs/util/prot.py'),
                                'typs.util.prot.DuckedProtocol': ('00_util/prot.html#duckedprotocol', 'typs/util/prot.py'),
                                'typs.util.prot.DunderString': ('00_util/prot.html#dunderstring', 'typs/util/prot.py'),
                                'typs.util.prot.DunderString.__guard__': ('00_util/prot.html#dunderstring.__guard__', 'typs/util/prot.py'),
                                'typs.util.prot.GuardProtocol': ('00_util/prot.html#guardprotocol', 'typs/util/prot.py'),
                                'typs.util.prot.HasAllAttributeProtocol': ( '00_util/prot.html#hasallattributeprotocol',
                                                                            'typs/util/prot.py'),
                                'typs.util.prot.HasAllAttributeProtocol.__guard__': ( '00_util/prot.html#hasallattributeprotocol.__guard__',
                                                                                      'typs/util/prot.py'),
                                'typs.util.prot.HasAnyAttributeProtocol': ( '00_util/prot.html#hasanyattributeprotocol',
                                                                            'typs/util/prot.py'),
                                'typs.util.prot.HasAnyAttributeProtocol.__guard__': ( '00_util/prot.html#hasanyattributeprotocol.__guard__',
                                                                                      'typs/util/prot.py'),
                                'typs.util.prot.Hashable': ('00_util/prot.html#hashable', 'typs/util/prot.py'),
                                'typs.util.prot.Hashable.__hash__': ('00_util/prot.html#hashable.__hash__', 'typs/util/prot.py'),
                                'typs.util.prot.Hashable.__instancecheck__': ( '00_util/prot.html#hashable.__instancecheck__',
                                                                               'typs/util/prot.py'),
                                'typs.util.prot.NonStrBytesIterable': ('00_util/prot.html#nonstrbytesiterable', 'typs/util/prot.py'),
                                'typs.util.prot.NonStrBytesIterable.__instancecheck__': ( '00_util/prot.html#nonstrbytesiterable.__instancecheck__',
                                                                                          'typs/util/prot.py'),
                                'typs.util.prot.NonStrBytesIterable.__iter__': ( '00_util/prot.html#nonstrbytesiterable.__iter__',
                                                                                 'typs/util/prot.py'),
                                'typs.util.prot.NotProtocol': ('00_util/prot.html#notprotocol', 'typs/util/prot.py'),
                                'typs.util.prot.NotProtocol.__instancecheck__': ( '00_util/prot.html#notprotocol.__instancecheck__',
                                                                                  'typs/util/prot.py'),
                                'typs.util.prot.NotSpecial': ('00_util/prot.html#notspecial', 'typs/util/prot.py'),
                                'typs.util.prot.NotSpecial.__hash__': ('00_util/prot.html#notspecial.__hash__', 'typs/util/prot.py'),
                                'typs.util.prot.NotSpecial.__instancecheck__': ( '00_util/prot.html#notspecial.__instancecheck__',
                                                                                 'typs/util/prot.py'),
                                'typs.util.prot.OptProtocol': ('00_util/prot.html#optprotocol', 'typs/util/prot.py'),
                                'typs.util.prot.OptProtocol.__instancecheck__': ( '00_util/prot.html#optprotocol.__instancecheck__',
                                                                                  'typs/util/prot.py'),
                                'typs.util.prot.Origin': ('00_util/prot.html#origin', 'typs/util/prot.py'),
                                'typs.util.prot.Origin.__hash__': ('00_util/prot.html#origin.__hash__', 'typs/util/prot.py'),
                                'typs.util.prot.Origin.__instancecheck__': ( '00_util/prot.html#origin.__instancecheck__',
                                                                             'typs/util/prot.py'),
                                'typs.util.prot.PrivateString': ('00_util/prot.html#privatestring', 'typs/util/prot.py'),
                                'typs.util.prot.PrivateString.__guard__': ( '00_util/prot.html#privatestring.__guard__',
                                                                            'typs/util/prot.py'),
                                'typs.util.prot.ProtocolMeta': ('00_util/prot.html#protocolmeta', 'typs/util/prot.py'),
                                'typs.util.prot.ProtocolMeta.__instancecheck__': ( '00_util/prot.html#protocolmeta.__instancecheck__',
                                                                                   'typs/util/prot.py'),
                                'typs.util.prot.Special': ('00_util/prot.html#special', 'typs/util/prot.py'),
                                'typs.util.prot.Special.__hash__': ('00_util/prot.html#special.__hash__', 'typs/util/prot.py'),
                                'typs.util.prot.Special.__instancecheck__': ( '00_util/prot.html#special.__instancecheck__',
                                                                              'typs/util/prot.py')},
            'typs.util.type': {},
            'typs.util.uscr': { 'typs.util.uscr.dunder': ('00_util/uscr.html#dunder', 'typs/util/uscr.py'),
                                'typs.util.uscr.dunder.__guard__': ('00_util/uscr.html#dunder.__guard__', 'typs/util/uscr.py'),
                                'typs.util.uscr.mangled': ('00_util/uscr.html#mangled', 'typs/util/uscr.py'),
                                'typs.util.uscr.mangled.__guard__': ('00_util/uscr.html#mangled.__guard__', 'typs/util/uscr.py'),
                                'typs.util.uscr.private': ('00_util/uscr.html#private', 'typs/util/uscr.py'),
                                'typs.util.uscr.private.__guard__': ('00_util/uscr.html#private.__guard__', 'typs/util/uscr.py'),
                                'typs.util.uscr.stringmeta': ('00_util/uscr.html#stringmeta', 'typs/util/uscr.py'),
                                'typs.util.uscr.stringmeta.__eq__': ('00_util/uscr.html#stringmeta.__eq__', 'typs/util/uscr.py'),
                                'typs.util.uscr.stringmeta.__guard__': ('00_util/uscr.html#stringmeta.__guard__', 'typs/util/uscr.py'),
                                'typs.util.uscr.stringmeta.__hash__': ('00_util/uscr.html#stringmeta.__hash__', 'typs/util/uscr.py'),
                                'typs.util.uscr.stringmeta.__instancecheck__': ( '00_util/uscr.html#stringmeta.__instancecheck__',
                                                                                 'typs/util/uscr.py'),
                                'typs.util.uscr.sunder': ('00_util/uscr.html#sunder', 'typs/util/uscr.py'),
                                'typs.util.uscr.sunder.__guard__': ('00_util/uscr.html#sunder.__guard__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template': ('00_util/uscr.html#template', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__add__': ('00_util/uscr.html#template.__add__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__call__': ('00_util/uscr.html#template.__call__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__guard__': ('00_util/uscr.html#template.__guard__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__new__': ('00_util/uscr.html#template.__new__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__prepare__': ('00_util/uscr.html#template.__prepare__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__radd__': ('00_util/uscr.html#template.__radd__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__repr__': ('00_util/uscr.html#template.__repr__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__str__': ('00_util/uscr.html#template.__str__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.__transform__': ('00_util/uscr.html#template.__transform__', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.chain': ('00_util/uscr.html#template.chain', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.get': ('00_util/uscr.html#template.get', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.lchain': ('00_util/uscr.html#template.lchain', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.ldrop': ('00_util/uscr.html#template.ldrop', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.pre': ('00_util/uscr.html#template.pre', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.raw': ('00_util/uscr.html#template.raw', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.rchain': ('00_util/uscr.html#template.rchain', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.rdrop': ('00_util/uscr.html#template.rdrop', 'typs/util/uscr.py'),
                                'typs.util.uscr.template.suf': ('00_util/uscr.html#template.suf', 'typs/util/uscr.py'),
                                'typs.util.uscr.underscoreless': ('00_util/uscr.html#underscoreless', 'typs/util/uscr.py')}}}
