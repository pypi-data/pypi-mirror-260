# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_util/01_type.ipynb.

# %% auto 0
__all__ = ['G', 'T', 'O', 'P', 'D', 'Types', 'Guard', 'IterT', 'IterStr', 'IterFunc', 'IterType', 'GuardIter', 'GuardIterT',
           'GuardIterType', 'NanGuard', 'GuardLike', 'Namespace', 'ImportedAsset', 'AttrGuards', 'OriginTypes',
           'OriginGuard', 'HasIterElements', 'HasHash', 'IsNotSpecial']

# %% ../../nbs/00_util/01_type.ipynb 6
import math

# %% ../../nbs/00_util/01_type.ipynb 8
from types import (ModuleType, FunctionType, SimpleNamespace, BuiltinFunctionType, BuiltinMethodType)

from typing import (
    Any, Self, Type, Dict, Tuple, Union, TypeVar, TypeAlias, TypeGuard, ParamSpec, ClassVar, Callable, Optional, Iterable,
)

# %% ../../nbs/00_util/01_type.ipynb 10
#| export

# %% ../../nbs/00_util/01_type.ipynb 12
#| export

# %% ../../nbs/00_util/01_type.ipynb 15
#| export

# %% ../../nbs/00_util/01_type.ipynb 18
G = TypeVar('G')
'''Type variable for generic types, graphs, guards, etc''';

T = TypeVar('T')
'''Type variable for generic types''';

O = TypeVar('O')
'''Type variable for generic types reprenesting "other"''';

P = ParamSpec('P')
'''Parameter specification type variable, capturing the type of function parameters.''';

D = TypeVar('D', bound=dict)
'''Type variable for dictionaries, typed dictionaries, etc''';

# %% ../../nbs/00_util/01_type.ipynb 21
Types: TypeAlias = Tuple[Type, ...]
'''TypeAlias for a tuple of types, representing a collection of type objects.''';

Guard: TypeAlias = TypeGuard[T]
'''TypeAlias for TypeGuard that specifically guards an object of type T.''';

IterT: TypeAlias = Iterable[T]
'''TypeAlias for any iterable containing elements of type T.''';

IterStr: TypeAlias = Iterable[str]
'''TypeAlias for an iterable of strings.''';

IterFunc: TypeAlias = Iterable[FunctionType]
'''TypeAlias for an iterable of function objects.''';

IterType: TypeAlias = Iterable[Type]
'''TypeAlias for an iterable of types.''';

GuardIter: TypeAlias = TypeGuard[Iterable]
'''TypeAlias for TypeGuard specifically guarding any iterable object.''';

GuardIterT: TypeAlias = TypeGuard[Iterable[T]]
'''TypeAlias for TypeGuard, guarding iterables containing elements of type T.''';

GuardIterType: TypeAlias = TypeGuard[Iterable[Type]]
'''TypeAlias for TypeGuard, guarding iterables containing elements of types.''';

NanGuard: TypeAlias = TypeGuard[math.nan]
'''TypeAlias for TypeGuard specifically guarding the math.nan object.''';

GuardLike: TypeAlias = Callable[[O], TypeGuard[T]]
'''TypeAlias for a callable that takes an object of type O and returns a TypeGuard for type T.''';

Namespace: TypeAlias = Union[Dict[str, T], SimpleNamespace]
'''TypeAlias for a union of a dictionary and a `SimpleNamespace` object.''';

ImportedAsset: TypeAlias = Union[T, Type, FunctionType, BuiltinFunctionType, BuiltinMethodType, ModuleType]
'''TypeAlias for a union of a function, a builtin function, a builtin method, and a module object.''';

AttrGuards: TypeAlias = Dict[str, Callable[[O, T], TypeGuard[T]]]
'''TypeAlias for a dictionary mapping attribute names to guard functions, 
which take an object of type T and an arbitrary value and return a boolean.''';

# %% ../../nbs/00_util/01_type.ipynb 23
from typing import (
    AbstractSet, AsyncContextManager, AsyncGenerator, AsyncIterable, AsyncIterator, Awaitable, ByteString, Callable, 
    ChainMap, Collection, Container, ContextManager, Coroutine, Counter, DefaultDict, Deque, Dict, FrozenSet, 
    Generator, Hashable, ItemsView, Iterable, Iterator, KeysView, List, Mapping, MappingView, Match, MutableMapping, 
    MutableSequence, MutableSet, OrderedDict, Pattern, Reversible, Sequence, Set, Sized, Tuple, Type, Union, ValuesView
)

# %% ../../nbs/00_util/01_type.ipynb 24
OriginTypes: TypeAlias = Union[
    AbstractSet, AsyncContextManager, AsyncGenerator, AsyncIterable, AsyncIterator, Awaitable, ByteString, Callable, 
    ChainMap, Collection, Container, ContextManager, Coroutine, Counter, DefaultDict, Deque, Dict, FrozenSet, 
    Generator, Hashable, ItemsView, Iterable, Iterator, KeysView, List, Mapping, MappingView, Match, MutableMapping, 
    MutableSequence, MutableSet, OrderedDict, Pattern, Reversible, Sequence, Set, Sized, Tuple, Type, ValuesView
]
'''A union of types from the `typing` module that:
    - have origins (i.e., they are not base types), 
    - are hashable, and 
    - are not special forms or the `Generic` and `Protocol` types. 

This includes types like `List[int]`, `Dict[str, int]`, etc., but excludes basic types like 
`int`, `str`, and `typing` specific constructs like `Generic` or `Protocol`.''';


OriginGuard: TypeAlias = TypeGuard[OriginTypes]
'''TypeGuard for `OriginTypes`. It is used to narrow down a variable to one of the types that have origins in the `typing` module,
are hashable, and not special forms or `Generic` or `Protocol` types. Useful in type checking scenarios to confirm the type of an object
against these specific origin types from the `typing` module.''';


# %% ../../nbs/00_util/01_type.ipynb 26
try: from typs.prot import NonStrBytesIterable, Hashable, NotSpecial
except: ...

# %% ../../nbs/00_util/01_type.ipynb 27
HasIterElements: TypeAlias = TypeGuard['NonStrBytesIterable']
'''TypeAlias for TypeGuard specifically guarding an iterable object that is not a string or bytes. 
This is useful to find objects which can be recursed into and each element may not be uniformly of the same type.
''';

HasHash: TypeAlias = TypeGuard['Hashable']
'''TypeAlias for TypeGuard specifically guarding a hashable object.''';

IsNotSpecial: TypeAlias = TypeGuard['NotSpecial']
'''TypeAlias for TypeGuard specifically guarding an object that is not a special form.''';
