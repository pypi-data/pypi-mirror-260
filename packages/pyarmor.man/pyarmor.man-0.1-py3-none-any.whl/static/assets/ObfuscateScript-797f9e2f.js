import{d as U,u as P,r as x,y as S,o as B,a as r,b as c,f as D,g as t,w as s,n as E,c as b,h as f,l as h}from"./index-557e0199.js";const R={class:"iv-item"},I=U({__name:"ObfuscateScript",props:{errmode:String,sysinfo:Object,appinfo:Object},setup(y,{expose:g}){const v=y,{$gettext:m}=P(),e=x({device:{build:{form:"pc",platform:void 0,python:void 0,pyarmor:void 0},target:{same:!1,form:"pc",platform:void 0,python:void 0,pyarmor:void 0}},steps:[{ignored:!1,command:"",output:"",remark:""},{ignored:!1,command:"",output:"",remark:""},{ignored:!1,command:"",output:"",remark:""}],expected:""}),k=()=>{if(v.errmode==="unexpected"?d.value==="2":d.value==="1")return!0;d.value=`${parseInt(d.value)+1}`},w=S(()=>{const o=[],l=e.value.device.build,u=e.value.steps;o.push("### Environments"),o.push(`Build Machine: (${l.form}) ${l.platform}, Python ${l.python}, pyarmor ${l.pyarmor}`),o.push(""),o.push("### Reproduced steps");const i=["Generate obfuscated scripts","Distibute obfuscated scripts","Run obfuscated script"];for(const n in[0])u[n].ignored||(o.push(""),o.push(`${parseInt(n)+1}. ${i[n]}:`),o.push(`${u[n].command}`),o.push(`${u[n].output}`),u[0].extra&&(o.push(`
Remark:`),o.push(`${u[n].remark}`)));return e.value.expected&&(o.push(""),o.push("### Expected result"),o.push(e.value.expected)),o.join(`
`)});B(()=>{const o=v.sysinfo,l=v.appinfo;e.value.device.build.platform=`${o.platform} ${o.arch}`,e.value.device.build.python=`${o.python.version}`,e.value.device.build.pyarmor=`${l.pyarmor}`});const d=x("1");return g({validate:k,bugbody:w}),(o,l)=>{const u=r("el-form-item"),i=r("el-option"),n=r("el-select"),p=r("el-input"),V=r("el-form"),_=r("el-tab-pane"),$=r("el-tabs"),C=r("el-space");return c(),D("div",R,[t(C,{direction:"vertical"},{default:s(()=>[t($,{modelValue:d.value,"onUpdate:modelValue":l[8]||(l[8]=a=>d.value=a),type:"card"},{default:s(()=>[t(_,{label:"Step 1",name:"1"},{default:s(()=>[t(V,{inline:!0,"label-position":"left","label-width":"120",class:"w-100"},{default:s(()=>[t(u,{class:"w-100"},{default:s(()=>[E(" This step should describe how to generate the obfuscated scripts ")]),_:1}),t(u,{label:"Build Device",class:"w-100"},{default:s(()=>[t(n,{class:"w-100",modelValue:e.value.device.build.form,"onUpdate:modelValue":l[0]||(l[0]=a=>e.value.device.build.form=a)},{default:s(()=>[t(i,{label:"Physics device (PC, Laptop, etc.)",value:"pc"}),t(i,{label:"Virtual machine (Qemu, VMWare, ECS, etc.)",value:"vm"}),t(i,{label:"CI/CD pipeline",value:"ci"}),t(i,{label:"Docker container",value:"docker"})]),_:1},8,["modelValue"])]),_:1}),t(u,{label:"Platform"},{default:s(()=>[t(p,{modelValue:e.value.device.build.platform,"onUpdate:modelValue":l[1]||(l[1]=a=>e.value.device.build.platform=a),placeholder:"linux.x86_64"},null,8,["modelValue"])]),_:1}),t(u,{label:"Python"},{default:s(()=>[t(p,{modelValue:e.value.device.build.python,"onUpdate:modelValue":l[2]||(l[2]=a=>e.value.device.build.python=a),placeholder:"3.12.2"},null,8,["modelValue"])]),_:1}),t(u,{label:"Pyarmor"},{default:s(()=>[t(p,{modelValue:e.value.device.build.pyarmor,"onUpdate:modelValue":l[3]||(l[3]=a=>e.value.device.build.pyarmor=a),placeholder:"8.5.0"},null,8,["modelValue"])]),_:1}),e.value.steps[0].ignored?h("",!0):(c(),b(u,{key:0,class:"w-100",label:f(m)("Command")},{default:s(()=>[t(p,{placeholder:"Type full pyarmor command to generate obfuscated scripts",modelValue:e.value.steps[0].command,"onUpdate:modelValue":l[4]||(l[4]=a=>e.value.steps[0].command=a)},null,8,["modelValue"])]),_:1},8,["label"])),e.value.steps[0].ignored?h("",!0):(c(),b(u,{key:1,class:"w-100",label:f(m)("Console Output")},{default:s(()=>[t(p,{modelValue:e.value.steps[0].output,"onUpdate:modelValue":l[5]||(l[5]=a=>e.value.steps[0].output=a),placeholder:`1. Try to use the minimum options to reproduce the bug
2. Try to use the simplest script to reproduce the issue
3. If console output is no more than 100 lines, paste full log here, otherwise only the first 50 lines and the last 50 lines
4. Please use debug options \`pyarmor -d gen ...\` to print more information`,rows:8,type:"textarea"},null,8,["modelValue","placeholder"])]),_:1},8,["label"])),t(u,{class:"w-100",label:f(m)("Remark")},{default:s(()=>[t(p,{modelValue:e.value.steps[0].remark,"onUpdate:modelValue":l[6]||(l[6]=a=>e.value.steps[0].remark=a),placeholder:"Copy the content of `pyarmor.error.log` here if this file exists\nPaste the content of test script here if possible and less than 100 lines",rows:3,type:"textarea"},null,8,["modelValue","placeholder"])]),_:1},8,["label"])]),_:1})]),_:1}),y.errmode==="unexpected"?(c(),b(_,{key:0,label:"Step 2",name:"2"},{default:s(()=>[t(V,{"label-position":"top",class:"w-100"},{default:s(()=>[t(u,{label:f(m)("Expected Result")},{default:s(()=>[t(p,{modelValue:e.value.expected,"onUpdate:modelValue":l[7]||(l[7]=a=>e.value.expected=a),placeholder:"Descript the expected results",rows:10,type:"textarea"},null,8,["modelValue"])]),_:1},8,["label"])]),_:1})]),_:1})):h("",!0)]),_:1},8,["modelValue"])]),_:1})])}}});export{I as default};
