"""
A client to interact with Soda Cloud APIs.
"""

import base64
from datetime import datetime
from logging import Logger
from time import sleep
from typing import List, Optional
from urllib.parse import urljoin

from requests import Session

from prefect_soda_cloud.exceptions import (
    GetScanLogsException,
    GetScanStatusException,
    TriggerScanException,
)


class SodaCloudClient:
    """
    A simple client that can be used to interact with
    Soda Cloud APIs.
    """

    __TRIGGER_SCAN_V1_ENDPOINT = "api/v1/scans"
    __GET_SCAN_STATUS_V1_ENDPOINT = "api/v1/scans/{scanId}"
    __GET_SCAN_LOGS_V1_ENDPOINT = "api/v1/scans/{scanId}/logs"
    __DEFAULT_WAIT_SECS_BETWEEN_API_CALLS = 5

    def __init__(
        self,
        api_base_url: str,
        username: str,
        password: str,
        logger: Logger,
        wait_secs_between_api_calls: Optional[int],
    ) -> None:
        """
        Create a `SodaCloudClient` object that can be used to interact
        with Soda Cloud APIs.
        """
        self.__api_base_url = api_base_url
        self.__secret = SodaCloudClient.__get_secret(
            username=username, password=password
        )
        self.__logger = logger
        self.__wait_secs_between_api_calls = (
            wait_secs_between_api_calls
            if wait_secs_between_api_calls and wait_secs_between_api_calls > 0
            else self.__DEFAULT_WAIT_SECS_BETWEEN_API_CALLS
        )

    @property
    def api_base_url(self) -> str:
        """
        Return API Base URL
        """
        return self.__api_base_url

    @property
    def wait_secs_between_api_calls(self) -> int:
        """
        Return wait time seconds between API calls
        """
        return self.__wait_secs_between_api_calls

    @staticmethod
    def __get_secret(username: str, password: str) -> str:
        """
        Return the value of the authorization header computed
        using the username and password
        """
        secret = f"{username}:{password}".encode("utf-8")
        return base64.b64encode(secret).decode("utf-8")

    def __get_session(self) -> Session:
        """
        Create a `Session` object to interact with Soda Cloud APIs.
        """
        session = Session()
        session.headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "Authorization": f"Basic {self.__secret}",
        }
        return session

    def __get_api_url(self, endpoint: str) -> str:
        """
        Return the full API URL by joining the base URL
        and the given endpoint.
        """
        return urljoin(self.api_base_url, endpoint)

    def trigger_scan(self, scan_name: str, data_timestamp: Optional[datetime]) -> str:
        """
        Trigger a Soda Scan given its name and return the corresponding Scan ID.
        Uses [Trigger Scan](https://docs.soda.io/api-docs/public-cloud-api-v1.html#/operations/POST/api/v1/scans) # noqa
        """
        url = self.__get_api_url(endpoint=self.__TRIGGER_SCAN_V1_ENDPOINT)
        payload = {"scanDefinition": scan_name}
        if data_timestamp:
            payload["dataTimestamp"] = data_timestamp.isoformat()

        session = self.__get_session()
        with session.post(url=url, data=payload) as response:
            try:
                response.raise_for_status()
            except Exception:
                raise TriggerScanException(response.json())

        return response.headers["X-Soda-Scan-Id"]

    def get_scan_status(self, scan_id: str, wait_for_scan_end: bool = False) -> dict:
        """
        Return dict that contains information about the run status
        of the scan given the corresponding Scan ID.
        Uses [Get Scan Status](https://docs.soda.io/api-docs/public-cloud-api-v1.html#/operations/GET/api/v1/scans/{scanId}) # noqa
        """
        get_scan_status_endpoint = self.__GET_SCAN_STATUS_V1_ENDPOINT.format(
            scanId=scan_id
        )
        url = self.__get_api_url(endpoint=get_scan_status_endpoint)
        session = self.__get_session()

        while True:
            with session.get(url=url) as response:
                try:
                    response.raise_for_status()
                except Exception:
                    raise GetScanStatusException(response.json())
            scan_status = response.json()
            if not wait_for_scan_end or SodaCloudClient.__is_scan_ended(
                scan_status=scan_status
            ):
                return scan_status
            else:
                self.__logger.info("Waiting for scan to finish execution...")
                sleep(self.__wait_secs_between_api_calls)

    @staticmethod
    def __is_scan_ended(scan_status: dict) -> bool:
        """
        TODO
        """
        return "ended" in scan_status

    def get_scan_logs(self, scan_id: str) -> List[dict]:
        """
        Return the list of log messages generated by a scan
        give the Scan ID.
        Uses [Get Scan Logs](https://docs.soda.io/api-docs/public-cloud-api-v1.html#/operations/GET/api/v1/scans/{scanId}/logs) # noqa
        """
        get_scan_logs_endpoint = self.__GET_SCAN_LOGS_V1_ENDPOINT.format(scanId=scan_id)
        url = self.__get_api_url(endpoint=get_scan_logs_endpoint)

        # Ensure the scan execution is finished
        self.get_scan_status(scan_id=scan_id, wait_for_scan_end=True)

        logs = []
        is_last_log_message = False

        session = self.__get_session()

        # Grab all log messages
        while not is_last_log_message:
            with session.get(url=url) as response:
                try:
                    response.raise_for_status()
                except Exception:
                    raise GetScanLogsException(response.json())

            data = response.json()
            logs.extend(data["content"])
            is_last_log_message = data["last"]

            if not is_last_log_message:
                self.__logger.info("Waiting for more logs...")
                sleep(self.__wait_secs_between_api_calls)

        return logs
