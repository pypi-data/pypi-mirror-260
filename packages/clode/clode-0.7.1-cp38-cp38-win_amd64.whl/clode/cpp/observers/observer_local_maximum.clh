//Event is the detection of local max in specified variable fVarIx

#ifndef OBSERVER_LOCAL_MAX_H
#define OBSERVER_LOCAL_MAX_H

#ifdef __cplusplus
template <typename realtype>
#endif
struct ObserverData_localmax
{
    // realtype nDistinctEvents[N_DISTINCT_MAX];

    realtype tbuffer[3];
    realtype xbuffer[3];
    realtype dxbuffer[3];

    realtype IMI[3]; //max/min/mean
    realtype amp[3]; //max/min/mean
    // realtype tMaxMin[3]; //max/min/mean
    // realtype xMax[3]; //max/min/mean
    // realtype xMin[3]; //max/min/mean

    realtype tLastMax;
    realtype tLastMin;
    realtype xLastMin;

    realtype xTrajectoryMean;
    realtype xGlobalMax;
    realtype xGlobalMin;
    realtype dxGlobalMax;
    realtype dxGlobalMin;

    unsigned int eventcount;
    unsigned int stepcount;

};

#ifdef __cplusplus
//Collect all the info for this observer. Must be a static function when defining function in header, otherwise defined for each time included.
static ObserverInfo getObserverInfo_localmax(const ProblemInfo pi, const int fVarIx, const int eVarIx)
{
    ObserverInfo oi;
    oi.define="USE_OBSERVER_LOCAL_MAX";
    oi.observerDataSizeFloat=sizeof(ObserverData_localmax<float>);
    oi.observerDataSizeDouble=sizeof(ObserverData_localmax<double>);
    std::string varName=pi.varNames[fVarIx];
    oi.featureNames={
        "max IMI",
        "min IMI",
        "mean IMI",
        "max amplitude",
        "min amplitude",
        "mean amplitude",
        "max " + varName,
        "min " + varName,
        "mean " + varName,
        "max d" + varName + "/dt",
        "min d" + varName + "/dt",
        "event count",
        "step count",
    };
    return oi;
}
#endif


#ifdef USE_OBSERVER_LOCAL_MAX
//events are triggered at local maxima in the variable specified by op.fVarIx

typedef struct ObserverData_localmax ObserverData;

//set initial values to relevant fields in ObserverData
inline void initializeObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op)
{

    od->tbuffer[2] = *ti;
    od->xbuffer[2] = xi[op->fVarIx];
    od->dxbuffer[2] = dxi[op->fVarIx];

    od->IMI[0] = -BIG_REAL;
    od->IMI[1] = BIG_REAL;
    od->IMI[2] = RCONST(0.0);

    od->amp[0] = -BIG_REAL;
    od->amp[1] = BIG_REAL;
    od->amp[2] = RCONST(0.0);

    //od->tMaxMin[0]=-BIG_REAL;
    //od->tMaxMin[1]= BIG_REAL;
    //od->tMaxMin[2]= RCONST(0.0);

    // od->xMax[0] = -BIG_REAL;
    // od->xMax[1] = BIG_REAL;
    // od->xMax[2] = RCONST(0.0);

    // od->xMin[0] = -BIG_REAL;
    // od->xMin[1] = BIG_REAL;
    // od->xMin[2] = RCONST(0.0);

    od->tLastMax = RCONST(0.0);
    od->xLastMin = BIG_REAL;
    od->tLastMin = RCONST(0.0);

    od->xTrajectoryMean = RCONST(0.0);
    od->xGlobalMax = -BIG_REAL;
    od->xGlobalMin = BIG_REAL;
    od->dxGlobalMax = -BIG_REAL;
    od->dxGlobalMin = BIG_REAL;

    od->eventcount = 0;
    od->stepcount = 0;
}

//no warmup needed
inline void warmupObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op)
{
}

//process warmup data to compute relevant event detector quantities (e.g. thresholds)
inline void initializeEventDetector(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op)
{
}

//check buffer of slopes for local max
inline bool eventFunction(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op)
{
    if (od->stepcount < 2)
        return false;

    // Event is a local maximum
    return (od->dxbuffer[1] >= 0.0 && od->dxbuffer[2] < 0.0);
}

//When an event is detected, computes desired event-based features. returns true if a terminal event was reached
// - get (t,x) at local max, compute: IMI, tMaxMin, amp
inline bool computeEventFeatures(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op)
{
    ++od->eventcount;

    //Simple Max of xbuffer
    realtype thisXbuffer[3];
    for (int j = 0; j < 3; ++j)
     	thisXbuffer[j] = od->xbuffer[j];

    int ix;
    realtype xThisMax;
    maxOfArray(thisXbuffer, 3, &xThisMax, &ix);
    realtype tThisMax = od->tbuffer[ix];

    //Quadratic interpolation for improved accuracy BROKEN??
    //quadraticInterpVertex(od->tbuffer, od->xbuffer, &tThisMax, &xThisMax);

    if (od->eventcount > 1)
    { //implies tLastMax, tLastMin and xLastMin are set
    
        // od->xMax[0] = fmax(xThisMax, od->xMax[0]);
        // od->xMax[1] = fmin(xThisMax, od->xMax[1]);
        // runningMean(&od->xMax[2], xThisMax, od->eventcount - 1);

        // od->xMin[0] = fmax(od->xLastMin, od->xMin[0]); //must have had two maxima to have found one minimum
        // od->xMin[1] = fmin(od->xLastMin, od->xMin[1]);
        // runningMean(&od->xMin[2], od->xLastMin, od->eventcount - 1);

        //max/min/mean IMI
        realtype thisIMI = tThisMax - od->tLastMax;
        //if(thisIMI > op->minIMI) {
        od->IMI[0] = fmax(thisIMI, od->IMI[0]);
        od->IMI[1] = fmin(thisIMI, od->IMI[1]);
        runningMean(&od->IMI[2], thisIMI, od->eventcount - 1);
        //}

        //max/min/mean tMaxMin
        //realtype thisTMaxMin=tThisMax-od->tLastMin;
        //od->tMaxMin[0]=fmax(thisTMaxMin, od->tMaxMin[0]);
        //od->tMaxMin[1]=fmin(thisTMaxMin, od->tMaxMin[1]);
        //runningMean(&od->tMaxMin[2],thisTMaxMin,od->eventcount-1);

        //max/min/mean amp
        realtype thisAmp = xThisMax - od->xLastMin;
        od->amp[0] = fmax(thisAmp, od->amp[0]);
        od->amp[1] = fmin(thisAmp, od->amp[1]);
        runningMean(&od->amp[2], thisAmp, od->eventcount - 1);
    }

    //update stored "last" values
    od->tLastMax = tThisMax;
    od->xLastMin = xi[op->fVarIx];

    if (od->eventcount >= op->maxEventCount){
        return true;
    }
    return false; //not terminal
}

//full per-timestep update of observer data. If an event occurred this timestep, event-based observer data is reset. Per-timestep features are computed here.
// - advance solution/slope buffers
// - check for any intermediate special points & store their info
// - reset intermediates upon local max event detection
inline void updateObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op)
{
    ++od->stepcount;
    //advance solution buffer
    for (int i = 0; i < 2; ++i)
    {
        od->tbuffer[i] = od->tbuffer[i + 1];
        od->xbuffer[i] = od->xbuffer[i + 1];
        od->dxbuffer[i] = od->dxbuffer[i + 1];
    }
    od->tbuffer[2] = *ti;
    od->xbuffer[2] = xi[op->fVarIx]; // forces fVarIx=eVarIx
    od->dxbuffer[2] = dxi[op->fVarIx];

    //global dxMax, dxMin
    od->xGlobalMax = fmax(od->xGlobalMax, xi[op->fVarIx]);
    od->xGlobalMin = fmin(od->xGlobalMin, xi[op->fVarIx]);
    od->dxGlobalMax = fmax(od->dxGlobalMax, dxi[op->fVarIx]);
    od->dxGlobalMin = fmin(od->dxGlobalMin, dxi[op->fVarIx]);
    runningMean(&od->xTrajectoryMean, xi[op->fVarIx], od->stepcount);

    if (od->stepcount > 1)
    {
        //local min check - one between each max - simply overwrite tLastMin, xLastMin
        if (od->dxbuffer[1] <= 0.0 && od->dxbuffer[2] > 0.0)
        {
            realtype thisXbuffer[3];
            for (int j = 0; j < 3; ++j)
                thisXbuffer[j] = od->xbuffer[j];
            int ix;
            minOfArray(thisXbuffer, 3, &od->xLastMin, &ix);
            od->tLastMin = od->tbuffer[ix];
        }
    }
}



//Perform and post-integration cleanup and write desired features into the global array F
inline void finalizeFeatures(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op, __global realtype *F, int i, int nPts)
{
    int ix = 0;
    // F[ix++ * nPts + i] = od->xGlobalMax-od->xGlobalMin;
    F[ix++ * nPts + i] = od->eventcount > 1 ? od->IMI[0] : 0;
    F[ix++ * nPts + i] = od->eventcount > 1 ? od->IMI[1] : 0;
    F[ix++ * nPts + i] = od->eventcount > 1 ? od->IMI[2] : 0;
    // F[ix++ * nPts + i] = od->eventcount > 1 ? od->IMI[0]-od->IMI[1]  : 0;
    F[ix++ * nPts + i] = od->eventcount > 1 ? od->amp[0] : 0;
    F[ix++ * nPts + i] = od->eventcount > 1 ? od->amp[1] : 0;
    F[ix++ * nPts + i] = od->eventcount > 1 ? od->amp[2] : 0;
    // F[ix++ * nPts + i] = od->eventcount > 1 ? od->amp[0]-od->amp[1] : 0;
    // F[ix++ * nPts + i] = od->eventcount > 0 ? od->xMax[0] : xi[op->fVarIx];
    // F[ix++ * nPts + i] = od->eventcount > 0 ? od->xMax[1] : xi[op->fVarIx];
    // F[ix++ * nPts + i] = od->eventcount > 0 ? od->xMax[2] : xi[op->fVarIx];
    // F[ix++ * nPts + i] = od->eventcount > 0 ? od->xMin[0] : xi[op->fVarIx];
    // F[ix++ * nPts + i] = od->eventcount > 0 ? od->xMin[1] : xi[op->fVarIx];
    // F[ix++ * nPts + i] = od->eventcount > 0 ? od->xMin[2] : xi[op->fVarIx];
    F[ix++ * nPts + i] = od->xGlobalMax;
    F[ix++ * nPts + i] = od->xGlobalMin;
    F[ix++ * nPts + i] = od->xTrajectoryMean;
    F[ix++ * nPts + i] = od->dxGlobalMax;
    F[ix++ * nPts + i] = od->dxGlobalMin;
    F[ix++ * nPts + i] = od->eventcount;
    F[ix++ * nPts + i] = od->stepcount;
}

//Perform and post-integration cleanup of observer data to ensure it is ready for continuation if needed
inline void finalizeObserverData(realtype *ti, realtype xi[], realtype dxi[], realtype auxi[], ObserverData *od, __constant struct ObserverParams *op, __constant realtype *tspan)
{
    //shift all time-based observer members left by [tf-t0]
    realtype T = *ti - tspan[0];
    od->tLastMax = od->tLastMax - T;
    od->tLastMin = od->tLastMin - T;
    for (int i = 0; i < 3; ++i)
    {
        od->tbuffer[i] = od->tbuffer[i] - T;
    }
}

#endif //USE_OBSERVER_LOCAL_MAX

#endif //OBSERVER_LOCAL_MAX_H
