# TODO revert this file to hatchling using https://github.com/pydantic/platform/pull/264/commits/01e4d2258776f98284d019d5040eceeb5e9af42f
# when we move it to a new repo

[tool.poetry]
name = "logfire"
version = "0.19.0"
description = "Coming soon..."
authors = [
    "Pydantic Team <engineering@pydantic.dev>",
    "Samuel Colvin <samuel@pydantic.dev>",
    "Hasan Ramezani <hasan@pydantic.dev>",
    "Adrian Garcia Badaracco <adrian@pydantic.dev>",
    "David Montague <david@pydantic.dev>",
    "Marcelo Trylesinski <marcelo@pydantic.dev>",
    "David Hewitt <david.hewitt@pydantic.dev>",
    "Alex Hall <alex@pydantic.dev>",
]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8"
opentelemetry-sdk = ">=1.21.0"
opentelemetry-exporter-otlp-proto-http = ">=1.21.0"
opentelemetry-instrumentation = ">=0.41b0"
rich = ">=13.4.2"
protobuf = ">=4.23.4"
typing-extensions = ">=4.0.0"
tomli = { version = ">=2.0.1", python = "<3.11" }
# Extras
anyio = { version = ">=4.2.0", optional = true }
httpx = { version = ">=0.22.0", optional = true }
pydantic = { version = ">=2.5.3", optional = true }
celery = { version = ">=4.4.7", optional = true }
starlette = { version = ">=0.27.0", optional = true }
fastapi = { version = ">=0.68.0", optional = true }
django = { version = ">=3.2.0", optional = true }
Flask = { version = ">=3.0.0", optional = true }
dirty-equals = { version = ">=0.6.0", optional = true }
pytest = { version = ">=7.4.2", optional = true }
redis = { version = ">=3.5.3", optional = true }
psycopg2 = { version = ">=2.9.1", optional = true }
opentelemetry-instrumentation-aiohttp-client = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-asgi = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-wsgi = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-celery = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-django = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-fastapi = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-flask = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-starlette = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-httpx = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-requests = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-sqlalchemy = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-pymongo = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-psycopg2 = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-redis = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-system-metrics = { version = ">=0.42b0", optional = true }
requests = { version = ">=2.31.0", optional = true }
sqlalchemy = { version = ">=2.0.22", optional = true }
pandas = { version = "*", optional = true }
attrs = { version = ">=23.1.0", optional = true }
# gitpython is optionally used to get the current git commit hash without a subprocess call
gitpython = { version = ">=3.1.40", optional = true }
devtools = { version = "^0.12.2", optional = true }
eval-type-backport = { version = "^0.1.3", optional = true }
pytest-django = { version = "^4.8.0", optional = true }

[tool.poetry.extras]
system-metrics = ["opentelemetry-instrumentation-system-metrics"]
aiohttp = ["opentelemetry-instrumentation-aiohttp-client", "aiohttp"]
celery = ["opentelemetry-instrumentation-celery", "celery"]
django = ["opentelemetry-instrumentation-django", "django"]
fastapi = ["opentelemetry-instrumentation-fastapi", "fastapi"]
flask = ["opentelemetry-instrumentation-flask", "flask"]
httpx = ["opentelemetry-instrumentation-httpx", "httpx"]
starlette = ["opentelemetry-instrumentation-starlette", "starlette"]
sqlalchemy = ["opentelemetry-instrumentation-sqlalchemy", "sqlalchemy"]
psycopg2 = ["opentelemetry-instrumentation-psycopg2", "psycopg2"]
pymongo = ["opentelemetry-instrumentation-pymongo", "pymongo"]
redis = ["opentelemetry-instrumentation-redis", "redis"]
requests = ["opentelemetry-instrumentation-requests", "requests"]
test = [
    "anyio",
    "httpx",
    "starlette",
    "fastapi",
    "Flask",
    "django",
    "dirty-equals",
    "pytest",
    "pytest-django",
    "pydantic",
    "requests",
    "sqlalchemy",
    "pandas",
    "attrs",
    "opentelemetry-instrumentation-aiohttp-client",
    "opentelemetry-instrumentation-asgi",
    "opentelemetry-instrumentation-wsgi",
    "opentelemetry-instrumentation-fastapi",
    "opentelemetry-instrumentation-flask",
    "opentelemetry-instrumentation-django",
    "opentelemetry-instrumentation-httpx",
    "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-sqlalchemy",
    "opentelemetry-instrumentation-system-metrics",
    "gitpython",
    "devtools",
    "eval-type-backport",
]

[tool.poetry.scripts]
logfire = "logfire.cli:main"

[tool.poetry.plugins."pydantic"]
logfire-plugin = "logfire.integrations.pydantic_plugin:plugin"

[tool.poetry.plugins."pytest11"]
logfire = "logfire.testing"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
