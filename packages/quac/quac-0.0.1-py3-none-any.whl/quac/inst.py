# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/12_inst.ipynb.

# %% auto 0
__all__ = ['il_moduleloader', 'il_modulespec', 'os_pathlike', 'pl_path', 'pl_posixpath', 'i_sig', 'i_param', 'i_paramkind',
           'i_empty', 'l_logger', 'it_chain', 'it_prod', 'it_ziplong', 'c_dict_keys', 'c_dict_values', 'c_dict_items',
           't_moduletype', 't_methodwrappertype', 't_builtinfunctiontype', 't_tracebacktype', 't_functiontype',
           't_nonetype', 'c_mapping', 'c_iterable', 'm_nan', 'np_nan', 'np_NaN', 'np_NAN', 'pd_na', 'pd_natype',
           'n_number', 're_pattern', 're_match', 's_template', 'np_array', 'np_matrix', 'np_recarray', 'np_bool',
           'np_type', 'np_empty', 'np_datasource', 'sp_sparray', 'sp_spmatrix', 'sp_linalg', 'sp_speigs', 'sp_pdist',
           'sp_csc_array', 'sp_csc_matrix', 'sp_coo_array', 'sp_coo_matrix', 'sp_csr_array', 'sp_csr_matrix',
           'sp_dia_array', 'sp_dia_matrix', 'sp_dok_array', 'sp_dok_matrix', 'sp_lil_array', 'sp_lil_matrix',
           'sp_bsr_array', 'sp_bsr_matrix', 'pd_index', 'pd_series', 'pd_dataframe', 'pd_catindex', 'pd_delegate',
           'pd_cataccessor', 'pt_C', 'pt_nan', 'pt_size', 'pt_type', 'pt_device', 'pt_nn', 'pt_module', 'pt_dataset',
           'pt_dataloader', 'pt_tensorbase', 'pt_tensor', 'pt_inttensor', 'pt_floattensor', 'pt_longtensor',
           'pt_doubletensor', 'pt_booltensor', 'pt_memoryformat', 'pt_preserveformat', 'tv_datasets', 'tv_transforms',
           'tv_functional', 'pl_module', 'pl_datamodule', 'td_odefunc', 'td_sdefunc', 'td_neuralode', 'td_neuralsde',
           'td_augmenter', 'ts_sdeito', 'ts_brownianinterval', 'ad_adata', 'gt_base', 'gt_data', 'gt_bgraph',
           'gt_dgraph', 'gt_lgraph', 'gt_kgraph', 'gt_tgraph', 'gt_mgraph', 'gt_klgraph', 'gt_mlgraph', 'gt_tlgraph',
           'cv_vidcap', 'pil_image', 'mpl', 'mp_pyplot', 'mpl_colormap', 'mpl_lcolormap', 'mpl_lscolormap',
           'mpl_artist', 'mpl_patch', 'mpl_axbase', 'mpl_axes', 'sk_baseestimator', 'sk_pairwise', 'ph_phate',
           'r_jupmix', 'r_richtree', 'r_richtext', 'r_richcons', 'r_richprog', 'r_richtask', 'tq_as', 'tq_nb',
           'tq_auto', 't_typer']

# %% ../nbs/12_inst.ipynb 6
import io, sys
from contextlib import redirect_stderr, redirect_stdout
from importlib import import_module
from importlib.abc import Loader
from importlib.util import (module_from_spec, find_spec)
from importlib.machinery import ModuleSpec

# %% ../nbs/12_inst.ipynb 8
from abc import ABCMeta
from enum import EnumMeta
from types import ModuleType, FunctionType, BuiltinFunctionType
from typing import Any, NamedTuple, Iterable

# %% ../nbs/12_inst.ipynb 10
#| export

# %% ../nbs/12_inst.ipynb 12
#| export

# %% ../nbs/12_inst.ipynb 14
from .spec import DuckSpec

from quac.mods import (
    _os, _pathlib, _types, _re, _string, _math, _numbers, _inspect, _importlib, _itertools, _logging, _collectionsabc, 
    _numpy, _scipy, _pandas, _sklearn, _torch_c, _torch, _torchvision, _pytorch_lightning, _torchdyn, _torchsde, 
    _anndata, _cv2, _PIL, _graphtools, _phate, _matplotlib, _seaborn, _rich, _tqdm, _typer
)

# %% ../nbs/12_inst.ipynb 17
il_moduleloader = DuckSpec(asset='importlib.abc.Loader', ducked=_importlib, default=type)
'''`importlib.Loader`''';

il_modulespec = DuckSpec(asset='importlib.machinery.ModuleSpec', ducked=_importlib, default=type)
'''`importlib.machinery.ModuleSpec`''';

# %% ../nbs/12_inst.ipynb 19
os_pathlike = DuckSpec(asset='os.PathLike', ducked=_os, default=str)
'''`os.pathlike`''';

pl_path = DuckSpec(asset='pathlib.Path', ducked=_pathlib, default=os_pathlike)
'''`pathlib.Path`''';

pl_posixpath = DuckSpec(asset='pathlib.PosixPath', ducked=_pathlib, default=os_pathlike)
'''`pathlib.PosixPath`''';

# %% ../nbs/12_inst.ipynb 21
i_sig = DuckSpec(asset='inspect.Signature', ducked=_inspect, default=type)
'''`inspect.Signature`''';

i_param = DuckSpec(asset='inspect.Parameter', ducked=_inspect, default=type)
'''`inspect.Parameter`''';

i_paramkind = DuckSpec(asset='inspect._ParameterKind', ducked=_inspect, default=EnumMeta)
'''`inspect._ParameterKind`''';

i_empty = DuckSpec(asset='inspect._empty', ducked=_inspect, default=type)
'''`inspect.emtpy`''';

# %% ../nbs/12_inst.ipynb 23
l_logger = DuckSpec(asset='logging.Logger', ducked=_logging, default=type)
'''`logging.Logger`''';

# %% ../nbs/12_inst.ipynb 25
it_chain = DuckSpec(asset='itertools.chain', ducked=_itertools, default=type)
'''`itertools.chain`''';

it_prod = DuckSpec(asset='itertools.product', ducked=_itertools, default=type)
'''`itertools.product`''';

it_ziplong = DuckSpec(asset='itertools.zip_longest', ducked=_itertools, default=type)
'''`itertools.zip_longest`''';

# %% ../nbs/12_inst.ipynb 28
c_dict_keys = DuckSpec(asset='_collections_abc.dict_keys', ducked=_collectionsabc, default=type)
'''`collections.abc.dict_keys`''';

c_dict_values = DuckSpec(asset='_collections_abc.dict_values', ducked=_collectionsabc, default=type)
'''`collections.abc.dict_values`''';

c_dict_items = DuckSpec(asset='_collections_abc.dict_items', ducked=_collectionsabc, default=type)
'''`collections.abc.dict_items`''';

# %% ../nbs/12_inst.ipynb 31
t_moduletype = DuckSpec(asset='types.ModuleType', ducked=_types, default=type)
'''`types.ModuleType`''';

t_methodwrappertype = DuckSpec(asset='types.MethodWrapperType', ducked=_types, default=type)
'''`types.MethodWrapperType`''';

t_builtinfunctiontype = DuckSpec(asset='types.BuiltinFunctionType', ducked=_types, default=type)
'''`types.BuiltinFunctionType`''';

t_tracebacktype = DuckSpec(asset='types.TracebackType', ducked=_types, default=type)
'''`types.TracebackType`''';

t_functiontype = DuckSpec(asset='types.FunctionType', ducked=_types, default=type)
'''`types.FunctionType`''';

t_nonetype = DuckSpec(asset='types.NoneType', ducked=_types, default=type)
'''`types.NoneType`''';

c_mapping = DuckSpec('collections.abc.Mapping', default=type)
'''`collections.abc.Mapping`''';

c_iterable = DuckSpec('collections.abc.Iterable', default=type)
'''`collections.abc.Iterable`''';

# %% ../nbs/12_inst.ipynb 34
m_nan = DuckSpec(asset='math.nan', ducked=_math, default=float('nan'))
'''`math.nan`''';

np_nan = DuckSpec(asset='numpy.nan', ducked=_numpy, default=m_nan)
'''`numpy.nan`''';

np_NaN = DuckSpec(asset='numpy.NaN', ducked=_numpy, default=m_nan)
'''`numpy.NaN`''';

np_NAN = DuckSpec(asset='numpy.NAN', ducked=_numpy, default=m_nan)
'''`numpy.NAN`''';

pd_na = DuckSpec(asset='pandas.NA', ducked=_pandas, default=m_nan)
'''`pandas.NA`''';

pd_natype = DuckSpec(asset='pandas._libs.missing.NAType', ducked=_pandas, default=type(m_nan))
'''`pandas._libs.missing.NAType`''';

# %% ../nbs/12_inst.ipynb 38
n_number = DuckSpec(asset='numbers.Number', ducked=_numbers, default=ABCMeta)
'''`numbers.Number`''';

# %% ../nbs/12_inst.ipynb 40
re_pattern = DuckSpec(asset='re.Pattern', ducked=_re, default=type)
'''`re.Pattern`''';

re_match = DuckSpec(asset='re.Match', ducked=_re, default=type)
'''`re.Match`''';

s_template = DuckSpec(asset='string.Template', ducked=_string, default=type)
'''`string.Template`''';

# %% ../nbs/12_inst.ipynb 43
np_array = DuckSpec(asset='numpy.ndarray', ducked=_numpy, default=list)
'''`numpy.ndarray`''';

np_matrix = DuckSpec(asset='numpy.matrix', ducked=_numpy, default=list)
'''`numpy.matrix`''';

np_recarray = DuckSpec(asset='numpy.recarray', ducked=_numpy, default=list)
'''`numpy.recarray`''';

np_bool = DuckSpec(asset='numpy.bool_', ducked=_numpy, default=bool)
'''`numpy.bool_`''';

np_type = DuckSpec(asset='numpy.dtype', ducked=_numpy, default=type)
'''`numpy.dtype`''';

np_empty = DuckSpec(asset='numpy.empty', ducked=_numpy, default=BuiltinFunctionType)
'''`numpy.empty`''';

np_datasource = DuckSpec(asset='numpy.DataSource', ducked=_numpy, default=os_pathlike)
'''`numpy.DataSource`''';

# %% ../nbs/12_inst.ipynb 46
# NOTE: required as scipy.sparse.sparray location depends on version
sp_sparray = DuckSpec(asset='scipy.sparse._arrays._sparray', ducked=_scipy, default=list)
sp_sparray = DuckSpec(asset='scipy.sparse.sparray', ducked=_scipy, default=(sp_sparray or list))
'''`scipy.sparse.sparray`''';

sp_spmatrix = DuckSpec(asset='scipy.sparse.spmatrix', ducked=_scipy, default=list)
'''`scipy.sparse.spmatrix`''';

# %% ../nbs/12_inst.ipynb 47
sp_linalg = DuckSpec(asset='scipy.sparse.linalg', ducked=_scipy, default=ModuleType('scipy.sparse.linalg'))
'''`scipy.sparse.linalg`''';

sp_speigs = DuckSpec(asset='scipy.sparse.linalg.eigs', ducked=_scipy, default=FunctionType)
'''`scipy.sparse.linalg.eigs`''';

sp_pdist = DuckSpec(asset='scipy.spatial.distance.pdist', ducked=_scipy, default=FunctionType)
'''`scipy.spatial.distance.pdist`''';

# %% ../nbs/12_inst.ipynb 49
sp_csc_array = DuckSpec(asset='scipy.sparse.csc_array', ducked=_scipy, default=list)
'''`scipy.sparse.csc_array`''';

sp_csc_matrix = DuckSpec(asset='scipy.sparse.csc_matrix', ducked=_scipy, default=list)
'''`scipy.sparse.csc_matrix`''';

sp_coo_array = DuckSpec(asset='scipy.sparse.coo_array', ducked=_scipy, default=list)
'''`scipy.sparse.coo_array`''';

sp_coo_matrix = DuckSpec(asset='scipy.sparse.coo_matrix', ducked=_scipy, default=list)
'''`scipy.sparse.coo_matrix`''';

sp_csr_array = DuckSpec(asset='scipy.sparse.csr_array', ducked=_scipy, default=list)
'''`scipy.sparse.csr_array`''';

sp_csr_matrix = DuckSpec(asset='scipy.sparse.csr_matrix', ducked=_scipy, default=list)
'''`scipy.sparse.csr_matrix`''';

sp_dia_array = DuckSpec(asset='scipy.sparse.dia_array', ducked=_scipy, default=list)
'''`scipy.sparse.dia_array`''';

sp_dia_matrix = DuckSpec(asset='scipy.sparse.dia_matrix', ducked=_scipy, default=list)
'''`scipy.sparse.dia_matrix`''';

sp_dok_array = DuckSpec(asset='scipy.sparse.dok_array', ducked=_scipy, default=list)
'''`scipy.sparse.dok_array`''';

sp_dok_matrix = DuckSpec(asset='scipy.sparse.dok_matrix', ducked=_scipy, default=list)
'''`scipy.sparse.dok_matrix`''';

sp_lil_array = DuckSpec(asset='scipy.sparse.lil_array', ducked=_scipy, default=list)
'''`scipy.sparse.lil_array`''';

sp_lil_matrix = DuckSpec(asset='scipy.sparse.lil_matrix', ducked=_scipy, default=list)
'''`scipy.sparse.lil_matrix`''';

sp_bsr_array = DuckSpec(asset='scipy.sparse.bsr_array', ducked=_scipy, default=list)
'''`scipy.sparse.bsr_array`''';

sp_bsr_matrix = DuckSpec(asset='scipy.sparse.bsr_matrix', ducked=_scipy, default=list)
'''`scipy.sparse.bsr_matrix`''';

# %% ../nbs/12_inst.ipynb 51
pd_index = DuckSpec(asset='pandas.Index', ducked=_pandas, default=list)
'''`pandas.Index`''';

pd_series = DuckSpec(asset='pandas.Series', ducked=_pandas, default=list)
'''`pandas.Series`''';

pd_dataframe = DuckSpec(asset='pandas.DataFrame', ducked=_pandas, default=list)
'''`pandas.DataFrame`''';

pd_catindex = DuckSpec(asset='pandas.CategoricalIndex', ducked=_pandas, default=list)
'''`pandas.CategoricalIndex`''';

pd_delegate = DuckSpec(asset='pandas.core.accessor.PandasDelegate', ducked=_pandas, default=object)
'''`pandas.core.accessor.PandasDelegate`''';

pd_cataccessor = DuckSpec(asset='pandas.core.arrays.categorical.CategoricalAccessor', ducked=_pandas, default=object)
'''`pandas.core.arrays.categorical.CategoricalAccessor`''';

# %% ../nbs/12_inst.ipynb 54
pt_C = DuckSpec('torch._C', is_module=True, ducked=_torch_c)
'''`torch._C`''';

pt_nan = DuckSpec('torch.nan', ducked=_torch_c, default=m_nan)
'''`torch.nan`''';

# %% ../nbs/12_inst.ipynb 56
pt_size = DuckSpec(asset='torch.Size', ducked=_torch, default=tuple)
'''`torch.Size`''';

pt_type = DuckSpec(asset='torch.dtype', ducked=_torch, default=type)
'''`torch.dtype`''';

pt_device = DuckSpec(asset='torch.device', ducked=_torch, default=str)
'''`torch.device`''';

# %% ../nbs/12_inst.ipynb 57
pt_nn = DuckSpec(asset='torch.nn', is_module=True, ducked=_torch, default=ModuleType('torch.nn'))
'''`torch.nn`''';

# %% ../nbs/12_inst.ipynb 58
pt_module = DuckSpec(asset='torch.nn.Module', ducked=_torch, default=type)
'''`torch.nn.Module`''';

pt_dataset = DuckSpec(asset='torch.utils.data.Dataset', ducked=_torch, default=list)
'''`torch.utils.data.Dataset`''';

pt_dataloader = DuckSpec(asset='torch.utils.data.DataLoader', ducked=_torch, default=list)
'''`torch.utils.data.DataLoader`''';

# %% ../nbs/12_inst.ipynb 59
pt_tensorbase = DuckSpec(asset='torch._C._TensorBase', ducked=_torch_c, default=list)
'''`torch._C._TensorBase`''';

pt_tensor = DuckSpec(asset='torch.Tensor', ducked=_torch, default=list, bases=(pt_tensorbase, ))
'''`torch.Tensor`''';

pt_inttensor = DuckSpec(asset='torch.IntTensor', ducked=_torch, default=list, bases=(pt_tensor, ))
'''`torch.IntTensor`''';

pt_floattensor = DuckSpec(asset='torch.FloatTensor', ducked=_torch, default=list, bases=(pt_tensor, ))
'''`torch.FloatTensor`''';

pt_longtensor = DuckSpec(asset='torch.LongTensor', ducked=_torch, default=list, bases=(pt_tensor, ))
'''`torch.LongTensor`''';

pt_doubletensor = DuckSpec(asset='torch.DoubleTensor', ducked=_torch, default=list, bases=(pt_tensor, ))
'''`torch.DoubleTensor`''';

pt_booltensor = DuckSpec(asset='torch.BoolTensor', ducked=_torch, default=list, bases=(pt_tensor, ))
'''`torch.BoolTensor`''';

# %% ../nbs/12_inst.ipynb 60
pt_memoryformat = DuckSpec(asset='torch.memory_format', ducked=_torch, default=type)
'''`torch.memory_format`''';

pt_preserveformat = DuckSpec(asset='torch.preserve_format', bases=(pt_memoryformat, ), ducked=_torch, default=type)
'''`torch.preserve_format`''';

# %% ../nbs/12_inst.ipynb 63
tv_datasets = DuckSpec(asset='torchvision.datasets', is_module=True, ducked=_torchvision, default=ModuleType('torchvision.datasets'))
'''`torchvision.datasets`''';

tv_transforms = DuckSpec(asset='torchvision.transforms', is_module=True, ducked=_torchvision, default=ModuleType('torchvision.transforms'))
'''`torchvision.transforms`''';

tv_functional = DuckSpec(asset='torchvision.transforms.functional', is_module=True, ducked=_torchvision, default=ModuleType('torchvision.transforms.functional'))
'''`torchvision.transforms.functional`''';

# %% ../nbs/12_inst.ipynb 66
pl_module = DuckSpec(asset='pytorch_lightning.LightningModule', ducked=_pytorch_lightning, default=pt_module)
'''`lightning.LightningModule`''';

pl_datamodule = DuckSpec(asset='pytorch_lightning.LightningDataModule', ducked=_pytorch_lightning, default=list)
'''`lightning.LightningDataModule`''';

# %% ../nbs/12_inst.ipynb 68
td_odefunc = DuckSpec(asset='torchdyn.core.defunc.ODEFunc', ducked=_torchdyn, default=type)
'''`torchdyn.core.defunc.ODEFunc`''';

td_sdefunc = DuckSpec(asset='torchdyn.core.defunc.SDEFunc', ducked=_torchdyn, default=type)
'''`torchdyn.core.defunc.SDEFunc`''';

td_neuralode = DuckSpec(asset='torchdyn.core.NeuralODE', ducked=_torchdyn, default=pt_module)
'''`torchdyn.core.NeuralODE`''';

td_neuralsde = DuckSpec(asset='torchdyn.core.NeuralSDE', ducked=_torchdyn, default=pt_module)
'''`torchdyn.core.NeuralSDE`''';

td_augmenter = DuckSpec(asset='torchdyn.nn.Augmenter', ducked=_torchdyn, default=type)
'''`torchdyn.nn.augmenter`''';

# %% ../nbs/12_inst.ipynb 70
ts_sdeito = DuckSpec(asset='torchsde.SDEIto', ducked=_torchsde, default=type)
'''`torchsde.ito`''';

ts_brownianinterval = DuckSpec(asset='torchsde.BrownianInterval', ducked=_torchsde, default=type)
'''`torchsde.BrownianInterval`''';

# %% ../nbs/12_inst.ipynb 72
ad_adata = DuckSpec(asset='anndata.AnnData', ducked=_anndata, default=list)
'''`anndata.AnnData`''';

# %% ../nbs/12_inst.ipynb 75
gt_base = DuckSpec(asset='graphtools.base.Base', ducked=_graphtools, default=type)
'''`graphtools.base.Base`''';

gt_data = DuckSpec(asset='graphtools.base.Data', ducked=_graphtools, default=type, bases=(gt_base, ))
'''`graphtools.base.Data`''';

gt_bgraph = DuckSpec(asset='graphtools.base.BaseGraph', ducked=_graphtools, default=type, bases=(gt_base, ))
'''`graphtools.base.BaseGraph`''';

gt_dgraph = DuckSpec(asset='graphtools.base.DataGraph', ducked=_graphtools, default=type, bases=(gt_base, gt_bgraph))
'''`graphtools.base.DataGraph`''';

# %% ../nbs/12_inst.ipynb 76
gt_lgraph = DuckSpec(asset='graphtools.graphs.LandmarkGraph', ducked=_graphtools, default=type, bases=(gt_dgraph, ))
'''`graphtools.graphs.LandmarkGraph`''';

gt_kgraph = DuckSpec(asset='graphtools.graphs.kNNGraph', ducked=_graphtools, default=type, bases=(gt_dgraph, ))
'''`graphtools.graphs.kNNGraph`''';

gt_tgraph = DuckSpec(asset='graphtools.graphs.TraditionalGraph', ducked=_graphtools, default=type, bases=(gt_dgraph, ))
'''`graphtools.graphs.TraditionalGraph`''';

gt_mgraph = DuckSpec(asset='graphtools.graphs.MNNGraph', ducked=_graphtools, default=type, bases=(gt_dgraph, ))
'''`graphtools.graphs.MNNGraph`''';

# %% ../nbs/12_inst.ipynb 77
gt_klgraph = DuckSpec(asset='graphtools.graphs.kNNLandmarkGraph', ducked=_graphtools, default=type, bases=(gt_kgraph, gt_lgraph, ))
'''`graphtools.graphs.kNNLandmarkGraph`''';

gt_mlgraph = DuckSpec(asset='graphtools.graphs.MNNLandmarkGraph', ducked=_graphtools, default=type, bases=(gt_mgraph, gt_lgraph, ))
'''`graphtools.graphs.MNNLandmarkGraph`''';

gt_tlgraph = DuckSpec(asset='graphtools.graphs.TraditionalLandmarkGraph', ducked=_graphtools, default=type, bases=(gt_tgraph, gt_lgraph, ))
'''`graphtools.graphs.TraditionalLandmarkGraph`''';

# %% ../nbs/12_inst.ipynb 80
cv_vidcap = DuckSpec(asset='cv2.VideoCapture', ducked=_cv2, default=type)
'''`cv2.VideoCapture`''';

# %% ../nbs/12_inst.ipynb 82
pil_image = DuckSpec(asset='PIL.Image.Image', ducked=_PIL, default=type)
'''`PIL.Image.Image`''';

# %% ../nbs/12_inst.ipynb 84
mpl = DuckSpec(asset='matplotlib', is_module=True, ducked=_matplotlib, default=ModuleType('matplotlib'))
'''`matplotlib`''';

mp_pyplot = DuckSpec(asset='matplotlib.pyplot', is_module=True, ducked=_matplotlib, default=ModuleType('matplotlib.pyplot'))
'''`matplotlib.pyplot`''';

mpl_colormap = DuckSpec(asset='matplotlib.colors.Colormap', ducked=_matplotlib, default=type)
'''`matplotlib.colors.Colormap`''';

mpl_lcolormap = DuckSpec(asset='matplotlib.colors.ListedColormap', ducked=_matplotlib, default=type, bases=(mpl_colormap, ))
'''`matplotlib.colors.ListedColormap`''';

mpl_lscolormap = DuckSpec(asset='matplotlib.colors.LinearSegmentedColormap', ducked=_matplotlib, default=type, bases=(mpl_colormap, ))
'''`matplotlib.colors.LinearSegmentedColormap`''';

_mpl_base = DuckSpec(asset='matplotlib.axes._base', is_module=True, ducked=_matplotlib, default=type)
'''`matplotlib.axes._base`''';

mpl_artist = DuckSpec(asset='matplotlib.artist.Artist', ducked=_matplotlib, default=type)
'''`matplotlib.artist.Artist`''';

mpl_patch = DuckSpec(asset='matplotlib.patches.Patch', ducked=_matplotlib, default=type, bases=(mpl_artist, ))
'''`matplotlib.patches.Patch`''';

mpl_axbase = DuckSpec(asset='matplotlib.axes._base._AxesBase', ducked=_matplotlib, default=type, bases=(mpl_artist, ))
'''`matplotlib.axes._base._AxesBase`''';

mpl_axes = DuckSpec(asset='matplotlib.axes._axes.Axes', ducked=_matplotlib, default=type, bases=(mpl_axbase, ))
'''`matplotlib.axes._axes.Axes`''';

# %% ../nbs/12_inst.ipynb 86
sk_baseestimator = DuckSpec(asset='sklearn.base.BaseEstimator', ducked=_sklearn, default=type)
'''`sklearn.base.BaseEstimator`''';

sk_pairwise = DuckSpec(asset='sklearn.metrics.pairwise', is_module=True, ducked=_sklearn, default=ModuleType('sklearn.metrics.pairwise'))
'''`sklearn.metrics.pairwise`''';

# %% ../nbs/12_inst.ipynb 89
ph_phate = DuckSpec(asset='phate.PHATE', ducked=_phate, default=sk_baseestimator)
'''`phate.PHATE`''';

# %% ../nbs/12_inst.ipynb 91
r_jupmix = DuckSpec(asset='rich.jupyter.JupyterMixin', ducked=_rich, default=type)
'''`rich.jupyter.JupyterMixin`''';

r_richtree = DuckSpec(asset='rich.tree.Tree', ducked=_rich, default=type, bases=(r_jupmix, ))
'''`rich.tree.Tree`''';

r_richtext = DuckSpec(asset='rich.text.Text', ducked=_rich, default=type, bases=(r_jupmix, ))
'''`rich.text.Text`''';

r_richcons = DuckSpec(asset='rich.console.Console', ducked=_rich, default=type, bases=(r_jupmix, ))
'''`rich.console.Console`''';

r_richprog = DuckSpec(asset='rich.progress.Progress', ducked=_rich, default=type, bases=(r_jupmix, ))
'''`rich.progress.Progress`''';

r_richtask = DuckSpec(asset='rich.progress.Task', ducked=_rich, default=type, bases=(r_jupmix, ))
'''`rich.progress.Task`''';

# %% ../nbs/12_inst.ipynb 93
_tq_com = DuckSpec(asset='tqdm.utils.Comparable', ducked=_tqdm, default=type)
'''`tqdm.utils.Comparable`''';

_tq_std = DuckSpec(asset='tqdm.std.tqdm', ducked=_tqdm, default=type, bases=(_tq_com, ))
'''`tqdm.std.tqdm`''';

tq_as = DuckSpec(asset='tqdm.asyncio.tqdm_asyncio', ducked=_tqdm, default=type, bases=(_tq_std, ))
'''`tqdm.tqdm_asyncio.tqdm_asyncio`''';

tq_nb = DuckSpec(asset='tqdm.notebook.tqdm_notebook', ducked=_tqdm, default=type, bases=(_tq_std, ))
'''`tqdm.notebook.tqdm_notebook`''';

tq_auto = DuckSpec(asset='tqdm.auto.tqdm', ducked=_tqdm, default=lambda x: x, bases=(tq_nb, tq_as))
'''`tqdm.auto.tqdm`''';

# %% ../nbs/12_inst.ipynb 95
t_typer = DuckSpec(asset='typer.Typer', ducked=_typer, default=type)
'''`typer.Typer`''';
