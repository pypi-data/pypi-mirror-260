import interscript
import regex as re
interscript.load_map("unicode")
interscript.load_map("var-kor-Hang-Hang-jamo")
interscript.stdlib.define_map("odni-kor-Hang-Latn-2015")
interscript.stdlib.add_map_alias("odni-kor-Hang-Latn-2015", "alpha_plus", "a")
interscript.stdlib.add_map_alias_re("odni-kor-Hang-Latn-2015", "alpha_plus", "[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ’]")
def _stage_main(s):
    s = re.compile("(?:"+interscript.stdlib.aliases["line_start"]+"\\ |\\ "+interscript.stdlib.aliases["line_end"]+")", re.MULTILINE).sub("", s)
    s = re.compile(""+interscript.stdlib.aliases["line_start"]+"("+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+")("+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+")"+interscript.stdlib.aliases["line_end"]+"", re.MULTILINE).sub("\\1"+" "+"\\2", s)
    s = re.compile(""+interscript.stdlib.aliases["line_start"]+"("+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+""+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+")("+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+""+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+")"+interscript.stdlib.aliases["line_end"]+"", re.MULTILINE).sub("\\1"+" "+"\\2", s)
    s = re.compile(""+interscript.stdlib.aliases["line_start"]+"((?:독고|동방|등정|망절|무본|부여|사공|서문|선우|어금|제갈|황목|황보))("+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+")"+interscript.stdlib.aliases["line_end"]+"", re.MULTILINE).sub("\\1"+" "+"\\2", s)
    s = re.compile(""+interscript.stdlib.aliases["line_start"]+"("+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+")("+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+""+interscript.stdlib.get_alias_re("unicode", "unicode_hangul")+")"+interscript.stdlib.aliases["line_end"]+"", re.MULTILINE).sub("\\1"+" "+"\\2", s)
    s = re.compile("(?:"+interscript.stdlib.aliases["line_start"]+"\\ |\\ "+interscript.stdlib.aliases["line_end"]+")", re.MULTILINE).sub("", s)
    s = interscript.transliterate("var-kor-Hang-Hang-jamo", s, "main")
    s = interscript.stdlib.parallel_replace_tree(s, _PTREE_3737008790951801684)
    s = interscript.stdlib.parallel_replace_tree(s, _PTREE_3737008790951801684)
    s = re.compile("ᆩ", re.MULTILINE).sub("kk", s)
    s = re.compile("ᆪ", re.MULTILINE).sub("ks", s)
    s = re.compile("ᆬ", re.MULTILINE).sub("nch", s)
    s = re.compile("ᆭ", re.MULTILINE).sub("nh", s)
    s = re.compile("ᆮ", re.MULTILINE).sub("t", s)
    s = re.compile("ᆳ", re.MULTILINE).sub("l", s)
    s = re.compile("ᆴ", re.MULTILINE).sub("lt’", s)
    s = re.compile("ᆵ", re.MULTILINE).sub("lp’", s)
    s = re.compile("ᆶ", re.MULTILINE).sub("lh", s)
    s = re.compile("ᆹ", re.MULTILINE).sub("ps", s)
    s = re.compile("ᆻ", re.MULTILINE).sub("ss", s)
    s = re.compile("ᆽ", re.MULTILINE).sub("ch", s)
    s = re.compile("ᆾ", re.MULTILINE).sub("ch’", s)
    s = re.compile("ᆿ", re.MULTILINE).sub("k’", s)
    s = re.compile("ᇀ", re.MULTILINE).sub("t’", s)
    s = re.compile("ᇁ", re.MULTILINE).sub("p’", s)
    s = re.compile("ᇂ", re.MULTILINE).sub("h", s)
    s = re.compile("ᆨ", re.MULTILINE).sub("k", s)
    s = re.compile("ᆫ", re.MULTILINE).sub("n", s)
    s = re.compile("ᆯ", re.MULTILINE).sub("l", s)
    s = re.compile("ᆷ", re.MULTILINE).sub("m", s)
    s = re.compile("ᆸ", re.MULTILINE).sub("p", s)
    s = re.compile("ᆺ", re.MULTILINE).sub("s", s)
    s = re.compile("ᆼ", re.MULTILINE).sub("ng", s)
    s = re.compile("ᆰ", re.MULTILINE).sub("lk", s)
    s = re.compile("ᆲ", re.MULTILINE).sub("lp", s)
    s = re.compile("ᄀ", re.MULTILINE).sub("-k", s)
    s = re.compile("ᄂ", re.MULTILINE).sub("-n", s)
    s = re.compile("ᄃ", re.MULTILINE).sub("-t", s)
    s = re.compile("ᄅ", re.MULTILINE).sub("-r", s)
    s = re.compile("ᄆ", re.MULTILINE).sub("-m", s)
    s = re.compile("ᄇ", re.MULTILINE).sub("-p", s)
    s = re.compile("ᄉ", re.MULTILINE).sub("-s", s)
    s = re.compile("ᄋ", re.MULTILINE).sub("-", s)
    s = re.compile("ᄌ", re.MULTILINE).sub("-ch", s)
    s = re.compile("ᄎ", re.MULTILINE).sub("-ch’", s)
    s = re.compile("ᄏ", re.MULTILINE).sub("-k’", s)
    s = re.compile("ᄐ", re.MULTILINE).sub("-t’", s)
    s = re.compile("ᄑ", re.MULTILINE).sub("-p’", s)
    s = re.compile("ᄒ", re.MULTILINE).sub("-h", s)
    s = re.compile("ᄁ", re.MULTILINE).sub("-kk", s)
    s = re.compile("ᄭ", re.MULTILINE).sub("-sk", s)
    s = re.compile("ᄄ", re.MULTILINE).sub("-tt", s)
    s = re.compile("ᄯ", re.MULTILINE).sub("-st", s)
    s = re.compile("ᄈ", re.MULTILINE).sub("-pp", s)
    s = re.compile("ᄲ", re.MULTILINE).sub("-sp", s)
    s = re.compile("ᄊ", re.MULTILINE).sub("-ss", s)
    s = re.compile("ᄍ", re.MULTILINE).sub("-chch", s)
    s = re.compile("ᄶ", re.MULTILINE).sub("-sch", s)
    s = re.compile("ᅡ", re.MULTILINE).sub("a", s)
    s = re.compile("ᅣ", re.MULTILINE).sub("ya", s)
    s = re.compile("ᅥ", re.MULTILINE).sub("o’", s)
    s = re.compile("ᅧ", re.MULTILINE).sub("yo’", s)
    s = re.compile("ᅩ", re.MULTILINE).sub("o", s)
    s = re.compile("ᅭ", re.MULTILINE).sub("yo", s)
    s = re.compile("ᅮ", re.MULTILINE).sub("u", s)
    s = re.compile("ᅲ", re.MULTILINE).sub("yu", s)
    s = re.compile("ᅳ", re.MULTILINE).sub("u’", s)
    s = re.compile("ᅵ", re.MULTILINE).sub("i", s)
    s = re.compile("ᅢ", re.MULTILINE).sub("ae", s)
    s = re.compile("ᅤ", re.MULTILINE).sub("yae", s)
    s = re.compile("ᅦ", re.MULTILINE).sub("e", s)
    s = re.compile("ᅨ", re.MULTILINE).sub("ye", s)
    s = re.compile("ᅪ", re.MULTILINE).sub("wa", s)
    s = re.compile("ᅫ", re.MULTILINE).sub("wae", s)
    s = re.compile("ᅬ", re.MULTILINE).sub("oe", s)
    s = re.compile("ᅰ", re.MULTILINE).sub("we", s)
    s = re.compile("ᅯ", re.MULTILINE).sub("wo’", s)
    s = re.compile("ᅱ", re.MULTILINE).sub("wi", s)
    s = re.compile("ᅴ", re.MULTILINE).sub("ui", s)
    s = re.compile("(?<=(?:"+interscript.stdlib.aliases["line_start"]+"|\\ ))\\-", re.MULTILINE).sub("", s)
    s = re.compile(""+interscript.stdlib.aliases["line_start"]+"("+interscript.stdlib.get_alias_re("odni-kor-Hang-Latn-2015", "alpha_plus")+"+)\\-("+interscript.stdlib.get_alias_re("odni-kor-Hang-Latn-2015", "alpha_plus")+"+)", re.MULTILINE).sub("\\1"+"\\2", s)
    s = re.compile(""+interscript.stdlib.aliases["line_start"]+"i", re.MULTILINE).sub("yi", s)
    s = interscript.functions.title_case(s, {})
    return s

interscript.stdlib.add_map_stage("odni-kor-Hang-Latn-2015", "main", _stage_main)
_PTREE_3737008790951801684 = {}
