import interscript
import regex as re
interscript.stdlib.define_map("un-ell-Grek-Latn-1987-phonetic")
def _stage_main(s):
    s = re.compile("(?<=[ΑαΕεΗη])Υ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("f", s)
    s = re.compile("(?<=[ΑαΕεΗη])Υ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("f", s)
    s = re.compile("(?<=[ΑαΕεΗη])υ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("f", s)
    s = re.compile("(?<=[ΑαΕεΗη])υ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("f", s)
    s = re.compile("(?<=[ΑαΕεΗη])Υ", re.MULTILINE).sub("v", s)
    s = re.compile("(?<=[ΑαΕεΗη])υ", re.MULTILINE).sub("v", s)
    s = re.compile("Αύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("ɑf", s)
    s = re.compile("Αύ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("ɑf", s)
    s = re.compile("Αύ", re.MULTILINE).sub("ɑv", s)
    s = re.compile("αύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("ɑf", s)
    s = re.compile("αύ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("ɑf", s)
    s = re.compile("αύ", re.MULTILINE).sub("ɑv", s)
    s = re.compile("Εύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("ɛf", s)
    s = re.compile("Εύ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("ɛf", s)
    s = re.compile("Εύ", re.MULTILINE).sub("ɛv", s)
    s = re.compile("εύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("ɛf", s)
    s = re.compile("εύ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("ɛf", s)
    s = re.compile("εύ", re.MULTILINE).sub("ɛv", s)
    s = re.compile("Ηύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("if", s)
    s = re.compile("Ηύ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("if", s)
    s = re.compile("Ηύ", re.MULTILINE).sub("iv", s)
    s = re.compile("ηύ(?=[θΘκΚξΞπΠσΣςτΤφΦχΧψΨ])", re.MULTILINE).sub("if", s)
    s = re.compile("ηύ(?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("if", s)
    s = re.compile("ηύ", re.MULTILINE).sub("iv", s)
    s = re.compile("Ο[υΥύ]", re.MULTILINE).sub("u", s)
    s = re.compile("ο[υΥύ]", re.MULTILINE).sub("u", s)
    s = re.compile("(?<=[ΆάΈέΉήΌό])Υ", re.MULTILINE).sub("i", s)
    s = re.compile("(?<=[ΆάΈέΉήΌό])υ", re.MULTILINE).sub("i", s)
    s = re.compile("Γ(?=[ξΞχΧ])", re.MULTILINE).sub("n", s)
    s = re.compile("γ(?=[ξΞχΧ])", re.MULTILINE).sub("n", s)
    s = re.compile("(?<!"+interscript.stdlib.aliases["boundary"]+")Γ[Γγ]", re.MULTILINE).sub("ŋɡ", s)
    s = re.compile("(?<!"+interscript.stdlib.aliases["boundary"]+")γγ", re.MULTILINE).sub("ŋɡ", s)
    s = re.compile("(?<!"+interscript.stdlib.aliases["boundary"]+")Γ[Κκ]", re.MULTILINE).sub("ŋɡ", s)
    s = re.compile("(?<!"+interscript.stdlib.aliases["boundary"]+")γ[Κκ]", re.MULTILINE).sub("ŋɡ", s)
    s = re.compile("(?<="+interscript.stdlib.aliases["boundary"]+")Γ[Γγ]", re.MULTILINE).sub("ɡ", s)
    s = re.compile("(?<="+interscript.stdlib.aliases["boundary"]+")γγ", re.MULTILINE).sub("ɡ", s)
    s = re.compile("(?<="+interscript.stdlib.aliases["boundary"]+")Γ[Κκ]", re.MULTILINE).sub("ɡ", s)
    s = re.compile("(?<="+interscript.stdlib.aliases["boundary"]+")γ[Κκ]", re.MULTILINE).sub("ɡ", s)
    s = re.compile("(?<="+interscript.stdlib.aliases["boundary"]+")Μ[πΠ]", re.MULTILINE).sub("b", s)
    s = re.compile("(?<="+interscript.stdlib.aliases["boundary"]+")μ[πΠ]", re.MULTILINE).sub("b", s)
    s = re.compile("Μ[πΠ](?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("b", s)
    s = re.compile("μ[πΠ](?="+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("b", s)
    s = re.compile("(?<!"+interscript.stdlib.aliases["boundary"]+")Μ[πΠ](?!"+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("mb", s)
    s = re.compile("(?<!"+interscript.stdlib.aliases["boundary"]+")μ[πΠ](?!"+interscript.stdlib.aliases["boundary"]+")", re.MULTILINE).sub("mb", s)
    s = re.compile("(?<="+interscript.stdlib.aliases["boundary"]+")[Νν][ττ]", re.MULTILINE).sub("d", s)
    s = re.compile("(?<!"+interscript.stdlib.aliases["boundary"]+")[Νν][ττ]", re.MULTILINE).sub("nd", s)
    s = re.compile("Σ(?=[ΒβΓγΔδΖζΛλΜμΝνΡρ])", re.MULTILINE).sub("z", s)
    s = re.compile("σ(?=[ΒβΓγΔδΖζΛλΜμΝνΡρ])", re.MULTILINE).sub("z", s)
    s = re.compile("Α[Ιιί]", re.MULTILINE).sub("ɛ", s)
    s = re.compile("α[Ιιί]", re.MULTILINE).sub("ɛ", s)
    s = re.compile("Υ[Ιιί]", re.MULTILINE).sub("i", s)
    s = re.compile("υ[Ιιί]", re.MULTILINE).sub("i", s)
    s = re.compile("Ε[Ιιί]", re.MULTILINE).sub("i", s)
    s = re.compile("ε[Ιιί]", re.MULTILINE).sub("i", s)
    s = re.compile("Ο[Ιιί]", re.MULTILINE).sub("i", s)
    s = re.compile("ο[Ιιί]", re.MULTILINE).sub("i", s)
    s = re.compile("Τ[ζΖ]", re.MULTILINE).sub("dz", s)
    s = re.compile("τ[ζΖ]", re.MULTILINE).sub("dz", s)
    s = re.compile(";", re.MULTILINE).sub("?", s)
    s = re.compile(";", re.MULTILINE).sub("?", s)
    s = interscript.stdlib.parallel_replace_tree(s, _PTREE_1817046419008578076)
    s = re.compile("vv", re.MULTILINE).sub("v", s)
    s = re.compile("ðð", re.MULTILINE).sub("ð", s)
    s = re.compile("zz", re.MULTILINE).sub("z", s)
    s = re.compile("θθ", re.MULTILINE).sub("θ", s)
    s = re.compile("kk", re.MULTILINE).sub("k", s)
    s = re.compile("ll", re.MULTILINE).sub("l", s)
    s = re.compile("mm", re.MULTILINE).sub("m", s)
    s = re.compile("nn", re.MULTILINE).sub("n", s)
    s = re.compile("pp", re.MULTILINE).sub("p", s)
    s = re.compile("rr", re.MULTILINE).sub("r", s)
    s = re.compile("ss", re.MULTILINE).sub("s", s)
    s = re.compile("tt", re.MULTILINE).sub("t", s)
    s = re.compile("ff", re.MULTILINE).sub("f", s)
    s = re.compile("xx", re.MULTILINE).sub("x", s)
    s = interscript.functions.downcase(s, {})
    return s

interscript.stdlib.add_map_stage("un-ell-Grek-Latn-1987-phonetic", "main", _stage_main)
_PTREE_1817046419008578076 = {39:{None:""},902:{None:"ɑ"},913:{None:"ɑ"},914:{None:"v"},915:{None:"ɣ"},916:{None:"ð"},917:{None:"ɛ",938:{None:"ɛi"},970:{None:"ɛi"}},904:{970:{None:"ɛi"},None:"ɛ"},918:{None:"z"},919:{None:"i"},920:{None:"θ"},921:{None:"i"},922:{None:"k"},923:{None:"l"},924:{None:"m"},925:{None:"n"},926:{None:"ks"},927:{None:"o"},928:{None:"p"},929:{None:"r"},931:{None:"s"},932:{None:"t"},933:{None:"i"},934:{None:"f"},935:{None:"x"},936:{None:"ps"},937:{None:"o"},905:{None:"i"},906:{None:"i"},908:{None:"o"},910:{None:"i"},911:{None:"o"},938:{None:"i"},939:{None:"i"},940:{None:"ɑ"},945:{None:"ɑ"},946:{None:"v"},947:{None:"ɣ"},948:{None:"ð"},949:{None:"ɛ",970:{None:"ɛi"}},941:{970:{None:"ɛi"},953:{None:"ɛi"},None:"ɛ"},950:{None:"z"},951:{None:"i"},953:{None:"i"},954:{None:"k"},955:{None:"l"},956:{None:"m"},957:{None:"n"},958:{None:"ks"},959:{None:"o"},960:{None:"p"},961:{None:"r"},963:{None:"s"},962:{None:"s"},964:{None:"t"},965:{None:"i"},966:{None:"f"},967:{None:"x"},968:{None:"ps"},969:{None:"o"},942:{None:"i"},943:{None:"i"},972:{None:"o"},973:{None:"i"},974:{None:"o"},970:{None:"i"},971:{None:"i"},912:{None:"i"},944:{None:"i"},903:{None:";"},183:{None:";"}}
