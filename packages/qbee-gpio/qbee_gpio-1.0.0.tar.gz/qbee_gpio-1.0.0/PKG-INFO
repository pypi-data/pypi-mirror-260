Metadata-Version: 2.1
Name: qbee-gpio
Version: 1.0.0
Summary: Control an LCD display and amplifier relay for use in an AirPlay Raspberry Pi server.
Home-page: https://github.com/gpajot/qbee-gpio
License: MIT
Author: Gabriel Pajot
Author-email: gab@lescactus.eu
Requires-Python: >=3.8
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: asyncinotify (>=4.0,<4.1) ; python_version < "4"
Requires-Dist: concurrent-tasks (>=1.7,<2)
Requires-Dist: zenconfig[attrs,yaml] (>=2.1.0,<3)
Project-URL: Repository, https://github.com/gpajot/qbee-gpio
Description-Content-Type: text/markdown

# QBee gpio controller

A python script to control an LCD and amplifier relay for use in an AirPlay Raspberry Pi server.

* Detect sound ouput and turn on the amplifier power supply.
* Get the track information and display it on an LCD (using a fifo pipe exposed by [shairport-sync](https://github.com/mikebrady/shairport-sync)).
* Auto turn off amplifier power supply and/or shutdown after set period of inactivity.


## Usage

`python -m pip install --user qbee-gpio`

For first time usage: `~/.local/bin/qbee --init-config` then change what you need in `.qbee.yaml`.

For starting up automatically, create `/etc/systemd/system/qbee.service` file with (adjust users/paths):
```
[Unit]
Description=Qbee
After=network-online.target
StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=qbee
Group=qbee
ExecStart=/home/qbee/.local/bin/qbee
Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target
```
Then run:
```shell
sudo systemctl enable qbee
sudo systemctl start qbee
```

