# coding: utf-8

"""
    WEM

    WEM Application API Documentation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ApontamentosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def appointmentDelete(self, appointment_id, **kwargs):  # noqa: E501
        """Deletar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentDelete(appointment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appointment_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointmentDeleteHttp(appointment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.appointmentDeleteHttp(appointment_id, **kwargs)  # noqa: E501
            return data

    def appointmentDeleteHttp(self, appointment_id, **kwargs):  # noqa: E501
        """Deletar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentDeleteHttp(appointment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appointment_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appointment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointmentDelete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appointment_id' is set
        if ('appointment_id' not in params or
                params['appointment_id'] is None):
            raise ValueError("Missing the required parameter `appointment_id` when calling `appointmentDelete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appointment_id' in params:
            path_params['appointment_id'] = params['appointment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/api/v2/appointment/{appointment_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointmentPatch(self, appointment_id, **kwargs):  # noqa: E501
        """Editar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentPatch(appointment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appointment_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointmentPatchHttp(appointment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.appointmentPatchHttp(appointment_id, **kwargs)  # noqa: E501
            return data

    def appointmentPatchHttp(self, appointment_id, **kwargs):  # noqa: E501
        """Editar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentPatchHttp(appointment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appointment_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appointment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointmentPatch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appointment_id' is set
        if ('appointment_id' not in params or
                params['appointment_id'] is None):
            raise ValueError("Missing the required parameter `appointment_id` when calling `appointmentPatch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appointment_id' in params:
            path_params['appointment_id'] = params['appointment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/api/v2/appointment/{appointment_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointmentPost(self, **kwargs):  # noqa: E501
        """Criar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentPost(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointmentPostHttp(**kwargs)  # noqa: E501
        else:
            (data) = self.appointmentPostHttp(**kwargs)  # noqa: E501
            return data

    def appointmentPostHttp(self, **kwargs):  # noqa: E501
        """Criar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentPostHttp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointmentPost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/api/v2/appointment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointmentQuery(self, **kwargs):  # noqa: E501
        """Buscar apontamentos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentQuery(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointmentQueryHttp(**kwargs)  # noqa: E501
        else:
            (data) = self.appointmentQueryHttp(**kwargs)  # noqa: E501
            return data

    def appointmentQueryHttp(self, **kwargs):  # noqa: E501
        """Buscar apontamentos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointmentQueryHttp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointmentQuery" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/api/v2/appointment/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exchange_api_v2_appointment_status_appointment_id_patch(self, appointment_id, **kwargs):  # noqa: E501
        """Aprovar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_api_v2_appointment_status_appointment_id_patch(appointment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appointment_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exchange_api_v2_appointment_status_appointment_id_patchHttp(appointment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.exchange_api_v2_appointment_status_appointment_id_patchHttp(appointment_id, **kwargs)  # noqa: E501
            return data

    def exchange_api_v2_appointment_status_appointment_id_patchHttp(self, appointment_id, **kwargs):  # noqa: E501
        """Aprovar apontamento  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exchange_api_v2_appointment_status_appointment_id_patchHttp(appointment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appointment_id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appointment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_api_v2_appointment_status_appointment_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appointment_id' is set
        if ('appointment_id' not in params or
                params['appointment_id'] is None):
            raise ValueError("Missing the required parameter `appointment_id` when calling `exchange_api_v2_appointment_status_appointment_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appointment_id' in params:
            path_params['appointment_id'] = params['appointment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/exchange/api/v2/appointment/status/{appointment_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
