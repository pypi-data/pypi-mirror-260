# coding: utf-8

"""
    Aioli API (MVP)

    *Aioli* is the AI On-line Inference Platform that enables easy deployment, tracking, and serving of your trained models regardless of your preferred AI framework.

    The version of the OpenAPI document: 0.1
    Contact: community@determined-ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from aiolirest.models.deployment_state import DeploymentState
from aiolirest.models.security import Security
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Deployment(BaseModel):
    """
    Deployment describes the deployment of a service.
    """ # noqa: E501
    cluster_name: Optional[StrictStr] = Field(default=None, description="Name of the cluster.", alias="clusterName")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the deployment. This is a read-only property and is automatically assigned on creation.")
    modified_at: Optional[StrictStr] = Field(default=None, description="Date-time of last modification of the deployment. This is a read-only field and is automatically updated.", alias="modifiedAt")
    name: StrictStr = Field(description="The deployment name.  Must begin with a letter, but may contain letters, numbers, underscore, and hyphen.")
    namespace: Optional[StrictStr] = Field(default=None, description="The Kubernetes namespace to be used for the deployment.")
    secondary_state: Optional[DeploymentState] = Field(default=None, alias="secondaryState")
    security: Optional[Security] = None
    service: StrictStr = Field(description="Service name or ID to be deployed.")
    state: Optional[DeploymentState] = None
    status: Optional[StrictStr] = Field(default=None, description="Summary status of the deployed service. * Deploying - Service configuration is in progress. * Failed - The service configuration failed. * Ready - The service has been successfully configured and is serving. * Updating - A new service revision is being rolledout. * UpdateFailed - The current service revision failed to rollout due to an error.   The prior version is still serving requests. * Deleting - The deployed service is being removed. * Unknown - Unable to determined the status. This is a read-only property.")
    __properties: ClassVar[List[str]] = ["clusterName", "id", "modifiedAt", "name", "namespace", "secondaryState", "security", "service", "state", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Deploying', 'Ready', 'Updating', 'UpdateFailed', 'Failed', 'Deleting', 'Unknown'):
            raise ValueError("must be one of enum values ('Deploying', 'Ready', 'Updating', 'UpdateFailed', 'Failed', 'Deleting', 'Unknown')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Deployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of secondary_state
        if self.secondary_state:
            _dict['secondaryState'] = self.secondary_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security
        if self.security:
            _dict['security'] = self.security.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Deployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterName": obj.get("clusterName"),
            "id": obj.get("id"),
            "modifiedAt": obj.get("modifiedAt"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "secondaryState": DeploymentState.from_dict(obj.get("secondaryState")) if obj.get("secondaryState") is not None else None,
            "security": Security.from_dict(obj.get("security")) if obj.get("security") is not None else None,
            "service": obj.get("service"),
            "state": DeploymentState.from_dict(obj.get("state")) if obj.get("state") is not None else None,
            "status": obj.get("status")
        })
        return _obj


