# coding: utf-8

"""
    Aioli API (MVP)

    *Aioli* is the AI On-line Inference Platform that enables easy deployment, tracking, and serving of your trained models regardless of your preferred AI framework.

    The version of the OpenAPI document: 0.1
    Contact: community@determined-ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TrainedModel(BaseModel):
    """
    The TrainedModel describes a specific model that can be loaded. It optionally references a model registry to provide authorization, and other details.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="A description of the model.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the model.  This is a read-only field and is automatically assigned on creation.")
    image: StrictStr = Field(description="Docker container image servicing the model.")
    modified_at: Optional[StrictStr] = Field(default=None, description="Date-time of last modification of the model. This is a read-only field and is automatically updated.", alias="modifiedAt")
    name: StrictStr = Field(description="The name of the model.  Must begin with a letter, but may contain letters, numbers, underscore, and hyphen.")
    registry: Optional[StrictStr] = Field(default=None, description="The name or ID of the model registry.")
    url: Optional[StrictStr] = Field(default=None, description="Reference to the bento or model to be served.  Supported schemes are: * openllm:// - An openllm model name from huggingface.co dynamically loaded and executed with a VLLM backend. * openllm-cpu:// - An openllm model from huggingface.co dynamically loaded and executed in a CPU-only container with pt backend. * s3:// - An openllm model path which will be dynamically downloaded from an associated s3 registry bucket and executed with a VLLM backend. * cpus3:// - An openllm model path which will be dynamically downloaded from an associated s3 registry bucket and executed in a CPU-only container.")
    version: Optional[StrictInt] = Field(default=None, description="The version of the model.  This is a read-only field and is automatically assigned on creation.")
    __properties: ClassVar[List[str]] = ["description", "id", "image", "modifiedAt", "name", "registry", "url", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TrainedModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TrainedModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "image": obj.get("image"),
            "modifiedAt": obj.get("modifiedAt"),
            "name": obj.get("name"),
            "registry": obj.get("registry"),
            "url": obj.get("url"),
            "version": obj.get("version")
        })
        return _obj


