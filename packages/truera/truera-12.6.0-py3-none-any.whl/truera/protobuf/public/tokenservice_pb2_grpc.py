# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from truera.protobuf.public import tokenservice_pb2 as truera_dot_protobuf_dot_public_dot_tokenservice__pb2


class TokenServiceStub(object):
    """Right now, this service is along side artifact repo, but it should be separable
    as long as they can share a secret for encoding and decoding. This allows us to
    patch grpc for artifact repo's other rpcs through kong without authN taking place
    and have artifact repo check the token is valid.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserToken = channel.unary_unary(
                '/truera.tokens.TokenService/GetUserToken',
                request_serializer=truera_dot_protobuf_dot_public_dot_tokenservice__pb2.GetUserTokenRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_tokenservice__pb2.GetUserTokenRequestResponse.FromString,
                )


class TokenServiceServicer(object):
    """Right now, this service is along side artifact repo, but it should be separable
    as long as they can share a secret for encoding and decoding. This allows us to
    patch grpc for artifact repo's other rpcs through kong without authN taking place
    and have artifact repo check the token is valid.
    """

    def GetUserToken(self, request, context):
        """This RPC allows users to generate authentication tokens. This RPC must be called
        from a context where they are authenticated via a non-token mechanism (typically
        from gui using grpc-web and kong). The generated tokens can be used in scenarios
        where other authentication mechanism cant be used (e.g. CLI communication over
        binary grpc protocol).
        See design doc for more details:
        https://docs.google.com/document/d/10rRvRYYbRTGaxp2SnP52mPzOeDRUqdrxgm34d3ndTAQ/edit#
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserToken,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_tokenservice__pb2.GetUserTokenRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_tokenservice__pb2.GetUserTokenRequestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'truera.tokens.TokenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TokenService(object):
    """Right now, this service is along side artifact repo, but it should be separable
    as long as they can share a secret for encoding and decoding. This allows us to
    patch grpc for artifact repo's other rpcs through kong without authN taking place
    and have artifact repo check the token is valid.
    """

    @staticmethod
    def GetUserToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.tokens.TokenService/GetUserToken',
            truera_dot_protobuf_dot_public_dot_tokenservice__pb2.GetUserTokenRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_tokenservice__pb2.GetUserTokenRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
