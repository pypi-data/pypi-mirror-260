# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: truera/protobuf/public/data/filter.proto
# Protobuf Python Version: 4.25.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2
from protoc_gen_openapiv2.options import annotations_pb2 as protoc__gen__openapiv2_dot_options_dot_annotations__pb2
from truera.protobuf.public import truera_custom_options_pb2 as truera_dot_protobuf_dot_public_dot_truera__custom__options__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n(truera/protobuf/public/data/filter.proto\x12\x0btruera.data\x1a\x1cgoogle/protobuf/struct.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a\x32truera/protobuf/public/truera_custom_options.proto\"\xad\x02\n\x10\x46ilterExpression\x12.\n\x0b\x66ilter_leaf\x18\x01 \x01(\x0b\x32\x17.truera.data.FilterLeafH\x00\x12\x39\n\x08operator\x18\x02 \x01(\x0e\x32%.truera.data.FilterExpressionOperatorH\x00\x12\x36\n\x0fsub_expressions\x18\x03 \x03(\x0b\x32\x1d.truera.data.FilterExpression:m\x92\x41j\nh*\x10\x46ilterExpression2TFilter expression, is a tree of operators, where the leaves are FilterLeaf messages.B\x07\n\x05value\"\x92\x07\n\nFilterLeaf\x12?\n\nvalue_type\x18\x01 \x01(\x0e\x32+.truera.data.FilterLeaf.FilterLeafValueType\x12\x15\n\x0b\x63olumn_name\x18\x02 \x01(\tH\x00\x12\x19\n\x0fsegmentation_id\x18\x05 \x01(\tH\x00\x12\x14\n\nscore_type\x18\x06 \x01(\x05H\x00\x12\x10\n\x08model_id\x18\x07 \x01(\t\x12\x45\n\x0b\x66ilter_type\x18\x03 \x01(\x0e\x32\x30.truera.data.FilterLeaf.FilterLeafComparisonType\x12&\n\x06values\x18\x04 \x03(\x0b\x32\x16.google.protobuf.Value\x12;\n\rrange_options\x18\x08 \x01(\x0b\x32$.truera.data.FilterLeaf.RangeOptions\x1a\x38\n\x0cRangeOptions\x12\x13\n\x0blowerStrict\x18\x01 \x01(\x08\x12\x13\n\x0bupperStrict\x18\x02 \x01(\x08\"\x9e\x01\n\x13\x46ilterLeafValueType\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x10\n\x0c\x43OLUMN_VALUE\x10\x01\x12\n\n\x06OUTPUT\x10\x02\x12\x10\n\x0cGROUND_TRUTH\x10\x06\x12\x1c\n\x18GROUND_TRUTH_CONFORMANCE\x10\x03\x12\x0b\n\x07SEGMENT\x10\x04\x12\t\n\x05INDEX\x10\x05\x12\x14\n\x10RANKING_GROUP_ID\x10\x07\"\xee\x01\n\x18\x46ilterLeafComparisonType\x12$\n FilterLeafComparisonType_UNKNOWN\x10\x00\x12\n\n\x06\x45QUALS\x10\x01\x12\x0e\n\nNOT_EQUALS\x10\x02\x12\r\n\tLESS_THAN\x10\x03\x12\x16\n\x12LESS_THAN_EQUAL_TO\x10\x04\x12\x10\n\x0cGREATER_THAN\x10\x05\x12\x19\n\x15GREATER_THAN_EQUAL_TO\x10\x06\x12\x0b\n\x07IN_LIST\x10\x07\x12\x0f\n\x0bNOT_IN_LIST\x10\x08\x12\x0c\n\x08IN_RANGE\x10\t\x12\x10\n\x0cNOT_IN_RANGE\x10\n:_\x92\x41\\\nZ*\nFilterLeaf2LRepresents a simple single filter\n(e.g. `column_value[annual_inc] > 100000`)B\x10\n\x0evalue_metadata*M\n\x18\x46ilterExpressionOperator\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x0b\n\x07\x46\x45O_AND\x10\x01\x12\n\n\x06\x46\x45O_OR\x10\x02\x12\x0b\n\x07\x46\x45O_NOT\x10\x03\x42U\n\x18\x63om.truera.protobuf.dataB\x0b\x46ilterProtoP\x01Z&truera.com/protobuf/public/data/filter\x90\x82\x19\x01\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'truera.protobuf.public.data.filter_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\030com.truera.protobuf.dataB\013FilterProtoP\001Z&truera.com/protobuf/public/data/filter\220\202\031\001'
  _globals['_FILTEREXPRESSION']._options = None
  _globals['_FILTEREXPRESSION']._serialized_options = b'\222Aj\nh*\020FilterExpression2TFilter expression, is a tree of operators, where the leaves are FilterLeaf messages.'
  _globals['_FILTERLEAF']._options = None
  _globals['_FILTERLEAF']._serialized_options = b'\222A\\\nZ*\nFilterLeaf2LRepresents a simple single filter\n(e.g. `column_value[annual_inc] > 100000`)'
  _globals['_FILTEREXPRESSIONOPERATOR']._serialized_start=1408
  _globals['_FILTEREXPRESSIONOPERATOR']._serialized_end=1485
  _globals['_FILTEREXPRESSION']._serialized_start=188
  _globals['_FILTEREXPRESSION']._serialized_end=489
  _globals['_FILTERLEAF']._serialized_start=492
  _globals['_FILTERLEAF']._serialized_end=1406
  _globals['_FILTERLEAF_RANGEOPTIONS']._serialized_start=833
  _globals['_FILTERLEAF_RANGEOPTIONS']._serialized_end=889
  _globals['_FILTERLEAF_FILTERLEAFVALUETYPE']._serialized_start=892
  _globals['_FILTERLEAF_FILTERLEAFVALUETYPE']._serialized_end=1050
  _globals['_FILTERLEAF_FILTERLEAFCOMPARISONTYPE']._serialized_start=1053
  _globals['_FILTERLEAF_FILTERLEAFCOMPARISONTYPE']._serialized_end=1291
# @@protoc_insertion_point(module_scope)
