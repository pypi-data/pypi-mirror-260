# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from truera.protobuf.queryservice import query_service_pb2 as truera_dot_protobuf_dot_queryservice_dot_query__service__pb2


class QueryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.query = channel.unary_stream(
                '/truera.query.service.QueryService/query',
                request_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.QueryRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.QueryResponse.FromString,
                )
        self.BatchQuery = channel.unary_stream(
                '/truera.query.service.QueryService/BatchQuery',
                request_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.BatchQueryRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.BatchQueryResponse.FromString,
                )
        self.accuracy = channel.unary_unary(
                '/truera.query.service.QueryService/accuracy',
                request_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.AccuracyRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.AccuracyResponse.FromString,
                )
        self.echo = channel.unary_unary(
                '/truera.query.service.QueryService/echo',
                request_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.EchoRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.EchoResponse.FromString,
                )


class QueryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchQuery(self, request, context):
        """
        batching request that fetch almost same data, in optimised manner.
        For example:
        Fetching Predictions with segment s1 and fetching predictions with segment s2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def accuracy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def echo(self, request, context):
        """this is a test/example rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'query': grpc.unary_stream_rpc_method_handler(
                    servicer.query,
                    request_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.QueryRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.QueryResponse.SerializeToString,
            ),
            'BatchQuery': grpc.unary_stream_rpc_method_handler(
                    servicer.BatchQuery,
                    request_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.BatchQueryRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.BatchQueryResponse.SerializeToString,
            ),
            'accuracy': grpc.unary_unary_rpc_method_handler(
                    servicer.accuracy,
                    request_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.AccuracyRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.AccuracyResponse.SerializeToString,
            ),
            'echo': grpc.unary_unary_rpc_method_handler(
                    servicer.echo,
                    request_deserializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.EchoRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.EchoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'truera.query.service.QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/truera.query.service.QueryService/query',
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.QueryRequest.SerializeToString,
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.QueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/truera.query.service.QueryService/BatchQuery',
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.BatchQueryRequest.SerializeToString,
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.BatchQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def accuracy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.query.service.QueryService/accuracy',
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.AccuracyRequest.SerializeToString,
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.AccuracyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.query.service.QueryService/echo',
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.EchoRequest.SerializeToString,
            truera_dot_protobuf_dot_queryservice_dot_query__service__pb2.EchoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
