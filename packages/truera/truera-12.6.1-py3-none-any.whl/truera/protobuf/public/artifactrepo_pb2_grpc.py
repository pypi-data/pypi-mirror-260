# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from truera.protobuf.public import artifactrepo_pb2 as truera_dot_protobuf_dot_public_dot_artifactrepo__pb2


class ArtifactRepoServiceStub(object):
    """The artifact repo service is used to manage user provided artifacts (models, data, documentation, etc.)
    It does this by allowing a client to upload data and metadata via the following RPCs.

    Artifact repo service RPCs can be broken into 2 categories, those that deal with resources (data)
    and those that deal with metadata. "Resources" from the artifact repo service's point of view are
    just files. The only thing separating them from each other is "ArtifactType" which only 
    determines the path under the project where they are put. Otherwise the treatment is the same
    For example, models are put under the directory
    <project id>/models/
    while splits are put under
    <project id>/splits/<data collection id>/<split name>. 

    The APIs for manipulating resources are PutResource, GetResource, DeleteResource, and ResourceExists.

    The other group of APIs are for manipulating metadata and they follow the same naming scheme.
    The RPCs are unified in that the same RPC is used for all kinds of metadata. For example,
    PutMetadata can be used for Projects, Models, Data Collections, Splits, and Feature Lists, 
    data sources, and credentials.

    The expected programming model when adding new data and metadata from the client's perspective is
    to add data, then metadata since the latter should be much faster and other parts of the system
    may react once metadata is present. For deleting the reverse path should be taken.

    When trying to enumerate some kind of artifact (projects, models, splits etc.) there is the
    GetAllMetadataForResource RPC, which allows for scoping to the kind of artifact in question and
    returns names and IDs only. For more details, make additional calls to the GetMetadataForEntity
    RPC for each. The fields that should be set for GetAllMetadata are described with the definition
    of the request. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/truera.ArtifactRepoService/Ping',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PingRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PingRequestResponse.FromString,
                )
        self.GetAllowedOperations = channel.unary_unary(
                '/truera.ArtifactRepoService/GetAllowedOperations',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllowedOperationsRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllowedOperationsResponse.FromString,
                )
        self.PutResource = channel.stream_unary(
                '/truera.ArtifactRepoService/PutResource',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutRequestResponse.FromString,
                )
        self.PutMetadata = channel.unary_unary(
                '/truera.ArtifactRepoService/PutMetadata',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutMetadataRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutMetadataRequestResponse.FromString,
                )
        self.PutTimerangeSplitMetadata = channel.unary_unary(
                '/truera.ArtifactRepoService/PutTimerangeSplitMetadata',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutTimerangeSplitMetadataRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutTimerangeSplitMetadataResponse.FromString,
                )
        self.ResourceExists = channel.unary_unary(
                '/truera.ArtifactRepoService/ResourceExists',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.ExistsRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.ExistsRequestResponse.FromString,
                )
        self.GetResource = channel.unary_stream(
                '/truera.ArtifactRepoService/GetResource',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetRequestResponse.FromString,
                )
        self.GetMetadataForEntity = channel.unary_unary(
                '/truera.ArtifactRepoService/GetMetadataForEntity',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetMetadataForEntityRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetMetadataForEntityRequestResponse.FromString,
                )
        self.GetSplits = channel.unary_unary(
                '/truera.ArtifactRepoService/GetSplits',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetSplitsRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetSplitsResponse.FromString,
                )
        self.GetDataCollections = channel.unary_unary(
                '/truera.ArtifactRepoService/GetDataCollections',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetDataCollectionsRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetDataCollectionsResponse.FromString,
                )
        self.GetModels = channel.unary_unary(
                '/truera.ArtifactRepoService/GetModels',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetModelsRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetModelsResponse.FromString,
                )
        self.GetFeedbackFunctions = channel.unary_unary(
                '/truera.ArtifactRepoService/GetFeedbackFunctions',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetFeedbackFunctionsRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetFeedbackFunctionsResponse.FromString,
                )
        self.GetAllMetadataForResource = channel.unary_unary(
                '/truera.ArtifactRepoService/GetAllMetadataForResource',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllMetadataRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllMetadataRequestResponse.FromString,
                )
        self.DeleteResource = channel.unary_unary(
                '/truera.ArtifactRepoService/DeleteResource',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteRequestResponse.FromString,
                )
        self.DeleteMetadata = channel.unary_unary(
                '/truera.ArtifactRepoService/DeleteMetadata',
                request_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteMetadataRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteMetadataRequestResponse.FromString,
                )


class ArtifactRepoServiceServicer(object):
    """The artifact repo service is used to manage user provided artifacts (models, data, documentation, etc.)
    It does this by allowing a client to upload data and metadata via the following RPCs.

    Artifact repo service RPCs can be broken into 2 categories, those that deal with resources (data)
    and those that deal with metadata. "Resources" from the artifact repo service's point of view are
    just files. The only thing separating them from each other is "ArtifactType" which only 
    determines the path under the project where they are put. Otherwise the treatment is the same
    For example, models are put under the directory
    <project id>/models/
    while splits are put under
    <project id>/splits/<data collection id>/<split name>. 

    The APIs for manipulating resources are PutResource, GetResource, DeleteResource, and ResourceExists.

    The other group of APIs are for manipulating metadata and they follow the same naming scheme.
    The RPCs are unified in that the same RPC is used for all kinds of metadata. For example,
    PutMetadata can be used for Projects, Models, Data Collections, Splits, and Feature Lists, 
    data sources, and credentials.

    The expected programming model when adding new data and metadata from the client's perspective is
    to add data, then metadata since the latter should be much faster and other parts of the system
    may react once metadata is present. For deleting the reverse path should be taken.

    When trying to enumerate some kind of artifact (projects, models, splits etc.) there is the
    GetAllMetadataForResource RPC, which allows for scoping to the kind of artifact in question and
    returns names and IDs only. For more details, make additional calls to the GetMetadataForEntity
    RPC for each. The fields that should be set for GetAllMetadata are described with the definition
    of the request. 
    """

    def Ping(self, request, context):
        """Helper function for testing connectivity without making changes or checking permissions on any
        particular project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllowedOperations(self, request, context):
        """Get the configuration for each type of operation in the artifact repo
        including get, add, and delete operations. The response includes whether
        each operation is 'ALLOWED' or 'NOT_ALLOWED' for each artifact type. The
        following artifact types are included: project, model, virtual_model,
        data_collection, datasplit, and documentation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutResource(self, request_iterator, context):
        """For each PutRequest in the stream of put requests, project_id,
        artifact_type, and artifact id should all be the same.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutTimerangeSplitMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResourceExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetadataForEntity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSplits(self, request, context):
        """Takes a list of either data collections or models and returns the most recent
        N splits for that data collection OR the data collection attached to that model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataCollections(self, request, context):
        """Takes a project returns the metadata for the data collections in that project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModels(self, request, context):
        """Takes a project returns the metadata for the models in that project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeedbackFunctions(self, request, context):
        """Takes a project returns the metadata for the models in that project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllMetadataForResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArtifactRepoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PingRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PingRequestResponse.SerializeToString,
            ),
            'GetAllowedOperations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllowedOperations,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllowedOperationsRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllowedOperationsResponse.SerializeToString,
            ),
            'PutResource': grpc.stream_unary_rpc_method_handler(
                    servicer.PutResource,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutRequestResponse.SerializeToString,
            ),
            'PutMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.PutMetadata,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutMetadataRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutMetadataRequestResponse.SerializeToString,
            ),
            'PutTimerangeSplitMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.PutTimerangeSplitMetadata,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutTimerangeSplitMetadataRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutTimerangeSplitMetadataResponse.SerializeToString,
            ),
            'ResourceExists': grpc.unary_unary_rpc_method_handler(
                    servicer.ResourceExists,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.ExistsRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.ExistsRequestResponse.SerializeToString,
            ),
            'GetResource': grpc.unary_stream_rpc_method_handler(
                    servicer.GetResource,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetRequestResponse.SerializeToString,
            ),
            'GetMetadataForEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetadataForEntity,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetMetadataForEntityRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetMetadataForEntityRequestResponse.SerializeToString,
            ),
            'GetSplits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSplits,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetSplitsRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetSplitsResponse.SerializeToString,
            ),
            'GetDataCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataCollections,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetDataCollectionsRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetDataCollectionsResponse.SerializeToString,
            ),
            'GetModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModels,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetModelsRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetModelsResponse.SerializeToString,
            ),
            'GetFeedbackFunctions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeedbackFunctions,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetFeedbackFunctionsRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetFeedbackFunctionsResponse.SerializeToString,
            ),
            'GetAllMetadataForResource': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllMetadataForResource,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllMetadataRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllMetadataRequestResponse.SerializeToString,
            ),
            'DeleteResource': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteResource,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteRequestResponse.SerializeToString,
            ),
            'DeleteMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMetadata,
                    request_deserializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteMetadataRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteMetadataRequestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'truera.ArtifactRepoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArtifactRepoService(object):
    """The artifact repo service is used to manage user provided artifacts (models, data, documentation, etc.)
    It does this by allowing a client to upload data and metadata via the following RPCs.

    Artifact repo service RPCs can be broken into 2 categories, those that deal with resources (data)
    and those that deal with metadata. "Resources" from the artifact repo service's point of view are
    just files. The only thing separating them from each other is "ArtifactType" which only 
    determines the path under the project where they are put. Otherwise the treatment is the same
    For example, models are put under the directory
    <project id>/models/
    while splits are put under
    <project id>/splits/<data collection id>/<split name>. 

    The APIs for manipulating resources are PutResource, GetResource, DeleteResource, and ResourceExists.

    The other group of APIs are for manipulating metadata and they follow the same naming scheme.
    The RPCs are unified in that the same RPC is used for all kinds of metadata. For example,
    PutMetadata can be used for Projects, Models, Data Collections, Splits, and Feature Lists, 
    data sources, and credentials.

    The expected programming model when adding new data and metadata from the client's perspective is
    to add data, then metadata since the latter should be much faster and other parts of the system
    may react once metadata is present. For deleting the reverse path should be taken.

    When trying to enumerate some kind of artifact (projects, models, splits etc.) there is the
    GetAllMetadataForResource RPC, which allows for scoping to the kind of artifact in question and
    returns names and IDs only. For more details, make additional calls to the GetMetadataForEntity
    RPC for each. The fields that should be set for GetAllMetadata are described with the definition
    of the request. 
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/Ping',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PingRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PingRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllowedOperations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/GetAllowedOperations',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllowedOperationsRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllowedOperationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutResource(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/truera.ArtifactRepoService/PutResource',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/PutMetadata',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutMetadataRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutMetadataRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutTimerangeSplitMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/PutTimerangeSplitMetadata',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutTimerangeSplitMetadataRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.PutTimerangeSplitMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResourceExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/ResourceExists',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.ExistsRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.ExistsRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/truera.ArtifactRepoService/GetResource',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetadataForEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/GetMetadataForEntity',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetMetadataForEntityRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetMetadataForEntityRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSplits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/GetSplits',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetSplitsRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetSplitsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/GetDataCollections',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetDataCollectionsRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetDataCollectionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/GetModels',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetModelsRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFeedbackFunctions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/GetFeedbackFunctions',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetFeedbackFunctionsRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetFeedbackFunctionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllMetadataForResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/GetAllMetadataForResource',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllMetadataRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.GetAllMetadataRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/DeleteResource',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.ArtifactRepoService/DeleteMetadata',
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteMetadataRequest.SerializeToString,
            truera_dot_protobuf_dot_public_dot_artifactrepo__pb2.DeleteMetadataRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
