# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from truera.protobuf.monitoring import monitoring_control_plane_pb2 as truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2


class MonitoringControlPlaneStub(object):
    """Service for manually running druid commands - these can be used for prototyping, fixing integ 
    or prod issues, or in the future for management of tables. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateIngestion = channel.unary_unary(
                '/truera.monitoring.MonitoringControlPlane/CreateIngestion',
                request_serializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionResponse.FromString,
                )
        self.ListDruidTables = channel.unary_unary(
                '/truera.monitoring.MonitoringControlPlane/ListDruidTables',
                request_serializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.ListDruidTablesRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.ListDruidTablesResponse.FromString,
                )
        self.CreateIngestionForTopic = channel.unary_unary(
                '/truera.monitoring.MonitoringControlPlane/CreateIngestionForTopic',
                request_serializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionForTopicRequest.SerializeToString,
                response_deserializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionForTopicResponse.FromString,
                )


class MonitoringControlPlaneServicer(object):
    """Service for manually running druid commands - these can be used for prototyping, fixing integ 
    or prod issues, or in the future for management of tables. 
    """

    def CreateIngestion(self, request, context):
        """Create a table and druid ingestion spec. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDruidTables(self, request, context):
        """Lists all druid tables for a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIngestionForTopic(self, request, context):
        """Generate and submit ingestion spec for a given Kafka data locator
        Note: this RPC is only meant for use in conjunction with the Kafka-Druid E2E tests.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitoringControlPlaneServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateIngestion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIngestion,
                    request_deserializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionResponse.SerializeToString,
            ),
            'ListDruidTables': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDruidTables,
                    request_deserializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.ListDruidTablesRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.ListDruidTablesResponse.SerializeToString,
            ),
            'CreateIngestionForTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIngestionForTopic,
                    request_deserializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionForTopicRequest.FromString,
                    response_serializer=truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionForTopicResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'truera.monitoring.MonitoringControlPlane', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitoringControlPlane(object):
    """Service for manually running druid commands - these can be used for prototyping, fixing integ 
    or prod issues, or in the future for management of tables. 
    """

    @staticmethod
    def CreateIngestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.monitoring.MonitoringControlPlane/CreateIngestion',
            truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionRequest.SerializeToString,
            truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDruidTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.monitoring.MonitoringControlPlane/ListDruidTables',
            truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.ListDruidTablesRequest.SerializeToString,
            truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.ListDruidTablesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIngestionForTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/truera.monitoring.MonitoringControlPlane/CreateIngestionForTopic',
            truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionForTopicRequest.SerializeToString,
            truera_dot_protobuf_dot_monitoring_dot_monitoring__control__plane__pb2.CreateIngestionForTopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
