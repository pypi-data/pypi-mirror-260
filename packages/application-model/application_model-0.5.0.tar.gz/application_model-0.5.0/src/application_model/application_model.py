
import warnings
warnings.filterwarnings('ignore')

import pickle
import pandas as pd
from importlib import resources

from application_model.featurization.new_features import (
    generate_occupation_group, encode_zip_code
)


def generate_application_score(payload):
    """Generate score from ume application model.

    Parameters
    ----------
    payload : dict
        Input data in json format.

    Returns
    -------
    float
        Application score generated by sklearn.ensemble.HistGradientBoostingClassifier.

    Examples
    --------
    >>> payload = {
            "ume-profession":"COSTUREIRA",
            "ume-zipcode":69059192.0,
            "ume-age_on_application":63.0,
            "ume-segment":"MÃ³veis",
            "ume-retailer":"apa-moveis",
            "ume-state":"AMAZONAS",
            "bvsIncome-CLASSRENDAV2":6.0,
            "bvsIncome-RendaPresumida":1700.0,
            "bvsP5-Score":0.3009,
            "bvsSubP5-Fintechs":0.4499,
            "bvsSubP5-CartaoCredito":0.3950,
            "bvsSubP5-CreditoPessoal":0.4589,
            "bvsSubP5-VAR_MoveisEletrodomesticos":0.3379,
            "bvsSubP5-VAR_VestuarioAcessorios":0.2430,
            "bvsSubP5-FinancialmentoVeiculos":0.4199
        }
    >>> score = generate_application_score(json)
    """

    #json_to_dict = eval(payload)    
    if not isinstance(payload, dict):
        raise TypeError(
            'please pass a valide json!'
        )
    if len(payload.keys()) != 15:
        raise TypeError(
            'some attribute is missing! please check payload structure in documention!'
        )
    df = pd.DataFrame.from_dict([payload])

    # transform ume-profession in groups of profession based on regex
    if "ume-profession" in df.columns:
        df_professions = generate_occupation_group(df["ume-profession"].unique(), "ume-profession")
        df = pd.merge(df, df_professions, on="ume-profession", how="left")
        df.drop(columns=["ume-profession"], inplace=True)
    else:
        raise ValueError(
            'ume-profession column is missing!'
        )
    
    # encode zip code
    if "ume-zipcode" in df.columns:
        df_zipcodes = encode_zip_code(df[["ume-zipcode"]])
        df = pd.concat([df, df_zipcodes], axis=1)
        df.drop(columns=["ume-zipcode","ume-zipcode_regiao"], inplace=True)
    else:
        raise ValueError(
            'ume-zipcode column is missing!'
        )

    # load model pickled
    with resources.path("application_model.resources", "model.pkl") as path:
        #print(">>> ", path)
        with open(path, "rb") as file:
            model = pickle.load(file)

    # load data_processor pickle with model metadata
    with resources.path("application_model.resources", "data_processor.pkl") as path:
        #print(">>> ", path)
        with open(path, "rb") as file:
            dataprocessor = pickle.load(file)

    df_transformed = dataprocessor.transform(df)
    probas = model.predict_proba(df_transformed)

    return probas[0][1]