# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_nans.ipynb.

# %% auto 0
__all__ = ['none', 'pynan', 'pdna', 'npnan', 'nan', 'nanq', 'nans']

# %% ../nbs/04_nans.ipynb 6
# from math import nan as pynan

# %% ../nbs/04_nans.ipynb 8
#| export


# %% ../nbs/04_nans.ipynb 10
#| export


# %% ../nbs/04_nans.ipynb 12
from ptyp import Prototype, Not, Opt
from matr import nan as mathnan, pdna as pdNA, npnan as np_nan, npNaN, npNAN, ptnan, nparray, nonetype

# %% ../nbs/04_nans.ipynb 14
from .iter import itertype
from .bool import bools
from .nums import nums

# %% ../nbs/04_nans.ipynb 17
@Prototype(None, nonetype)
class none: '''`None` or `NoneType`'''

# %% ../nbs/04_nans.ipynb 20
@Prototype(mathnan)
class pynan: '''`math.nan`''';

@Prototype(pdNA)
class pdna: '''`pd.NA`''';

@Prototype(np_nan, npNaN, npNAN)
class npnan: '''`np.nan`, `np.NaN`, or `np.NAN`'''

# %% ../nbs/04_nans.ipynb 21
@Prototype(mathnan, pdNA, np_nan, npNaN, npNAN, ptnan)
class nan: '''`math.nan`, `pd.NA`, `np.nan`, `np.NaN`, or `np.NAN`'''

@Opt(nan)
class nanq: '''`math.nan`, `pd.NA`, `np.nan`, `np.NaN`, `np.NAN`, or `None`'''

@Prototype(nan, list, tuple, itertype, nparray, attrs=dict(dtype=nan))
class nans: '''list of `nan`'''
