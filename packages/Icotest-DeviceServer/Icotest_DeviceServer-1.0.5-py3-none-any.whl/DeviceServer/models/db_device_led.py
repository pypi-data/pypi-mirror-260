# coding: utf-8

"""
    DeviceServer

    DeviceServer API  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Contact: david@3adesign.co.uk
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from DeviceServer.configuration import Configuration


class DbDeviceLed(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'led_index': 'int',
        'label': 'str',
        'state_index': 'int',
        'led_id': 'str',
        'state_label': 'str'
    }

    attribute_map = {
        'device_id': 'device_id',
        'led_index': 'led_index',
        'label': 'label',
        'state_index': 'state_index',
        'led_id': 'led_id',
        'state_label': 'state_label'
    }

    def __init__(self, device_id=None, led_index=None, label=None, state_index=None, led_id=None, state_label=None, local_vars_configuration=None):  # noqa: E501
        """DbDeviceLed - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._device_id = None
        self._led_index = None
        self._label = None
        self._state_index = None
        self._led_id = None
        self._state_label = None
        self.discriminator = None

        self.device_id = device_id
        self.led_index = led_index
        if label is not None:
            self.label = label
        if state_index is not None:
            self.state_index = state_index
        self.led_id = led_id
        if state_label is not None:
            self.state_label = state_label

    @property
    def device_id(self):
        """Gets the device_id of this DbDeviceLed.  # noqa: E501


        :return: The device_id of this DbDeviceLed.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DbDeviceLed.


        :param device_id: The device_id of this DbDeviceLed.  # noqa: E501
        :type device_id: str
        """
        if self.local_vars_configuration.client_side_validation and device_id is None:  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_id is not None and len(device_id) > 36):
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_id is not None and len(device_id) < 36):
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_id is not None and not re.search(r'[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}', device_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `device_id`, must be a follow pattern or equal to `/[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/`")  # noqa: E501

        self._device_id = device_id

    @property
    def led_index(self):
        """Gets the led_index of this DbDeviceLed.  # noqa: E501


        :return: The led_index of this DbDeviceLed.  # noqa: E501
        :rtype: int
        """
        return self._led_index

    @led_index.setter
    def led_index(self, led_index):
        """Sets the led_index of this DbDeviceLed.


        :param led_index: The led_index of this DbDeviceLed.  # noqa: E501
        :type led_index: int
        """
        if self.local_vars_configuration.client_side_validation and led_index is None:  # noqa: E501
            raise ValueError("Invalid value for `led_index`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                led_index is not None and led_index > 100):  # noqa: E501
            raise ValueError("Invalid value for `led_index`, must be a value less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                led_index is not None and led_index < 1):  # noqa: E501
            raise ValueError("Invalid value for `led_index`, must be a value greater than or equal to `1`")  # noqa: E501

        self._led_index = led_index

    @property
    def label(self):
        """Gets the label of this DbDeviceLed.  # noqa: E501


        :return: The label of this DbDeviceLed.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DbDeviceLed.


        :param label: The label of this DbDeviceLed.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def state_index(self):
        """Gets the state_index of this DbDeviceLed.  # noqa: E501


        :return: The state_index of this DbDeviceLed.  # noqa: E501
        :rtype: int
        """
        return self._state_index

    @state_index.setter
    def state_index(self, state_index):
        """Sets the state_index of this DbDeviceLed.


        :param state_index: The state_index of this DbDeviceLed.  # noqa: E501
        :type state_index: int
        """

        self._state_index = state_index

    @property
    def led_id(self):
        """Gets the led_id of this DbDeviceLed.  # noqa: E501


        :return: The led_id of this DbDeviceLed.  # noqa: E501
        :rtype: str
        """
        return self._led_id

    @led_id.setter
    def led_id(self, led_id):
        """Sets the led_id of this DbDeviceLed.


        :param led_id: The led_id of this DbDeviceLed.  # noqa: E501
        :type led_id: str
        """
        if self.local_vars_configuration.client_side_validation and led_id is None:  # noqa: E501
            raise ValueError("Invalid value for `led_id`, must not be `None`")  # noqa: E501

        self._led_id = led_id

    @property
    def state_label(self):
        """Gets the state_label of this DbDeviceLed.  # noqa: E501


        :return: The state_label of this DbDeviceLed.  # noqa: E501
        :rtype: str
        """
        return self._state_label

    @state_label.setter
    def state_label(self, state_label):
        """Sets the state_label of this DbDeviceLed.


        :param state_label: The state_label of this DbDeviceLed.  # noqa: E501
        :type state_label: str
        """
        if (self.local_vars_configuration.client_side_validation and
                state_label is not None and len(state_label) > 64):
            raise ValueError("Invalid value for `state_label`, length must be less than or equal to `64`")  # noqa: E501

        self._state_label = state_label

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DbDeviceLed):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DbDeviceLed):
            return True

        return self.to_dict() != other.to_dict()
