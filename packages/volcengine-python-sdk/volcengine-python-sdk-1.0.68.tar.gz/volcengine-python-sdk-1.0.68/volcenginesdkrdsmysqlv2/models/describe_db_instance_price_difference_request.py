# coding: utf-8

"""
    rds_mysql_v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class DescribeDBInstancePriceDifferenceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_type': 'str',
        'instance_ids': 'list[str]',
        'modify_type': 'str',
        'node_info': 'list[NodeInfoForDescribeDBInstancePriceDifferenceInput]',
        'number': 'int',
        'period': 'int',
        'period_unit': 'str',
        'rollback_time': 'str',
        'shard_number': 'int',
        'storage_space': 'int',
        'storage_type': 'str',
        'user_action': 'str'
    }

    attribute_map = {
        'charge_type': 'ChargeType',
        'instance_ids': 'InstanceIds',
        'modify_type': 'ModifyType',
        'node_info': 'NodeInfo',
        'number': 'Number',
        'period': 'Period',
        'period_unit': 'PeriodUnit',
        'rollback_time': 'RollbackTime',
        'shard_number': 'ShardNumber',
        'storage_space': 'StorageSpace',
        'storage_type': 'StorageType',
        'user_action': 'UserAction'
    }

    def __init__(self, charge_type=None, instance_ids=None, modify_type=None, node_info=None, number=None, period=None, period_unit=None, rollback_time=None, shard_number=None, storage_space=None, storage_type=None, user_action=None, _configuration=None):  # noqa: E501
        """DescribeDBInstancePriceDifferenceRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._charge_type = None
        self._instance_ids = None
        self._modify_type = None
        self._node_info = None
        self._number = None
        self._period = None
        self._period_unit = None
        self._rollback_time = None
        self._shard_number = None
        self._storage_space = None
        self._storage_type = None
        self._user_action = None
        self.discriminator = None

        if charge_type is not None:
            self.charge_type = charge_type
        if instance_ids is not None:
            self.instance_ids = instance_ids
        if modify_type is not None:
            self.modify_type = modify_type
        if node_info is not None:
            self.node_info = node_info
        if number is not None:
            self.number = number
        if period is not None:
            self.period = period
        if period_unit is not None:
            self.period_unit = period_unit
        if rollback_time is not None:
            self.rollback_time = rollback_time
        if shard_number is not None:
            self.shard_number = shard_number
        if storage_space is not None:
            self.storage_space = storage_space
        if storage_type is not None:
            self.storage_type = storage_type
        if user_action is not None:
            self.user_action = user_action

    @property
    def charge_type(self):
        """Gets the charge_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The charge_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this DescribeDBInstancePriceDifferenceRequest.


        :param charge_type: The charge_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def instance_ids(self):
        """Gets the instance_ids of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The instance_ids of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._instance_ids

    @instance_ids.setter
    def instance_ids(self, instance_ids):
        """Sets the instance_ids of this DescribeDBInstancePriceDifferenceRequest.


        :param instance_ids: The instance_ids of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: list[str]
        """

        self._instance_ids = instance_ids

    @property
    def modify_type(self):
        """Gets the modify_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The modify_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._modify_type

    @modify_type.setter
    def modify_type(self, modify_type):
        """Sets the modify_type of this DescribeDBInstancePriceDifferenceRequest.


        :param modify_type: The modify_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: str
        """

        self._modify_type = modify_type

    @property
    def node_info(self):
        """Gets the node_info of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The node_info of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: list[NodeInfoForDescribeDBInstancePriceDifferenceInput]
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this DescribeDBInstancePriceDifferenceRequest.


        :param node_info: The node_info of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: list[NodeInfoForDescribeDBInstancePriceDifferenceInput]
        """

        self._node_info = node_info

    @property
    def number(self):
        """Gets the number of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The number of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DescribeDBInstancePriceDifferenceRequest.


        :param number: The number of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def period(self):
        """Gets the period of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The period of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this DescribeDBInstancePriceDifferenceRequest.


        :param period: The period of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def period_unit(self):
        """Gets the period_unit of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The period_unit of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._period_unit

    @period_unit.setter
    def period_unit(self, period_unit):
        """Sets the period_unit of this DescribeDBInstancePriceDifferenceRequest.


        :param period_unit: The period_unit of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: str
        """

        self._period_unit = period_unit

    @property
    def rollback_time(self):
        """Gets the rollback_time of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The rollback_time of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._rollback_time

    @rollback_time.setter
    def rollback_time(self, rollback_time):
        """Sets the rollback_time of this DescribeDBInstancePriceDifferenceRequest.


        :param rollback_time: The rollback_time of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: str
        """

        self._rollback_time = rollback_time

    @property
    def shard_number(self):
        """Gets the shard_number of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The shard_number of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._shard_number

    @shard_number.setter
    def shard_number(self, shard_number):
        """Sets the shard_number of this DescribeDBInstancePriceDifferenceRequest.


        :param shard_number: The shard_number of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: int
        """

        self._shard_number = shard_number

    @property
    def storage_space(self):
        """Gets the storage_space of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The storage_space of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._storage_space

    @storage_space.setter
    def storage_space(self, storage_space):
        """Sets the storage_space of this DescribeDBInstancePriceDifferenceRequest.


        :param storage_space: The storage_space of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: int
        """

        self._storage_space = storage_space

    @property
    def storage_type(self):
        """Gets the storage_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The storage_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this DescribeDBInstancePriceDifferenceRequest.


        :param storage_type: The storage_type of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: str
        """

        self._storage_type = storage_type

    @property
    def user_action(self):
        """Gets the user_action of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501


        :return: The user_action of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_action

    @user_action.setter
    def user_action(self, user_action):
        """Sets the user_action of this DescribeDBInstancePriceDifferenceRequest.


        :param user_action: The user_action of this DescribeDBInstancePriceDifferenceRequest.  # noqa: E501
        :type: str
        """

        self._user_action = user_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescribeDBInstancePriceDifferenceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescribeDBInstancePriceDifferenceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescribeDBInstancePriceDifferenceRequest):
            return True

        return self.to_dict() != other.to_dict()
