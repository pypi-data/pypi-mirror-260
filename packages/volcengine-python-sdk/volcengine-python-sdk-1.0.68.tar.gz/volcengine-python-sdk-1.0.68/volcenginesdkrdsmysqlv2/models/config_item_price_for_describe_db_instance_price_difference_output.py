# coding: utf-8

"""
    rds_mysql_v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: common-version
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from volcenginesdkcore.configuration import Configuration


class ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_code': 'str',
        'coupon_amount': 'float',
        'discount_price': 'float',
        'instance_id': 'str',
        'original_price': 'float',
        'payable_price': 'float',
        'quantity': 'int',
        'refund_amount': 'float'
    }

    attribute_map = {
        'configuration_code': 'ConfigurationCode',
        'coupon_amount': 'CouponAmount',
        'discount_price': 'DiscountPrice',
        'instance_id': 'InstanceID',
        'original_price': 'OriginalPrice',
        'payable_price': 'PayablePrice',
        'quantity': 'Quantity',
        'refund_amount': 'RefundAmount'
    }

    def __init__(self, configuration_code=None, coupon_amount=None, discount_price=None, instance_id=None, original_price=None, payable_price=None, quantity=None, refund_amount=None, _configuration=None):  # noqa: E501
        """ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._configuration_code = None
        self._coupon_amount = None
        self._discount_price = None
        self._instance_id = None
        self._original_price = None
        self._payable_price = None
        self._quantity = None
        self._refund_amount = None
        self.discriminator = None

        if configuration_code is not None:
            self.configuration_code = configuration_code
        if coupon_amount is not None:
            self.coupon_amount = coupon_amount
        if discount_price is not None:
            self.discount_price = discount_price
        if instance_id is not None:
            self.instance_id = instance_id
        if original_price is not None:
            self.original_price = original_price
        if payable_price is not None:
            self.payable_price = payable_price
        if quantity is not None:
            self.quantity = quantity
        if refund_amount is not None:
            self.refund_amount = refund_amount

    @property
    def configuration_code(self):
        """Gets the configuration_code of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The configuration_code of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: str
        """
        return self._configuration_code

    @configuration_code.setter
    def configuration_code(self, configuration_code):
        """Sets the configuration_code of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param configuration_code: The configuration_code of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: str
        """

        self._configuration_code = configuration_code

    @property
    def coupon_amount(self):
        """Gets the coupon_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The coupon_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: float
        """
        return self._coupon_amount

    @coupon_amount.setter
    def coupon_amount(self, coupon_amount):
        """Sets the coupon_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param coupon_amount: The coupon_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: float
        """

        self._coupon_amount = coupon_amount

    @property
    def discount_price(self):
        """Gets the discount_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The discount_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: float
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param discount_price: The discount_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: float
        """

        self._discount_price = discount_price

    @property
    def instance_id(self):
        """Gets the instance_id of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The instance_id of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param instance_id: The instance_id of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def original_price(self):
        """Gets the original_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The original_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: float
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param original_price: The original_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: float
        """

        self._original_price = original_price

    @property
    def payable_price(self):
        """Gets the payable_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The payable_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: float
        """
        return self._payable_price

    @payable_price.setter
    def payable_price(self, payable_price):
        """Sets the payable_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param payable_price: The payable_price of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: float
        """

        self._payable_price = payable_price

    @property
    def quantity(self):
        """Gets the quantity of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The quantity of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param quantity: The quantity of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def refund_amount(self):
        """Gets the refund_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501


        :return: The refund_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.


        :param refund_amount: The refund_amount of this ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput.  # noqa: E501
        :type: float
        """

        self._refund_amount = refund_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigItemPriceForDescribeDBInstancePriceDifferenceOutput):
            return True

        return self.to_dict() != other.to_dict()
