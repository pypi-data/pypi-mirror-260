from _typeshed import Incomplete
from datasurface.md import PartitionKeyList as PartitionKeyList, PrimaryKeyList as PrimaryKeyList, Schema as Schema
from datasurface.md.Lint import ValidationTree as ValidationTree
from datasurface.md.Policy import DataClassification as DataClassification, DataClassificationPolicy as DataClassificationPolicy
from typing import Optional

class AvroSchema(Schema):
    schema: Incomplete
    classification: Incomplete
    primaryKeyColumns: Incomplete
    ingestionPartitionColumns: Incomplete
    def __init__(self, json_schema: str, classification: Optional[list[DataClassification]] = None, pkCols: Optional[PrimaryKeyList] = None, partCols: Optional[PartitionKeyList] = None) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def hasDataClassifications(self) -> bool: ...
    def isBackwardsCompatibleWith(self, other: Schema, vTree: ValidationTree) -> bool: ...
    def getHubSchema(self) -> Schema: ...
    def checkClassificationsAreOnly(self, verifier: DataClassificationPolicy) -> bool: ...
    def checkColumnsArePrimitiveTypes(self, cols: list[str], tree: ValidationTree): ...
    def lint(self, tree: ValidationTree) -> None: ...
