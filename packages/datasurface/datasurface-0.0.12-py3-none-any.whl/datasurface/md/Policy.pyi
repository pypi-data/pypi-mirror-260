import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from datasurface.md import Documentation as Documentation
from datasurface.md.Documentation import Documentable as Documentable
from enum import Enum
from typing import Generic, Optional, TypeVar

T = TypeVar('T')

class Policy(ABC, Documentable, Generic[T], metaclass=abc.ABCMeta):
    name: Incomplete
    def __init__(self, name: str, doc: Optional[Documentation] = None) -> None: ...
    @abstractmethod
    def isCompatible(self, obj: T) -> bool: ...
    def __eq__(self, v: object) -> bool: ...
    def __hash__(self) -> int: ...
P = TypeVar('P')

class AllowDisallowPolicy(Policy[P]):
    allowed: Incomplete
    notAllowed: Incomplete
    def __init__(self, name: str, doc: Optional[Documentation], allowed: Optional[set[P]] = None, notAllowed: Optional[set[P]] = None) -> None: ...
    def isCompatible(self, obj: P) -> bool: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class DataClassification(ABC):
    def __init__(self) -> None: ...
    def __eq__(self, o: object) -> bool: ...

class SimpleDCTypes(Enum):
    PUB: int
    IP: int
    PC1: int
    PC2: int
    CPI: int
    MNPI: int
    CSI: int
    PC3: int

class SimpleDC(DataClassification):
    dcType: Incomplete
    name: Incomplete
    def __init__(self, dcType: SimpleDCTypes, name: Optional[str] = None) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, o: object) -> bool: ...

class DataClassificationPolicy(AllowDisallowPolicy[DataClassification]):
    def __init__(self, name: str, doc: Optional[Documentation], allowed: Optional[set[DataClassification]] = None, notAllowed: Optional[set[DataClassification]] = None) -> None: ...
    def __eq__(self, v: object) -> bool: ...
    def __hash__(self) -> int: ...

class VerifyNoPrivacyDataVerify(DataClassificationPolicy):
    def __init__(self, doc: Optional[Documentation]) -> None: ...
    def __hash__(self) -> int: ...
