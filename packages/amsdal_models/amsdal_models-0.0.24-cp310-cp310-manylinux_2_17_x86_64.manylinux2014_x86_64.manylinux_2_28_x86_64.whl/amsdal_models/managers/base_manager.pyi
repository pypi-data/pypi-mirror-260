from _typeshed import Incomplete
from amsdal_models.classes.model import Model as Model
from amsdal_models.querysets.base_queryset import QuerySet as QuerySet, QuerySetOne as QuerySetOne, QuerySetOneRequired as QuerySetOneRequired
from amsdal_utils.query.utils import Q as Q
from typing import Any, Optional

logger: Incomplete

class BaseManager:
    """
    Base manager for creating QuerySets for models.
    """
    model: type['Model']
    def copy(self, cls: type['Model']) -> BaseManager: ...
    def get_queryset(self) -> QuerySet: ...
    def using(self, value: str) -> QuerySet: ...
    def all(self) -> QuerySet: ...
    def only(self, fields: list[str]) -> QuerySet: ...
    def distinct(self, fields: list[str]) -> QuerySet: ...
    def filter(self, *args: Q, **kwargs: Any) -> QuerySet: ...
    def exclude(self, *args: Q, **kwargs: Any) -> QuerySet: ...
    def get(self, *args: Q, **kwargs: Any) -> QuerySetOneRequired: ...
    def get_or_none(self, *args: Q, **kwargs: Any) -> QuerySetOne: ...
    def first(self, *args: Q, **kwargs: Any) -> QuerySetOne: ...
    def latest(self) -> QuerySet: ...
    def previous_version(self, obj: Model) -> Optional['Model']: ...
    def next_version(self, obj: Model) -> Optional['Model']: ...
