[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "soufi"
dynamic = ["version"]
readme = "README.rst"
license = "Apache-2.0"
authors = [
    {name = "Julian Edwards", email = "juledwar@cisco.com"},
]
maintainers = [
    {name = "Julian Edwards", email = "juledwar@cisco.com"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
urls.Source = "https://github.com/juledwar/soufi"
dependencies = [
    "cryptography>=3.3.1",
    "launchpadlib>=1.10.13",
    "repomd>=0.2.1",
    "requests>=2.25.1",
    "requests-oauthlib>=1.3.0",
    "lxml>=4.6.3",
    "dogpile.cache>=1.1.5",
]

[project.optional-dependencies]
test = [
    "build",
    "black",
    "coverage[toml]",
    "fixtures",
    "ruff",
    "ipython",
    "isort",
    "pdbpp",
    "stestr",
    "testscenarios",
    "testresources",
    "testtools",
    "twine",
]
bootstrap = [
    "pip",
    "pip-tools",
    "hatch",
    "hatch-vcs",
    "virtualenv",
    "wheel",
]
cli = [
    "pylru>=1.2.0",
    "click>=7.1.2",
]

[project.scripts]
soufi = "soufi.cli:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
include = ["/soufi"]
exclude = [
    "soufi/tests",
    "soufi/testing",
    "soufi/functional",
]

[tool.hatch.build.hooks.vcs]
version-file = "soufi/_version.py"

[tool.hatch.build.targets.sdist]
include = ["/soufi"]
exclude = []

[tool.hatch.envs.default]
path = ".hatch"
features = ["test"]

# Bootstrap or upgrade an existing virtualenv:
scripts.install = [
    # Install exactly what's in the locked requirements and nothing else.
    "pip install -U --no-deps -r requirements/requirements-test.txt",
]
scripts.py3 = [
    "export PYTHON='coverage run --source soufi --parallel-mode'; stestr run {args}",
    "coverage combine",
    "coverage xml -o coverage.xml",
    "mkdir -p cover",
    "coverage html -d cover",
    "coverage report --show-missing --fail-under=100",
]
scripts.py3-failing = ["stestr run --failing"]
scripts.failing = ["py3-failing"]  # convenience is king
scripts.test = ["python -m testtools.run {args}"]
scripts.debug = ["python -m testtools.run discover {args}"]
scripts.format = [
    "black soufi",
    "isort soufi",
]
scripts.check = [
    "black --check soufi",
    "isort --check soufi",
    "ruff soufi",
]
# Special target to run all tests needed in CI.
scripts.ci = [
    "py3",
    "check",
]
scripts.cover = [
    "export PYTHON='coverage run --source soufi --parallel-mode'; stestr run",
]
scripts.pypi = ["python -m twine upload {args}"]
scripts.testpypi = ["python -m twine upload --repository testpypi {args}"]

scripts.functional = [
    "stestr --test-path ./soufi/functional run {args}",
    "stestr slowest",
]

scripts.compile-requirements = [
    "docker run -e HATCH_ENV_ACTIVE=1 --rm -v {root}:/soufi python:3.8-slim bash -c 'cd /soufi; apt update && apt install -y git && tools/compile-requirements'",
]


[tool.black]
line-length = 79
target_version = ['py38']
skip-string-normalization = 1
# Needed for the vim plugin
string-normalization = 0
exclude = '''
(
    /(
          \.eggs
        | \.git
        | .tox
        | .hatch
        | \.venv
        | dist
        | build
        | _build
        | soufi-venv
    )/
    | soufi/_version.py
)
'''

[tool.coverage.run]
omit = [
    'soufi/tests/*',
    'soufi/testing/*',
    'soufi/functional/*',
    'soufi/_version.py',
    'soufi/cli.py',
]

[tool.isort]
line_length = 79
multi_line_output = 3
indent='    '
include_trailing_comma = true
use_parentheses = true

[tool.ruff]
cache-dir = "~/.cache/ruff"
select = ["B", "C9", "D", "E", "F", "S", "W"]
line-length = 79
show-source = true
target-version = "py38"
exclude = [
    ".git",
    ".tox",
    ".hatch",
    "__pycache__",
    "bin",
    "lib",
    "build",
    "dist",
    "eggs",
]
ignore = [
    "D10", # ignore missing docstrings (for now)
    "D202", # No blank lines allowed after function docstring (caused by Black)
    "D203", # Allow One Blank Line Before Class
    "D213", # Allow "Multi-line docstring summary should start at the second line"
    "D406", # Allow section names without formatting
    "D407", # Allow section names without formatting
    "D412", # No blank lines allowed between a section header and its content (incompatible with Click)
    "D301", # Use r""" if any backslashes in a docstring (incompatible with Click)
    "E731", # make lambda expressions great again
    "B904", # Disable stuipidly picky error about raise ... from None
]
[tool.ruff.mccabe]
max-complexity = 13
