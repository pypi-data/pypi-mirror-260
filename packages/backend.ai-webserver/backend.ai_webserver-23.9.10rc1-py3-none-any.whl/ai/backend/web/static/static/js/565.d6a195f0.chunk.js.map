{"version":3,"file":"static/js/565.d6a195f0.chunk.js","mappings":"yTA6HA,UAjHkD,SAAHA,GAIxC,IAHLC,EAAID,EAAJC,KACAC,EAAcF,EAAdE,eACGC,GAAUC,EAAAA,EAAAA,GAAAJ,EAAAK,GAEbC,EAAeC,EAAAA,EAAKC,UAAbC,GAAsBC,EAAAA,EAAAA,GAAAJ,EAAA,GAAlB,GACHK,GAAMC,EAAAA,EAAAA,MAAND,EACRE,EAAoCC,EAAAA,GAAQC,aAAYC,GAAAN,EAAAA,EAAAA,GAAAG,EAAA,GAAjDI,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAC1BG,GAAYC,EAAAA,EAAAA,MACZC,GAAkBC,EAAAA,EAAAA,GAAe,CACrCC,WAAY,SAACC,GACX,OAAOL,EAAUM,QAAQD,EAAOE,MAAOF,EAAOG,SAChD,IA2BF,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAQC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACPC,MAAOvB,EAAE,sBACTwB,UAAQ,EACRC,MAAO,IACPnC,KAAMA,EACNoC,KAhCW,WACf5B,EACG6B,iBACAC,MAAK,SAACf,GACLH,EAAgBmB,OACd,CACEd,MAAOF,EAAOE,MACdC,SAAUH,EAAOG,UAEnB,CACEc,UAAW,WACT,IAAMC,EAAQ,IAAIC,YAAY,qBAC9BC,SAASC,cAAcH,EACzB,EACAI,QAAS,SAACC,GACR9B,EAAWhB,KAAK,CACd+C,KAAM,QACNC,QAASF,EAAEjC,SAEf,GAGN,IACCoC,OAAM,WAAO,GAClB,EASMC,OAAQxC,EAAE,sBACVyC,cAAe,CAAEC,QAAQ,GACzBC,eAAgBjC,EAAgBkC,UAChCC,SAAU,WACRtD,GACF,GACIC,GAAU,IAAA2B,UAEdF,EAAAA,EAAAA,MAACrB,EAAAA,EAAI,CACHE,KAAMA,EACNgD,OAAO,WACPC,SAAU,CAAEC,KAAM,GAClBC,SAAUvC,EAAgBkC,UAAUzB,SAAA,EAEpCC,EAAAA,EAAAA,KAACxB,EAAAA,EAAKsD,KAAI,CAACC,KAAK,QAAOhC,UACrBC,EAAAA,EAAAA,KAACgC,EAAAA,EAAK,CAACjD,QAASH,EAAE,0BAA2BqC,KAAK,eAEpDjB,EAAAA,EAAAA,KAACxB,EAAAA,EAAKsD,KAAI,CACRC,KAAK,QACLE,MAAOrD,EAAE,kBACTsD,UAAQ,EACRC,MAAO,CACL,iBAAO,CACLC,UAAS,SAACC,EAAGC,GACX,OAAKA,EAIMA,IAAUlD,EAAUO,MACtB4C,QAAQC,OACb,IAAIC,MAAM7D,EAAE,kCAGT2D,QAAQG,UARNH,QAAQC,OACb,IAAIC,MAAM7D,EAAE,iCAQlB,EACD,GACDmB,UAEFC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAK,CAACC,aAAa,WAEtB5C,EAAAA,EAAAA,KAACxB,EAAAA,EAAKsD,KAAI,CACRC,KAAK,WACLE,MAAOrD,EAAE,oBACTsD,UAAQ,EACRC,MAAO,CACL,iBAAO,CACLC,UAAS,SAACC,EAAGC,GACX,OAAKA,EAKEC,QAAQG,UAJNH,QAAQC,OACb,IAAIC,MAAM7D,EAAE,oCAIlB,EACD,GACDmB,UAEFC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAME,SAAQ,YAIpB1D,IAGP,C","sources":["components/SignoutModal.tsx"],"sourcesContent":["import { useSuspendedBackendaiClient } from '../hooks';\nimport { useTanMutation } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport { Form, Input, message, Alert } from 'antd';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SignoutModalProps extends BAIModalProps {\n  open: boolean;\n  onRequestClose: () => void;\n}\n\nconst SignoutModal: React.FC<SignoutModalProps> = ({\n  open,\n  onRequestClose,\n  ...modalProps\n}) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslation();\n  const [messageApi, contextHolder] = message.useMessage();\n  const baiClient = useSuspendedBackendaiClient();\n  const signoutMutation = useTanMutation({\n    mutationFn: (values: { email: string; password: string }) => {\n      return baiClient.signout(values.email, values.password);\n    },\n  });\n  const handleOk = () => {\n    form\n      .validateFields()\n      .then((values) => {\n        signoutMutation.mutate(\n          {\n            email: values.email,\n            password: values.password,\n          },\n          {\n            onSuccess: () => {\n              const event = new CustomEvent('backend-ai-logout');\n              document.dispatchEvent(event);\n            },\n            onError: (e: any) => {\n              messageApi.open({\n                type: 'error',\n                content: e.message,\n              });\n            },\n          },\n        );\n      })\n      .catch(() => {});\n  };\n  return (\n    <>\n      <BAIModal\n        title={t('login.LeaveService')}\n        centered\n        width={450}\n        open={open}\n        onOk={handleOk}\n        okText={t('login.LeaveService')}\n        okButtonProps={{ danger: true }}\n        confirmLoading={signoutMutation.isLoading}\n        onCancel={() => {\n          onRequestClose();\n        }}\n        {...modalProps}\n      >\n        <Form\n          form={form}\n          layout=\"vertical\"\n          labelCol={{ span: 6 }}\n          disabled={signoutMutation.isLoading}\n        >\n          <Form.Item name=\"alert\">\n            <Alert message={t('login.DescConfirmLeave')} type=\"warning\" />\n          </Form.Item>\n          <Form.Item\n            name=\"email\"\n            label={t('general.E-Mail')}\n            required\n            rules={[\n              () => ({\n                validator(_, value) {\n                  if (!value) {\n                    return Promise.reject(\n                      new Error(t('webui.menu.InvalidBlankEmail')),\n                    );\n                  } else if (value !== baiClient.email) {\n                    return Promise.reject(\n                      new Error(t('webui.menu.DisMatchUserEmail')),\n                    );\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n          >\n            <Input autoComplete=\"off\" />\n          </Form.Item>\n          <Form.Item\n            name=\"password\"\n            label={t('general.Password')}\n            required\n            rules={[\n              () => ({\n                validator(_, value) {\n                  if (!value) {\n                    return Promise.reject(\n                      new Error(t('webui.menu.InvalidBlankPassword')),\n                    );\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n          >\n            <Input.Password />\n          </Form.Item>\n        </Form>\n      </BAIModal>\n      {contextHolder}\n    </>\n  );\n};\n\nexport default SignoutModal;\n"],"names":["_ref","open","onRequestClose","modalProps","_objectWithoutProperties","_excluded","_Form$useForm","Form","useForm","form","_slicedToArray","t","useTranslation","_message$useMessage","message","useMessage","_message$useMessage2","messageApi","contextHolder","baiClient","useSuspendedBackendaiClient","signoutMutation","useTanMutation","mutationFn","values","signout","email","password","_jsxs","_Fragment","children","_jsx","BAIModal","_objectSpread","title","centered","width","onOk","validateFields","then","mutate","onSuccess","event","CustomEvent","document","dispatchEvent","onError","e","type","content","catch","okText","okButtonProps","danger","confirmLoading","isLoading","onCancel","layout","labelCol","span","disabled","Item","name","Alert","label","required","rules","validator","_","value","Promise","reject","Error","resolve","Input","autoComplete","Password"],"sourceRoot":""}