{"version":3,"file":"static/js/855.986a25c5.chunk.js","mappings":"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","sources":["components/KeypairInfoModal.tsx","components/__generated__/KeypairInfoModalQuery.graphql.ts","hooks/backendai.tsx"],"sourcesContent":["/**\n @license\n Copyright (c) 2015-2023 Lablup Inc. All rights reserved.\n */\nimport { useSuspendedBackendaiClient } from '../hooks';\nimport { useCurrentUserInfo } from '../hooks/backendai';\nimport { useTanQuery } from '../hooks/reactQueryAlias';\nimport BAIModal, { BAIModalProps } from './BAIModal';\nimport Flex from './Flex';\nimport { KeypairInfoModalQuery } from './__generated__/KeypairInfoModalQuery.graphql';\nimport { Button, Table, Typography, Tag } from 'antd';\nimport graphql from 'babel-plugin-relay/macro';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLazyLoadQuery } from 'react-relay';\n\ninterface KeypairInfoModalProps extends BAIModalProps {\n  onRequestClose: () => void;\n}\n\nconst KeypairInfoModal: React.FC<KeypairInfoModalProps> = ({\n  onRequestClose,\n  ...baiModalProps\n}) => {\n  const { t } = useTranslation();\n  const [userInfo] = useCurrentUserInfo();\n  const baiClient = useSuspendedBackendaiClient();\n  const { data: keypairs } = useTanQuery({\n    queryKey: ['baiClient.keypair.list', baiModalProps.open], // refetch on open state\n    queryFn: () => {\n      return baiClient.keypair\n        .list(userInfo.email, ['access_key', 'secret_key', 'is_active'], true)\n        .then((res: any) => res.keypairs);\n    },\n    suspense: true,\n    staleTime: 0,\n    cacheTime: 0,\n  });\n\n  const supportMainAccessKey = baiClient?.supports('main-access-key');\n\n  const { user } = useLazyLoadQuery<KeypairInfoModalQuery>(\n    graphql`\n      query KeypairInfoModalQuery($email: String) {\n        user(email: $email) {\n          email\n          main_access_key @since(version: \"23.09.7\")\n        }\n      }\n    `,\n    {\n      email: userInfo.email,\n    },\n  );\n\n  return (\n    <BAIModal\n      {...baiModalProps}\n      title={t('usersettings.MyKeypairInfo')}\n      centered\n      onCancel={onRequestClose}\n      destroyOnClose\n      width={'auto'}\n      footer={[\n        <Button\n          onClick={() => {\n            onRequestClose();\n          }}\n        >\n          {t('button.Close')}\n        </Button>,\n      ]}\n    >\n      <Table\n        scroll={{ x: 'max-content' }}\n        rowKey={'access_key'}\n        dataSource={keypairs}\n        columns={[\n          {\n            title: '#',\n            fixed: 'left',\n            render: (id, record, index) => {\n              ++index;\n              return index;\n            },\n            showSorterTooltip: false,\n            rowScope: 'row',\n          },\n          {\n            title: t('general.AccessKey'),\n            dataIndex: 'access_key',\n            fixed: 'left',\n            render: (value) => (\n              <Flex direction=\"column\" align=\"start\">\n                <Typography.Text ellipsis copyable>\n                  {value}\n                </Typography.Text>\n                {supportMainAccessKey && value === user?.main_access_key && (\n                  <Tag color=\"red\">{t('credential.MainAccessKey')}</Tag>\n                )}\n              </Flex>\n            ),\n          },\n          {\n            title: t('general.SecretKey'),\n            dataIndex: 'secret_key',\n            fixed: 'left',\n            render: (value) => (\n              <Typography.Text ellipsis copyable>\n                {value}\n              </Typography.Text>\n            ),\n          },\n        ]}\n      ></Table>\n    </BAIModal>\n  );\n};\n\nexport default KeypairInfoModal;\n","/**\n * @generated SignedSource<<d99b2e22257d57bc92dbe1fe12a09450>>\n * @lightSyntaxTransform\n * @nogrep\n */\n\n/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest, Query } from 'relay-runtime';\nexport type KeypairInfoModalQuery$variables = {\n  email?: string | null;\n};\nexport type KeypairInfoModalQuery$data = {\n  readonly user: {\n    readonly email: string | null;\n    readonly main_access_key: string | null;\n  } | null;\n};\nexport type KeypairInfoModalQuery = {\n  response: KeypairInfoModalQuery$data;\n  variables: KeypairInfoModalQuery$variables;\n};\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"email\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"email\",\n    \"variableName\": \"email\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"email\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"main_access_key\",\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"KeypairInfoModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Queries\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"KeypairInfoModalQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"User\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"user\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"352a943226b02e137a3fcd32fa0ae22a\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"KeypairInfoModalQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query KeypairInfoModalQuery(\\n  $email: String\\n) {\\n  user(email: $email) {\\n    email\\n    main_access_key @since(version: \\\"23.09.7\\\")\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n\n(node as any).hash = \"70097c005c8abc07e233048a68db1273\";\n\nexport default node;\n","import { useSuspendedBackendaiClient, useUpdatableState } from '.';\nimport { maskString, useBaiSignedRequestWithPromise } from '../helper';\nimport { useTanMutation, useTanQuery } from './reactQueryAlias';\nimport _ from 'lodash';\nimport { useEffect, useState } from 'react';\n\nexport interface QuotaScope {\n  id: string;\n  quota_scope_id: string;\n  storage_host_name: string;\n  details: {\n    hard_limit_bytes: number | null;\n    usage_bytes: number | null;\n    usage_count: number | null;\n  };\n}\n\nexport const useResourceSlots = () => {\n  const [key, checkUpdate] = useUpdatableState('first');\n  const baiClient = useSuspendedBackendaiClient();\n  const { data: resourceSlots } = useTanQuery<{\n    cpu?: string;\n    mem?: string;\n    'cuda.shares'?: string;\n    'cuda.device'?: string;\n    'rocm.device'?: string;\n    'tpu.device'?: string;\n    'ipu.device'?: string;\n    'atom.device'?: string;\n    'warboy.device'?: string;\n  }>({\n    queryKey: ['useResourceSlots', key],\n    queryFn: () => {\n      return baiClient.get_resource_slots();\n    },\n    staleTime: 0,\n  });\n  return [\n    resourceSlots,\n    {\n      refresh: () => checkUpdate(),\n    },\n  ] as const;\n};\n\nexport const useResourceSlotsByResourceGroup = (name?: string) => {\n  const [key, checkUpdate] = useUpdatableState('first');\n  const baiRequestWithPromise = useBaiSignedRequestWithPromise();\n  const { data: resourceSlots } = useTanQuery<{\n    cpu: string;\n    mem: string;\n    'cuda.shares': string;\n    'cuda.device': string;\n    'rocm.device': string;\n    'ipu.device': string;\n    'atom.device': string;\n    'warboy.device': string;\n    [key: string]: string;\n  }>({\n    queryKey: ['useResourceSlots', name, key],\n    queryFn: () => {\n      // return baiClient.get_resource_slots();\n      if (_.isEmpty(name)) {\n        return;\n      } else {\n        return baiRequestWithPromise({\n          method: 'GET',\n          url: `/config/resource-slots/details?sgroup=${name}`,\n        });\n      }\n    },\n    staleTime: 0,\n  });\n  return [\n    resourceSlots,\n    {\n      refresh: () => checkUpdate(),\n    },\n  ] as const;\n};\n\ninterface UserInfo {\n  full_name: string;\n  email: string;\n}\n\ntype mutationOptions<T> = {\n  onSuccess?: (value: T) => void;\n  onError?: (error: any) => void;\n};\n\nexport const useCurrentUserInfo = () => {\n  const baiClient = useSuspendedBackendaiClient();\n\n  const [userInfo, _setUserInfo] = useState<UserInfo>({\n    full_name: baiClient.full_name,\n    email: baiClient.email,\n  });\n\n  const getUsername = () => {\n    let name: string =\n      _.trim(userInfo.full_name).length > 0\n        ? userInfo.full_name\n        : userInfo.email;\n    // mask username only when the configuration is enabled\n    if (baiClient._config.maskUserInfo) {\n      const maskStartIdx = 2;\n      const emailPattern =\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n      const isEmail: boolean = emailPattern.test(name);\n      const maskLength = isEmail\n        ? name.split('@')[0].length - maskStartIdx\n        : name.length - maskStartIdx;\n      name = maskString(name, '*', maskStartIdx, maskLength);\n    }\n    return name;\n  };\n\n  useEffect(() => {\n    const handler = (e: any) => {\n      if (baiClient.supports('change-user-name')) {\n        const input = e.detail;\n        _setUserInfo((v) => ({\n          ...v,\n          full_name: input,\n        }));\n      }\n    };\n    document.addEventListener('current-user-info-changed', handler);\n    return () => {\n      document.removeEventListener('current-user-info-changed', handler);\n    };\n  }, [baiClient]);\n\n  const mutationToUpdateUserFullName = useTanMutation({\n    mutationFn: (values: { email: string; full_name: string }) => {\n      return baiClient.update_full_name(values.email, values.full_name);\n    },\n  });\n  const mutationToUpdateUserPassword = useTanMutation({\n    mutationFn: (values: {\n      old_password: string;\n      new_password: string;\n      new_password2: string;\n    }) => {\n      return baiClient.update_password(\n        values.old_password,\n        values.new_password,\n        values.new_password2,\n      );\n    },\n  });\n\n  return [\n    {\n      ...userInfo,\n      username: getUsername(),\n      isPendingMutation:\n        mutationToUpdateUserFullName.isLoading ||\n        mutationToUpdateUserPassword.isLoading,\n    },\n    {\n      updateFullName: (\n        newFullName: string,\n        options?: mutationOptions<string>,\n      ) => {\n        mutationToUpdateUserFullName.mutate(\n          {\n            full_name: newFullName,\n            email: baiClient.email,\n          },\n          {\n            onSuccess: () => {\n              options?.onSuccess && options.onSuccess(newFullName);\n              document.dispatchEvent(\n                new CustomEvent('current-user-info-changed', {\n                  detail: newFullName,\n                }),\n              );\n              _setUserInfo((v) => ({\n                ...v,\n                full_name: newFullName,\n              }));\n            },\n            onError: (error: any) => {\n              options?.onError && options.onError(error);\n            },\n          },\n        );\n      },\n      updatePassword: (\n        params: {\n          old_password: string;\n          new_password: string;\n          new_password2: string;\n        },\n        options?: mutationOptions<undefined>,\n      ) => {\n        mutationToUpdateUserPassword.mutate(params, {\n          onSuccess: () => {\n            options?.onSuccess && options.onSuccess(undefined);\n          },\n          onError: (error: any) => {\n            options?.onError && options.onError(error);\n          },\n        });\n      },\n    },\n  ] as const;\n};\n"],"names":["_ref","onRequestClose","baiModalProps","_objectWithoutProperties","_excluded","t","useTranslation","_useCurrentUserInfo","useCurrentUserInfo","userInfo","_slicedToArray","baiClient","useSuspendedBackendaiClient","keypairs","useTanQuery","queryKey","open","queryFn","keypair","list","email","then","res","suspense","staleTime","cacheTime","data","supportMainAccessKey","supports","user","useLazyLoadQuery","_KeypairInfoModalQuery","require","_jsx","BAIModal","_objectSpread","title","centered","onCancel","destroyOnClose","width","footer","Button","onClick","children","Table","scroll","x","rowKey","dataSource","columns","fixed","render","id","record","index","showSorterTooltip","rowScope","dataIndex","value","_jsxs","Flex","direction","align","Typography","Text","ellipsis","copyable","main_access_key","Tag","color","node","v0","v1","v2","v3","hash","useResourceSlots","_useUpdatableState","useUpdatableState","_useUpdatableState2","key","checkUpdate","get_resource_slots","refresh","_useState","useState","full_name","_useState2","_setUserInfo","useEffect","handler","e","input","detail","v","document","addEventListener","removeEventListener","mutationToUpdateUserFullName","useTanMutation","mutationFn","values","update_full_name","mutationToUpdateUserPassword","update_password","old_password","new_password","new_password2","username","name","_","length","_config","maskUserInfo","maskLength","test","split","maskString","getUsername","isPendingMutation","isLoading","updateFullName","newFullName","options","mutate","onSuccess","dispatchEvent","CustomEvent","onError","error","updatePassword","params","undefined"],"sourceRoot":""}