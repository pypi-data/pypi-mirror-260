# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/ston',
                'doc_host': 'https://dsm-72.github.io',
                'git_url': 'https://github.com/dsm-72/ston',
                'lib_path': 'ston'},
  'syms': { 'ston.cons': { 'ston.cons.SensitivityKeywords': ('cons.html#sensitivitykeywords', 'ston/cons.py'),
                           'ston.cons.StringMatchKeywords': ('cons.html#stringmatchkeywords', 'ston/cons.py')},
            'ston.core': { 'ston.core.Empty': ('core.html#empty', 'ston/core.py'),
                           'ston.core.EmptyModule': ('core.html#emptymodule', 'ston/core.py'),
                           'ston.core.Module': ('core.html#module', 'ston/core.py'),
                           'ston.core.NameRegistry': ('core.html#nameregistry', 'ston/core.py'),
                           'ston.core.NameRegistry.__call__': ('core.html#nameregistry.__call__', 'ston/core.py'),
                           'ston.core.NameRegistry.__getattr__': ('core.html#nameregistry.__getattr__', 'ston/core.py'),
                           'ston.core.NameRegistry.__new__': ('core.html#nameregistry.__new__', 'ston/core.py'),
                           'ston.core.NameRegistry.lookup': ('core.html#nameregistry.lookup', 'ston/core.py'),
                           'ston.core.NameRegistry.registry': ('core.html#nameregistry.registry', 'ston/core.py'),
                           'ston.core.RegistryCollection': ('core.html#registrycollection', 'ston/core.py'),
                           'ston.core.RegistryCollection.initer': ('core.html#registrycollection.initer', 'ston/core.py'),
                           'ston.core.RegistryCollection.match': ('core.html#registrycollection.match', 'ston/core.py'),
                           'ston.core.RegistryCollection.register': ('core.html#registrycollection.register', 'ston/core.py'),
                           'ston.core.Singleton': ('core.html#singleton', 'ston/core.py'),
                           'ston.core.Singleton.__bool__': ('core.html#singleton.__bool__', 'ston/core.py'),
                           'ston.core.Singleton.__call__': ('core.html#singleton.__call__', 'ston/core.py'),
                           'ston.core.Singleton.__doc__': ('core.html#singleton.__doc__', 'ston/core.py'),
                           'ston.core.Singleton.__new__': ('core.html#singleton.__new__', 'ston/core.py'),
                           'ston.core.Singleton.__repr__': ('core.html#singleton.__repr__', 'ston/core.py'),
                           'ston.core.Solo': ('core.html#solo', 'ston/core.py'),
                           'ston.core.Solo.__call__': ('core.html#solo.__call__', 'ston/core.py'),
                           'ston.core.Solo.__eq__': ('core.html#solo.__eq__', 'ston/core.py'),
                           'ston.core.Solo.__hash__': ('core.html#solo.__hash__', 'ston/core.py'),
                           'ston.core.Solo.__instancecheck__': ('core.html#solo.__instancecheck__', 'ston/core.py'),
                           'ston.core.Solo.__new__': ('core.html#solo.__new__', 'ston/core.py'),
                           'ston.core.Solo.__repr__': ('core.html#solo.__repr__', 'ston/core.py'),
                           'ston.core.Solo.__subclasscheck__': ('core.html#solo.__subclasscheck__', 'ston/core.py')},
            'ston.util': { 'ston.util.keymatch': ('util.html#keymatch', 'ston/util.py'),
                           'ston.util.safeattr': ('util.html#safeattr', 'ston/util.py'),
                           'ston.util.sens': ('util.html#sens', 'ston/util.py'),
                           'ston.util.strmatch': ('util.html#strmatch', 'ston/util.py')}}}
