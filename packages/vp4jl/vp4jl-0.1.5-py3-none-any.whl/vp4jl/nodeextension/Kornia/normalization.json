{
  "enable": true,
  "nodes": {
    "Normalize": {
      "type": "Normalize",
      "category": "function",
      "title": "normalize",
      "tooltip": "Normalize an image/video tensor with mean and standard deviation.",
      "externalImports": "import kornia as K",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  const code = `${outputs[1]} = K.enhance.normalize(${inputs[1]}['value'], ${inputs.slice(2).join(', ')})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'torch.tensor',\r\n  'metadata': {\n    'colorChannel': 'rgb' if ${inputs[1]}['metadata']['colorChannel'] == 'rgb' else 'grayscale',\n    'channelOrder': 'channelFirst',\n    'isMiniBatched': True,\n    'intensityRange': '0-1',\n    'device': 'cpu' if ${inputs[1]}['value'].get_device() == -1 else 'gpu'\n  }\n}\n${outputs[0]}`;\n  return code;\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "data": {
          "title": "data",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor",
            "metadata": [
              {
                "colorChannel": ["rgb", "grayscale"],
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": [
                  "0-1"
                ],
                "device": [
                  "cpu",
                  "gpu"
                ]
              }
            ]
          },
          "tooltip": "Image tensor of size (B,C,*)"
        },
        "mean": {
          "title": "mean",
          "dataType": "image",
          "defaultValue": "None",
          "tooltip": "Mean for each channel."
        },
        "std": {
          "title": "std",
          "dataType": "torch,tensor",
          "defaultValue": "None",
          "tooltip": "Standard deviations for each channel"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor"
          },
          "tooltip": "Normalised tensor with same size as input (B,C,*)"
        }
      }
    },
    "Normalize_Min_Max": {
      "type": "Normalize_Min_Max",
      "category": "function",
      "title": "normalize min max",
      "tooltip": "Normalise an image/video tensor by MinMax and re-scales the value between a range.",
      "externalImports": "import kornia as K",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  const code = `${outputs[1]} = K.enhance.normalize_min_max(${inputs[1]}['value'], ${inputs.slice(2).join(', ')})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'torch.tensor',\r\n  'metadata': {\n    'colorChannel': 'rgb' if ${inputs[1]}['metadata']['colorChannel'] == 'rgb' else 'grayscale',\n    'channelOrder': 'channelFirst',\n    'isMiniBatched': True,\n    'intensityRange': '0-1',\n    'device': 'cpu' if ${inputs[1]}['value'].get_device() == -1 else 'gpu'\n  }\n}\n${outputs[0]}`;\n  return code;\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "x": {
          "title": "x",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor",
            "metadata": [
              {
                "colorChannel": ["rgb", "grayscale"],
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": [
                  "0-1"
                ],
                "device": [
                  "cpu",
                  "gpu"
                ]
              }
            ]
          },
          "tooltip": "Image tensor of size (B,C,*)"
        },
        "min_val": {
          "title": "min_val",
          "dataType": "float",
          "defaultValue": 0.0,
          "tooltip": "The minimum value for the new range"
        },
        "max_val": {
          "title": "max_val",
          "dataType": "float",
          "defaultValue": 1.0,
          "tooltip": "The maximum value for the new range"
        },
        "eps ": {
          "title": "eps",
          "dataType": "float",
          "defaultValue": 1e-6,
          "tooltip": "Float number to avoid zero division."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor"
          },
          "tooltip": "Normalised tensor with same size as input (B,C,*)"
        }
      }
    },
    "Denormalize": {
      "type": "Denormalize",
      "category": "function",
      "title": "denormalize",
      "tooltip": "Denormalize an image/video tensor with mean and standard deviation.",
      "externalImports": "import kornia as K",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  const code = `${outputs[1]} = K.enhance.denormalize(${inputs[1]}['value'], ${inputs.slice(2).join(', ')})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'torch.tensor',\r\n  'metadata': {\n    'colorChannel': 'rgb' if ${inputs[1]}['metadata']['colorChannel'] == 'rgb' else 'grayscale',\n    'channelOrder': 'channelFirst',\n    'isMiniBatched': True,\n    'intensityRange': '0-1',\n    'device': 'cpu' if ${inputs[1]}['value'].get_device() == -1 else 'gpu'\n  }\n}\n${outputs[0]}`;\n  return code;\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor",
            "metadata": [
              {
                "colorChannel": ["rgb", "grayscale"],
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": [
                  "0-1"
                ],
                "device": [
                  "cpu",
                  "gpu"
                ]
              }
            ]
          },
          "tooltip": "Image tensor of size (B,C,*)"
        },
        "mean": {
          "title": "mean",
          "dataType": "image",
          "defaultValue": "None",
          "tooltip": "Mean for each channel."
        },
        "std": {
          "title": "std",
          "dataType": "torch,tensor",
          "defaultValue": "None",
          "tooltip": "Standard deviations for each channel"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor"
          },
          "tooltip": "Denormalised tensor with same size as input (B,C,*)"
        }
      }
    }
  }
}
