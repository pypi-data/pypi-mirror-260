{
  "enable": true,
  "nodes": {
    "Equalize": {
      "type": "Equalize",
      "category": "function",
      "title": "equalize",
      "tooltip": "Apply equalize on the input tensor.",
      "externalImports": "import kornia as K",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  const code = `${outputs[1]} = K.enhance.equalize(${inputs[1]}['value'])\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'torch.tensor',\r\n  'metadata': {\n    'colorChannel': 'rgb' if ${inputs[1]}['metadata']['colorChannel'] == 'rgb' else 'grayscale',\n    'channelOrder': 'channelFirst',\n    'isMiniBatched': True if ${inputs[1]}['metadata']['isMiniBatched'] == True else False,\n    'intensityRange': '0-1',\n    'device': 'cpu' if ${inputs[1]}['value'].get_device() == -1 else 'gpu'\n  }\n}\n${outputs[0]}`;\n  return code;\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor",
            "metadata": [
              {
                "colorChannel": ["rgb", "grayscale"],
                "isMiniBatched": [true, false],
                "channelOrder": "channelFirst",
                "intensityRange": ["0-1"],
                "device": ["cpu", "gpu"]
              }
            ]
          },
          "tooltip": "image tensor to equalize with shape (*,C,H,W)"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor"
          },
          "tooltip": "Equalized image tensor with shape (*,C,H,W)"
        }
      }
    },
    "Equalize_Clahe": {
      "type": "Equalize_Clahe",
      "category": "function",
      "title": "equalize clahe",
      "tooltip": "Apply clahe equalization on the input tensor.",
      "externalImports": "import kornia as K",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  const code = `${outputs[1]} = K.enhance.equalize_clahe(${inputs[1]}['value'], ${inputs.slice(2).join(', ')})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'torch.tensor',\r\n  'metadata': {\n    'colorChannel': 'rgb' if ${inputs[1]}['metadata']['colorChannel'] == 'rgb' else 'grayscale',\n    'channelOrder': 'channelFirst',\n    'isMiniBatched': True if ${inputs[1]}['metadata']['isMiniBatched'] == True else False,\n    'intensityRange': '0-1',\n    'device': 'cpu' if ${inputs[1]}['value'].get_device() == -1 else 'gpu'\n  }\n}\n${outputs[0]}`;\n  return code;\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor",
            "metadata": [
              {
                "colorChannel": ["rgb", "grayscale"],
                "isMiniBatched": [true, false],
                "channelOrder": "channelFirst",
                "intensityRange": ["0-1"],
                "device": ["cpu", "gpu"]
              }
            ]
          },
          "tooltip": "images tensor to equalize with values in the range [0, 1] and shape (*,C,H,W)"
        },
        "clip_limit": {
          "title": "clip_limit",
          "dataType": "float",
          "defaultValue": 40.0,
          "tooltip": " threshold value for contrast limiting. If 0 clipping is disabled."
        },
        "grid_size": {
          "title": "grid_size",
          "dataType": "tuple",
          "defaultValue": "(8,8)",
          "tooltip": "number of tiles to be cropped in each direction (GH, GW)."
        },
        "slow_and_differentiable ": {
          "title": "slow_and_differentiable ",
          "dataType": "bool",
          "defaultValue": "False",
          "tooltip": "flag to select implementation"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor"
          },
          "tooltip": "Equalized image or images with shape (*,C,H,W) as the input."
        }
      }
    }
  }
}
