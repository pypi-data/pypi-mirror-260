{
  "enable": true,
  "nodes": {
    "Swirl": {
      "type": "Swirl",
      "category": "function",
      "title": "swirl",
      "tooltip": "Image swirling is a non-linear image deformation that creates a whirlpool effect.",
      "externalImports": "from skimage.transform import swirl",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  // Begin Python code generation\r\n  let outputMetadata;\r\n\r\n  // Assuming inputs[1] contains the metadata of the previous node's output\r\n  const metadata = inputs[1].metadata;\r\n\r\n  if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-1') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-1'};\r\n  } else if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-255') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'rgb') {\r\n    outputMetadata = {'colorChannel': 'rgb', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'bgr') {\r\n    outputMetadata = {'colorChannel': 'bgr', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  }\r\n\r\n  const code = `${outputs[1]} = swirl(${inputs[1]}, ${inputs[2]}, ${inputs[3]}, ${inputs[4]}, ${inputs[5]}, ${inputs[6]}, ${inputs[7]}, ${inputs[8]}, ${inputs[9]}, ${inputs[10]})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'numpy.ndarray',\r\n  'metadata': outputMetadata\r\n}\r\n${outputs[0]}`;\r\n\r\n  return code;\r\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "The input image for swirl"
        },
        "center": {
          "title": "center",
          "dataType": "tuple",
          "defaultValue": "None",
          "tooltip": "Center coordinate of transformation."
        },
        "strength": {
          "title": "strength",
          "dataType": "float",
          "defaultValue": 1.0,
          "tooltip": "The amount of swirling applied."
        },
        "radius": {
          "title": "radius",
          "dataType": "float",
          "defaultValue": 100.0,
          "tooltip": "The extent of the swirl in pixels."
        },
        "rotation": {
          "title": "rotation",
          "dataType": "float",
          "defaultValue": 0.0,
          "tooltip": "Additional rotation applied to the image."
        },
        "output_shape": {
          "title": "output_shape",
          "dataType": "tuple",
          "defaultValue": "None",
          "tooltip": "Shape of the output image generated."
        },
        "order": {
          "title": "order",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "The order of the spline interpolation, default is 0 if image.dtype is bool and 1 otherwise. The order has to be in the range 0-5."
        },
        "mode": {
          "title": "mode",
          "dataType": "string",
          "defaultValue": "reflect",
          "tooltip": "Points outside the boundaries of the input are filled according to the given mode (default: ‘reflect’)"
        },
        "cval": {
          "title": "cval",
          "dataType": "float",
          "defaultValue": 0.0,
          "tooltip": "Used in conjunction with mode ‘constant’, the value outside the image boundaries."
        },
        "clip": {
          "title": "clip",
          "dataType": "boolean",
          "defaultValue": true,
          "tooltip": "Whether to clip the output to the range of values of the input image."
        },
        "preserve_range": {
          "title": "preserve_range",
          "dataType": "boolean",
          "defaultValue": false,
          "tooltip": "Whether to keep the original range of values."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "Swirled version of the input."
        }
      }
    },
    "Rescale": {
      "type": "Rescale",
      "category": "function",
      "title": "rescale",
      "tooltip": "Scale image by a certain factor.",
      "externalImports": "from skimage.transform import rescale",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  // Begin Python code generation\r\n  let outputMetadata;\r\n\r\n  // Assuming inputs[1] contains the metadata of the previous node's output\r\n  const metadata = inputs[1].metadata;\r\n\r\n  if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-1') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-1'};\r\n  } else if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-255') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'rgb') {\r\n    outputMetadata = {'colorChannel': 'rgb', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'bgr') {\r\n    outputMetadata = {'colorChannel': 'bgr', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  }\r\n\r\n  const code = `${outputs[1]} = rescale(${inputs[1]}, ${inputs[2]}, ${inputs[3]}, ${inputs[4]}, ${inputs[5]}, ${inputs[6]}, ${inputs[7]}, ${inputs[8]}, ${inputs[9]}, ${inputs[10]})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'numpy.ndarray',\r\n  'metadata': outputMetadata\r\n}\r\n${outputs[0]}`;\r\n\r\n  return code;\r\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "The input image for rescale"
        },
        "scale": {
          "title": "scale",
          "dataType": "float",
          "tooltip": "Scale factors"
        },
        "order": {
          "title": "order",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "The order of the spline interpolation, default is 0 if image.dtype is bool and 1 otherwise. The order has to be in the range 0-5."
        },
        "mode": {
          "title": "mode",
          "dataType": "string",
          "defaultValue": "reflect",
          "tooltip": "Points outside the boundaries of the input are filled according to the given mode"
        },
        "cval": {
          "title": "cval",
          "dataType": "float",
          "defaultValue": 0.0,
          "tooltip": "Used in conjunction with mode ‘constant’, the value outside the image boundaries."
        },
        "clip": {
          "title": "clip",
          "dataType": "boolean",
          "defaultValue": true,
          "tooltip": "Whether to clip the output to the range of values of the input image."
        },
        "preserve_range": {
          "title": "preserve_range",
          "dataType": "boolean",
          "defaultValue": false,
          "tooltip": "Whether to keep the original range of values."
        },
        "anti_aliasing": {
          "title": "anti_aliasing",
          "dataType": "boolean",
          "defaultValue": "None",
          "tooltip": "Whether to apply a Gaussian filter to smooth the image prior to down-scaling."
        },
        "anti_aliasing_sigma": {
          "title": "anti_aliasing_sigma",
          "dataType": "float",
          "defaultValue": "None",
          "tooltip": "Standard deviation for Gaussian filtering to avoid aliasing artifacts."
        },
        "channel_axis": {
          "title": "channel_axis",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "If None, the image is assumed to be a grayscale (single channel) image. Otherwise, this parameter indicates which axis of the array corresponds to channels."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "Scaled version of the input."
        }
      }
    },
    "Resize": {
      "type": "Resize",
      "category": "function",
      "title": "resize",
      "tooltip": "Resize image to match a certain size.",
      "externalImports": "from skimage.transform import resize",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  // Begin Python code generation\r\n  let outputMetadata;\r\n\r\n  // Assuming inputs[1] contains the metadata of the previous node's output\r\n  const metadata = inputs[1].metadata;\r\n\r\n  if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-1') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-1'};\r\n  } else if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-255') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'rgb') {\r\n    outputMetadata = {'colorChannel': 'rgb', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'bgr') {\r\n    outputMetadata = {'colorChannel': 'bgr', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  }\r\n\r\n  const code = `${outputs[1]} = resize(${inputs[1]}, ${inputs[2]}, ${inputs[3]}, ${inputs[4]}, ${inputs[5]}, ${inputs[6]}, ${inputs[7]}, ${inputs[8]}, ${inputs[9]})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'numpy.ndarray',\r\n  'metadata': outputMetadata\r\n}\r\n${outputs[0]}`;\r\n\r\n  return code;\r\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "The input image for resize"
        },
        "output_shape": {
          "title": "output_shape",
          "dataType": "tuple",
          "tooltip": "Size of the generated output image"
        },
        "order": {
          "title": "order",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "The order of the spline interpolation, default is 0 if image.dtype is bool and 1 otherwise. The order has to be in the range 0-5."
        },
        "mode": {
          "title": "mode",
          "dataType": "string",
          "defaultValue": "reflect",
          "tooltip": "Points outside the boundaries of the input are filled according to the given mode"
        },
        "cval": {
          "title": "cval",
          "dataType": "float",
          "defaultValue": 0.0,
          "tooltip": "Used in conjunction with mode ‘constant’, the value outside the image boundaries."
        },
        "clip": {
          "title": "clip",
          "dataType": "boolean",
          "defaultValue": true,
          "tooltip": "Whether to clip the output to the range of values of the input image."
        },
        "preserve_range": {
          "title": "preserve_range",
          "dataType": "boolean",
          "defaultValue": false,
          "tooltip": "Whether to keep the original range of values."
        },
        "anti_aliasing": {
          "title": "anti_aliasing",
          "dataType": "boolean",
          "defaultValue": "None",
          "tooltip": "Whether to apply a Gaussian filter to smooth the image prior to downsampling."
        },
        "anti_aliasing_sigma": {
          "title": "anti_aliasing_sigma",
          "dataType": "float",
          "defaultValue": "None",
          "tooltip": "Standard deviation for Gaussian filtering used when anti-aliasing."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "Resized version of the input."
        }
      }
    },
    "Downscale": {
      "type": "Downscale",
      "category": "function",
      "title": "downscale",
      "tooltip": "Down-sample N-dimensional image by local averaging.",
      "externalImports": "from skimage.transform import downscale_local_mean",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  // Begin Python code generation\r\n  let outputMetadata;\r\n\r\n  // Assuming inputs[1] contains the metadata of the previous node's output\r\n  const metadata = inputs[1].metadata;\r\n\r\n  if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-1') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-1'};\r\n  } else if (metadata.colorChannel === 'grayscale' && metadata.intensityRange === '0-255') {\r\n    outputMetadata = {'colorChannel': 'grayscale', 'channelOrder': 'none', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'rgb') {\r\n    outputMetadata = {'colorChannel': 'rgb', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  } else if (metadata.colorChannel === 'bgr') {\r\n    outputMetadata = {'colorChannel': 'bgr', 'channelOrder': 'channelLast', 'isMiniBatched': false, 'intensityRange': '0-255'};\r\n  }\r\n\r\n  const code = `${outputs[1]} = downscale_local_mean(${inputs[1]}, ${inputs[2]}, ${inputs[3]}, ${inputs[4]})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'numpy.ndarray',\r\n  'metadata': outputMetadata\r\n}\r\n${outputs[0]}`;\r\n\r\n  return code;\r\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "N-dimensional input image for downscale."
        },
        "factors": {
          "title": "factors",
          "dataType": "tuple",
          "tooltip": "Array containing down-sampling integer factor along each axis."
        },
        "cval": {
          "title": "cval",
          "dataType": "float",
          "defaultValue": 0.0,
          "tooltip": "Constant padding value if image is not perfectly divisible by the integer factors."
        },
        "clip": {
          "title": "clip",
          "dataType": "boolean",
          "defaultValue": true,
          "tooltip": "Unused, but kept here for API consistency with the other transforms in this module."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-1"
              },
              {
                "colorChannel": "grayscale",
                "channelOrder": "none",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "rgb",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              },
              {
                "colorChannel": "gbr",
                "channelOrder": "channelLast",
                "isMiniBatched": false,
                "intensityRange": "0-255"
              }
            ]
          },
          "tooltip": "Down-sampled image with same number of dimensions as input image."
        }
      }
    }
  }
}