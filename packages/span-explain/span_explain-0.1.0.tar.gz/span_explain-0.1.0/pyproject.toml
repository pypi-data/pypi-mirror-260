[tool.poetry]
name = "span-explain"
version = "0.1.0"
description = ""
authors = ["Sebastiaan Dijkstra <sebastiaandijkstra@gmail.com>"]
maintainers = ["Sebastiaan Dijkstra <sebastiaandijkstra@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"
langchain = "=0.1.3"
langchain-openai = "=0.0.2"
langchain-core = "0.1.15"
langchain-community = "0.0.15"
ruff = "=0.1.13"
nltk = "=3.8.1"
scipy = "=1.11.4"
scikit-learn = "=1.3.2"
matplotlib = "=3.8.2"
thefuzz = "=0.20.0"
pytest = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 119
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["ALL"]
ignore = [
    "D100",   # ignore missing docs
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D205",
    "D212",
    "D400",
    "D401",
    "D415",
    "E501",   # line too long, handled by black
    "E402",   # module level import not at top of file
    "E731",   # do not assign a lambda expression, use a def
    "TRY003", # avoid specifying long messages outside the exception class
    "TD002",  # missing author in TODO
    "TD003",  # missing link in TODO
    "FIX002", # line contains TODO, consider resolving the issue
    "ANN101", # deprecated
    "ANN102", # deprecated
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore unused imports in __init__.py files.
"__init__.py" = ["E402", "F401", "F403", "F811"]
"tests/**" = ["S101", "ANN001"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
